{
  "settings": {
    "main": {
      "description": "Ana Paintball (code ZCEZA), made by stormy#11818 • lazers, paint effects, jump pads, high scores and TONS of options :D • please import code often to get any updates and fixes • thanks ♥"
    },
    "lobby": {
      "Allow Players Who Are In Queue": "Yes",
      "Map Rotation": "After A Game",
      "Match Voice Chat": "Enabled",
      "Max Spectators": 12,
      "Return To Lobby": "Never"
    },
    "modes": {
      "Deathmatch": {
        "enabled maps": [
          "Château Guillard",
          "Château Guillard Halloween"
        ]
      },
      "General": {
        "Allow Hero Switching": "Off",
        "Game Mode Start": "Immediately",
        "Hero Limit": "Off",
        "Respawn As Random Hero": "On",
        "Respawn Time Scalar": "69%",
        "Score To Win": 50,
        "Spawn Health Packs": "Disabled"
      }
    },
    "heroes": {
      "General": {
        "Ultimate Ability": "Off",
        "Ana": {
          "Biotic Grenade": "Off",
          "Damage Dealt": "500%",
          "Damage Received": "500%",
          "Health": "10%",
          "No Ammunition Requirement": "On",
          "Sleep Dart Cooldown Time": "8%",
          "Ultimate Ability Nano Boost": "Off"
        },
        "enabled heroes": [
          "Ana"
        ]
      }
    },
    "workshop": {
      "infinite game time": "On",
      "scoping limit": "On"
    }
  },
  "variables": {
    "global": {
      "1": "jump_pads",
      "26": "draw_iterator",
      "27": "option_spawnSound",
      "28": "option_gameInfinite",
      "29": "option_aimDots",
      "30": "option_jumpPads",
      "31": "option_deathText",
      "32": "option_gameTips",
      "33": "option_paintBallz",
      "34": "option_aimDotsOnlyWhenScoped",
      "35": "option_playersShowOwnLaser",
      "36": "option_disableMelee",
      "37": "option_disableScoping",
      "38": "option_disableSleepz",
      "39": "option_disableDeath",
      "40": "option_waterForgiveness",
      "41": "option_scopeLimitOn",
      "42": "option_scopeLimitDelay",
      "43": "defaultColors",
      "44": "serverTime"
    },
    "player": {
      "2": "isFocusing",
      "3": "d",
      "4": "ks",
      "5": "maxks",
      "6": "sleeps",
      "7": "punch",
      "8": "unscopedHits",
      "24": "_paint_ballz",
      "26": "color",
      "27": "_textCache",
      "28": "_effectCache",
      "29": "_bossCache",
      "30": "_timerScoping",
      "33": "tmp_splootPos",
      "34": "tmp_splootOnPlayer",
      "35": "_lastGroundPos",
      "36": "_isAFK"
    }
  },
  "rules": [
    {
      "@default @variables": {
        "event": [
          "Ongoing - Global"
        ],
        "actions": [
          {
            "quote": "# default colors"
          },
          "Global.defaultColors = Empty Array",
          "Modify Global Variable(defaultColors, Append To Array, Color(Purple))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Rose))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Red))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Orange))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Yellow))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Lime Green))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Green))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Turquoise))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Aqua))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Sky Blue))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Blue))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Violet))",
          "Modify Global Variable(defaultColors, Append To Array, Color(White))",
          "disabled Modify Global Variable(defaultColors, Append To Array, Color(Gray))",
          "Modify Global Variable(defaultColors, Append To Array, Color(Black))",
          "disabled Modify Global Variable(defaultColors, Append To Array, Color(Team 1))",
          "disabled Modify Global Variable(defaultColors, Append To Array, Color(Team 2))",
          "Chase Global Variable Over Time(serverTime, 9999, 9999, None)"
        ]
      }
    },
    {
      "@world @options": {
        "event": [
          "Ongoing - Global"
        ],
        "actions": [
          {
            "quote": "@ options"
          },
          "Global.option_spawnSound = Workshop Setting Toggle(Custom String(\"options\"), Custom String(\"player spawn sound effect\"), True, 0)",
          "Global.option_aimDots = Workshop Setting Toggle(Custom String(\"options\"), Custom String(\"enemy aiming laser dots\"), True, 0)",
          "Global.option_playersShowOwnLaser = Workshop Setting Toggle(Custom String(\"options\"), Custom String(\n\t\t\t\"players can see their own scoping laser\"), True, 0)",
          "Global.option_aimDotsOnlyWhenScoped = Workshop Setting Toggle(Custom String(\"options\"), Custom String(\n\t\t\t\"only show aiming lasers when scoped\"), True, 0)",
          "Global.option_deathText = Workshop Setting Toggle(Custom String(\"options\"), Custom String(\"death text\"), False, 0)",
          "Global.option_paintBallz = Workshop Setting Toggle(Custom String(\"options\"), Custom String(\"paint ballz\"), True, 0)",
          {
            "quote": "@ game"
          },
          "Global.option_gameInfinite = Workshop Setting Toggle(Custom String(\"game\"), Custom String(\"infinite game time\"), False, 0)",
          "Global.option_waterForgiveness = Workshop Setting Toggle(Custom String(\"game\"), Custom String(\"players can't die in water\"), True,\n\t\t\t0)",
          "Global.option_jumpPads = Workshop Setting Toggle(Custom String(\"game\"), Custom String(\"jump pads\"), True, 0)",
          "Global.option_gameTips = Workshop Setting Toggle(Custom String(\"game\"), Custom String(\"game tips\"), True, 0)",
          "Global.option_disableDeath = Workshop Setting Toggle(Custom String(\"game\"), Custom String(\"always respawn instantly\"), False, 0)",
          {
            "quote": "@ abilities"
          },
          "Global.option_disableMelee = Workshop Setting Toggle(Custom String(\"abilities\"), Custom String(\"disable melee\"), False, 0)",
          "Global.option_disableScoping = Workshop Setting Toggle(Custom String(\"abilities\"), Custom String(\"disable scoping\"), False, 0)",
          "Global.option_disableSleepz = Workshop Setting Toggle(Custom String(\"abilities\"), Custom String(\"disable sleeps\"), False, 0)",
          "Global.option_scopeLimitOn = Workshop Setting Toggle(Custom String(\"abilities\"), Custom String(\"scoping limit\"), False, 0)",
          "Global.option_scopeLimitDelay = Workshop Setting Real(Custom String(\"abilities\"), Custom String(\"scoping limit delay\"), 0.900,\n\t\t\t0.200, 2, 0)"
        ]
      }
    },
    {
      "@develop @motd": {
        "event": [
          "Ongoing - Global"
        ],
        "actions": [
          "Disable Inspector Recording",
          "Create HUD Text(All Players(All Teams), Null, Null, Custom String(\"THIS MODE IS UNDER DEVELOPMENT\"), Left, -9, Color(White), Color(\n\t\t\tWhite), Color(White), Visible To and String, Default Visibility)",
          "Create HUD Text(All Players(All Teams), Null, Custom String(\"please use code \\\"ZCEZA\\\" for now, it will be updated\"), Null, Left,\n\t\t\t-8, Color(White), Color(White), Color(White), Visible To and String, Default Visibility)",
          {
            "quote": "# mode.focus tip"
          },
          "Create HUD Text(Filtered Array(All Players(All Teams), Is Dead(Current Array Element) || Current Array Element._isAFK), Null,\n\t\t\tCustom String(\"\\\"Ana Paintball Deluxe\\\" from stormy\"), Custom String(\"• press {0} to toggle \\\"focus mode\\\"\",\n\t\t\tInput Binding String(Button(Interact))), Right, 0, Color(White), Global.defaultColors[Round To Integer(\n\t\t\tGlobal.serverTime % Count Of(Global.defaultColors), Down)], Color(White), Visible To String and Color, Default Visibility)",
          {
            "quote": "# game code"
          },
          "Set Objective Description(All Players(All Teams), Custom String(\"code: zceza\"), Visible To)",
          {
            "quote": "# infinite timer"
          },
          "If(Global.option_gameInfinite)",
          "Wait(9, Ignore Condition)",
          "Wait Until(Match Time > 99, 99999)",
          "Set Match Time(817.500)",
          "Wait(0.016, Ignore Condition)",
          "Pause Match Time",
          "Disable Built-In Game Mode Completion",
          "Disable Built-In Game Mode Announcer",
          "Disable Built-In Game Mode Music",
          "End"
        ]
      }
    },
    {
      "@world @jump_pads": {
        "event": [
          "Ongoing - Global"
        ],
        "conditions": [
          "Global.option_jumpPads == True"
        ],
        "actions": [
          {
            "quote": "if you want to add a jump pad, just copy one of the lines below and hit the little camera for the new position. it will do all the work from there :D"
          },
          "Global.jump_pads = Empty Array",
          {
            "quote": "@make @jump pads"
          },
          "If(Current Map == Map(Château Guillard) || Current Map == Map(Château Guillard Halloween))",
          "Modify Global Variable(jump_pads, Append To Array, Vector(216.272, 2.250, 76.211))",
          "Modify Global Variable(jump_pads, Append To Array, Vector(187.268, 2.250, 70.981))",
          "Modify Global Variable(jump_pads, Append To Array, Vector(195.280, 2.250, 80.904))",
          "Modify Global Variable(jump_pads, Append To Array, Vector(176.989, 1.250, 51.669))",
          "Modify Global Variable(jump_pads, Append To Array, Vector(206.251, 10.286, 92.463))",
          "disabled Modify Global Variable(jump_pads, Append To Array, Vector(234.414, 5.250, 104.415))",
          "Modify Global Variable(jump_pads, Append To Array, Vector(237.398, 3.250, 86.175))",
          "Modify Global Variable(jump_pads, Append To Array, Vector(230.708, 3.250, 97.343))",
          "disabled Modify Global Variable(jump_pads, Append To Array, Vector(0, 0, 0))",
          "Else If(Current Map == Map(Hollywood) || Current Map == Map(Hollywood Halloween))",
          {
            "quote": "behind jail"
          },
          "Modify Global Variable(jump_pads, Append To Array, Vector(33.788, 3.358, -79.788))",
          {
            "quote": "tavern west"
          },
          "Modify Global Variable(jump_pads, Append To Array, Vector(13.636, 3.396, -69.146))",
          "Modify Global Variable(jump_pads, Append To Array, Vector(13.935, 3.379, -66.615))",
          {
            "quote": "spawn 2a mega"
          },
          "Modify Global Variable(jump_pads, Append To Array, Vector(-12.852, 2.978, -63.347))",
          "End",
          {
            "quote": "@draw @jump pads"
          },
          "For Global Variable(draw_iterator, 0, Count Of(Global.jump_pads), 1)",
          "If(Current Map == Map(Château Guillard Halloween) || Current Map == Map(Hollywood Halloween) || False || False)",
          "Create Effect(All Players(All Teams), Cloud, Color(Orange), Global.jump_pads[Global.draw_iterator] + Vector(0, -1.600, 0), 0.400,\n\t\t\t\t\tVisible To)",
          "Create Effect(All Players(All Teams), Sparkles, Color(Orange), Global.jump_pads[Global.draw_iterator] + Vector(0, -1.600, 0),\n\t\t\t\t\t0.900, Visible To)",
          "Create Effect(All Players(All Teams), Sphere, Color(Orange), Global.jump_pads[Global.draw_iterator] + Vector(0, -2.900, 0), 2,\n\t\t\t\t\tVisible To)",
          "Else",
          "Create Effect(All Players(All Teams), Cloud, Color(Sky Blue), Global.jump_pads[Global.draw_iterator] + Vector(0, -1.600, 0), 0.400,\n\t\t\t\t\tVisible To)",
          "Create Effect(All Players(All Teams), Sparkles, Color(Sky Blue), Global.jump_pads[Global.draw_iterator] + Vector(0, -1.600, 0),\n\t\t\t\t\t0.900, Visible To)",
          "Create Effect(All Players(All Teams), Sphere, Color(Sky Blue), Global.jump_pads[Global.draw_iterator] + Vector(0, -2.900, 0), 2,\n\t\t\t\t\tVisible To)",
          "End",
          "End"
        ]
      }
    },
    {
      "TODO: optimize # @player @jump_pads": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Global.option_jumpPads == True",
          "Is Alive(Event Player) == True",
          "(Is On Ground(Event Player) || Vertical Speed Of(Event Player) < -4) == True",
          "Is True For Any(Global.jump_pads, Distance Between(Event Player, Current Array Element + Vector(0, -1.600, 0)) <= 1.200) == True"
        ],
        "actions": [
          "Apply Impulse(Event Player, Up, 16.800 + Absolute Value(Vertical Speed Of(Event Player)) / 4, To World, Cancel Contrary Motion)",
          "Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Sky Blue), Position Of(Event Player), 40)",
          "If(Current Map == Map(Château Guillard Halloween))",
          "Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 2)",
          "Play Effect(All Players(All Teams), Good Pickup Effect, Color(Orange), Position Of(Event Player), 0.900)",
          "Else",
          "Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Position Of(Event Player), 2)",
          "Play Effect(All Players(All Teams), Good Pickup Effect, Color(Sky Blue), Position Of(Event Player), 0.900)",
          "End"
        ]
      }
    },
    {
      "@player @join": {
        "event": [
          "Player Joined Match",
          "All",
          "All"
        ],
        "actions": [
          "Event Player._textCache = Empty Array",
          "Event Player._effectCache = Empty Array",
          "Event Player._bossCache = Empty Array",
          "Disable Hero HUD(Event Player)",
          "Disable Game Mode HUD(Event Player)",
          "Event Player._isAFK = True",
          {
            "quote": "# hide player"
          },
          "Set Status(Event Player, Null, Phased Out, 9999)",
          "disabled Set Status(Event Player, Null, Rooted, 9999)",
          {
            "quote": "your own hero shows up invisible on camera :("
          },
          "disabled Set Invisible(Event Player, Enemies)",
          {
            "quote": "# wait until they spawn"
          },
          "Wait Until(Has Spawned(Event Player), 99999)",
          "Start Holding Button(Event Player, Button(Secondary Fire))",
          "Start Forcing Player Outlines(Event Player, Event Player, True, Color(Purple), Default)",
          "Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(198.139, 24.755, 84.200)), 900, To World,\n\t\t\tDirection and Turn Rate)",
          "Start Forcing Player Position(Event Player, Vector(195.904, 23.600, 82.410), True)",
          "Teleport(Event Player, Vector(195.904, 23.600, 82.410))",
          "Start Camera(Event Player, Vector(195.860, 24.755, 83.780), Vector(198.600, 26, 77.436), 90)",
          {
            "quote": "@player @color select"
          },
          "Event Player.color = Random Value In Array(Global.defaultColors)",
          "Create Progress Bar HUD Text(Event Player, (Index Of Array Value(Global.defaultColors, Event Player.color) + 1) / Count Of(\n\t\t\tGlobal.defaultColors) * 100, Custom String(\"{0}  {1}  {2}\", Index Of Array Value(Global.defaultColors, Event Player.color)\n\t\t\t== 0 ? Custom String(\"\") : Icon String(Arrow: Left), Event Player.color, Event Player.color == Last Of(Global.defaultColors)\n\t\t\t? Custom String(\"\") : Icon String(Arrow: Right)), Top, 9, Event Player.color, Color(White), Visible To Values and Color,\n\t\t\tDefault Visibility)",
          "Modify Player Variable(Event Player, _bossCache, Append To Array, Last Text ID)",
          {
            "quote": "effect"
          },
          "Create Effect(Event Player, Good Aura, Event Player.color, Event Player, 4, Visible To and Color)",
          "Modify Player Variable(Event Player, _effectCache, Append To Array, Last Created Entity)",
          {
            "quote": "text"
          },
          "Create In-World Text(Event Player, Custom String(\"PRESS {0} TO JOIN MATCH\", Input Binding String(Button(Jump))), Vector(198.600,\n\t\t\t22.600, 77.436), 12, Do Not Clip, Visible To and String, Color(White), Default Visibility)",
          "Modify Player Variable(Event Player, _textCache, Append To Array, Last Text ID)",
          {
            "quote": "effect"
          },
          "Create Effect(Event Player, Cloud, Event Player.color, Event Player, 4, Visible To and Color)",
          "Modify Player Variable(Event Player, _effectCache, Append To Array, Last Created Entity)",
          {
            "quote": "@"
          },
          "disabled Wait(2, Ignore Condition)",
          "disabled Stop Facing(Event Player)",
          {
            "quote": "# color select"
          },
          "While(0 == 0)",
          "Wait Until(Is Button Held(Event Player, Button(Jump)) || Absolute Value(X Component Of(Throttle Of(Event Player))) > 0.400, 6)",
          "If(Is Button Held(Event Player, Button(Jump)))",
          "Break",
          "Else If(X Component Of(Throttle Of(Event Player)) < 0)",
          "Event Player.color = Global.defaultColors[(Index Of Array Value(Global.defaultColors, Event Player.color) + 1) % Count Of(\n\t\t\t\t\tGlobal.defaultColors)]",
          "Else",
          "Event Player.color = Global.defaultColors[Index Of Array Value(Global.defaultColors, Event Player.color)\n\t\t\t\t\t!= 0 ? Index Of Array Value(Global.defaultColors, Event Player.color) - 1 : Count Of(Global.defaultColors) - 1]",
          "End",
          "Wait Until(!(Is Button Held(Event Player, Button(Jump)) || Absolute Value(X Component Of(Throttle Of(Event Player))) > 0.400), 6)",
          "disabled Wait(0.090, Ignore Condition)",
          "End",
          {
            "quote": "@color is selected"
          },
          "Stop Camera(Event Player)",
          "Clear Status(Event Player, Phased Out)",
          "Stop Holding Button(Event Player, Button(Secondary Fire))",
          "Stop Facing(Event Player)",
          "Stop Forcing Player Position(Event Player)",
          "Wait(0.016, Ignore Condition)",
          "Teleport(Event Player, Random Value In Array(Spawn Points(All Teams)))",
          {
            "quote": "# wipe text cache"
          },
          "For Player Variable(Event Player, X, 0, Count Of(Event Player._textCache), 1)",
          {
            "quote": "text"
          },
          "disabled Create In-World Text(Event Player, Event Player.color, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1 + Vector(\n\t\t\t\t0, -0.200, 0), 20, Clip Against Surfaces, Visible To Position String and Color, Event Player.color, Default Visibility)",
          "disabled Modify Player Variable(Event Player, _textCache, Append To Array, Last Text ID)",
          "Destroy In-World Text(Event Player._textCache[Event Player.X])",
          "End",
          {
            "quote": "# wipe effect cache"
          },
          "For Player Variable(Event Player, X, 0, Count Of(Event Player._effectCache), 1)",
          "Destroy Effect(Event Player._effectCache[Event Player.X])",
          "End",
          {
            "quote": "# wipe bossbar cache"
          },
          "For Player Variable(Event Player, X, 0, Count Of(Event Player._bossCache), 1)",
          "Destroy Progress Bar HUD Text(Event Player._bossCache[Event Player.X])",
          "End",
          "Enable Hero HUD(Event Player)",
          "Enable Game Mode HUD(Event Player)",
          "If(Global.option_scopeLimitOn)",
          {
            "quote": "scope timer boss bar"
          },
          "Create Progress Bar HUD Text(Event Player._timerScoping > 0 && Is Firing Secondary(Event Player) ? Event Player : Null,\n\t\t\t\tRound To Integer(Event Player._timerScoping / Global.option_scopeLimitDelay * 100, Up), Custom String(\"scoping timer\"), Top, 9,\n\t\t\t\tEvent Player.color, Color(White), Visible To Values and Color, Default Visibility)",
          "Modify Player Variable(Event Player, _bossCache, Append To Array, Last Text ID)",
          "End",
          "If(Global.option_aimDots)",
          {
            "quote": "# player dot"
          },
          "Create Effect(Global.option_playersShowOwnLaser ? All Players(All Teams) : Filtered Array(All Players(All Teams),\n\t\t\t\tEvent Player != Current Array Element), Good Aura, Event Player.color, Update Every Frame((\n\t\t\t\t!Global.option_aimDotsOnlyWhenScoped ? True : Is Firing Secondary(Event Player)) && !(Ray Cast Hit Position(Eye Position(\n\t\t\t\tEvent Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 90, All Players(All Teams), Event Player,\n\t\t\t\tFalse) == Eye Position(Event Player) + Facing Direction Of(Event Player) * 90) ? Ray Cast Hit Position(Eye Position(\n\t\t\t\tEvent Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 90, All Players(All Teams), Event Player,\n\t\t\t\tFalse) : Null), 0.049, Visible To Position Radius and Color)",
          "disabled Wait Until(Is Button Held(Event Player, Button(Jump)) || Absolute Value(X Component Of(Throttle Of(Event Player))) > 0.400, 6)",
          "Modify Player Variable(Event Player, _effectCache, Append To Array, Last Created Entity)",
          "End",
          {
            "quote": "# show new color to all other players"
          },
          "For Player Variable(Event Player, J, 0, Count Of(All Players(All Teams)), 1)",
          "Start Forcing Player Outlines(Event Player, All Players(All Teams)[Event Player.J], True, Event Player.color, Default)",
          "End",
          "Event Player._isAFK = False"
        ]
      }
    },
    {
      "": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Is Button Held(Event Player, Button(Interact)) == True",
          "Event Player == Host Player"
        ],
        "actions": [
          "Small Message(Event Player, Custom String(\"noclip\"))",
          "While(Is Button Held(Event Player, Button(Interact)))",
          "If(!Is Button Held(Event Player, Button(Ability 1)))",
          "Start Forcing Player Position(Event Player, Position Of(Event Player) + Facing Direction Of(Event Player) * 0.200, False)",
          "End",
          "Wait(0.016, Ignore Condition)",
          "End",
          "Stop Forcing Player Position(Event Player)",
          "Wait(0.090, Ignore Condition)",
          "Apply Impulse(Event Player, Vector(0, 9, 0), 0, To World, Cancel Contrary Motion)"
        ]
      }
    },
    {
      "@player @timer.scoping": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Is Firing Secondary(Event Player) == True",
          "Global.option_scopeLimitOn == True"
        ],
        "actions": [
          {
            "quote": "# count down timer to 0"
          },
          "Event Player._timerScoping = Global.option_scopeLimitDelay",
          "Chase Player Variable Over Time(Event Player, _timerScoping, 0, Global.option_scopeLimitDelay, Destination and Duration)",
          {
            "quote": "# wait until timer is done"
          },
          "Wait(Global.option_scopeLimitDelay, Abort When False)",
          "disabled Wait(0.200, Abort When False)",
          "Wait(0.200, Ignore Condition)",
          "Abort If(!Is Firing Secondary(Event Player))",
          "Cancel Primary Action(Event Player)"
        ]
      }
    },
    {
      "@player @paint.ballz": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Is Firing Primary(Event Player) == True",
          "Global.option_paintBallz == True"
        ],
        "actions": [
          {
            "quote": "if no player and wall was hit"
          },
          "Abort If(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 90,\n\t\t\tAll Players(All Teams), Event Player, False) == Eye Position(Event Player) + Facing Direction Of(Event Player) * 90)",
          "Event Player.tmp_splootOnPlayer = Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(\n\t\t\tEvent Player) * 90, All Players(All Teams), Event Player, False) != Null",
          {
            "quote": "@note \\\"can delete this variable if a tertiary ray cast is done on point of impact -> boolean\\\""
          },
          "Event Player.tmp_splootPos = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(\n\t\t\tEvent Player) * 99, All Players(All Teams), Event Player, False)",
          {
            "quote": "# secondary delay"
          },
          "If(!Is Firing Secondary(Event Player))",
          {
            "quote": "#previously 90"
          },
          "Wait(Distance Between(Eye Position(Event Player), Event Player.tmp_splootPos) / 125, Ignore Condition)",
          "End",
          {
            "quote": "# paint sploot"
          },
          "Play Effect(All Players(All Teams), Bad Explosion, Event Player.color, Event Player.tmp_splootPos, 0.200)",
          "Abort If(Event Player.tmp_splootOnPlayer)",
          {
            "quote": "# paint ball"
          },
          "Create Effect(All Players(All Teams), Sphere, Event Player.color, Event Player.tmp_splootPos, 0.090, Visible To and Color)",
          "Modify Player Variable(Event Player, _paint_ballz, Append To Array, Last Created Entity)"
        ]
      }
    },
    {
      "@player @quit": {
        "event": [
          "Player Left Match",
          "All",
          "All"
        ],
        "actions": [
          {
            "quote": "# wipe text cache"
          },
          "For Player Variable(Event Player, X, 0, Count Of(Event Player._textCache), 1)",
          "Destroy In-World Text(Event Player._textCache[Event Player.X])",
          "End",
          {
            "quote": "# wipe effect cache"
          },
          "For Player Variable(Event Player, X, 0, Count Of(Event Player._effectCache), 1)",
          "Destroy Effect(Event Player._effectCache[Event Player.X])",
          "End",
          {
            "quote": "# wipe bossbar cache"
          },
          "For Player Variable(Event Player, X, 0, Count Of(Event Player._bossCache), 1)",
          "Destroy Progress Bar HUD Text(Event Player._bossCache[Event Player.X])",
          "End"
        ]
      }
    },
    {
      "@player @death": {
        "event": [
          "Player Died",
          "All",
          "All"
        ],
        "actions": [
          {
            "quote": "# wipe paintballz"
          },
          "For Player Variable(Event Player, X, 0, Count Of(Event Player._paint_ballz), 1)",
          "Destroy Effect(Event Player._paint_ballz[Event Player.X])",
          "End"
        ]
      }
    },
    {
      "TODO: \\\"COMBINED sorted array of paint ball ids\\\"": {
        "event": [
          "Ongoing - Global"
        ]
      }
    },
    {
      "@player.join @outlines": {
        "event": [
          "Player Joined Match",
          "All",
          "All"
        ],
        "actions": [
          "Wait Until(Has Spawned(Event Player), 99999)",
          {
            "quote": "# download color data for other players"
          },
          "For Player Variable(Event Player, J, 0, Count Of(All Players(All Teams)), 1)",
          "Start Forcing Player Outlines(All Players(All Teams)[Event Player.J], Event Player, True, All Players(All Teams)\n\t\t\t\t[Event Player.J].color, Default)",
          "End"
        ]
      }
    },
    {
      "@player.death @quick": {
        "event": [
          "Player Died",
          "All",
          "All"
        ],
        "actions": [
          "If(Global.option_disableDeath)",
          "Respawn(Event Player)",
          "Abort",
          "End",
          "Wait Until(!Is Button Held(Event Player, Button(Jump)), 99999)",
          "Wait Until(Is Button Held(Event Player, Button(Jump)), 99999)",
          "Abort If(!Is Dead(Event Player))",
          "Respawn(Event Player)"
        ]
      }
    },
    {
      "@player.spawn @sound.effect": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Global.option_spawnSound == True",
          "Is Alive(Event Player) == True",
          "Event Player._isAFK == False"
        ],
        "actions": [
          "Wait Until(Absolute Value(X Component Of(Throttle Of(Event Player))) + Absolute Value(Y Component Of(Throttle Of(Event Player)))\n\t\t\t+ Absolute Value(Z Component Of(Throttle Of(Event Player))) > 0.090, 99999)",
          "Play Effect(All Players(All Teams), Explosion Sound, Color(White), Position Of(Event Player), 80)"
        ]
      }
    },
    {
      "@world @gameinfo": {
        "event": [
          "Ongoing - Global"
        ],
        "actions": [
          {
            "quote": "# sparkle effects"
          },
          "disabled Create Effect(All Players(All Teams), Sparkles, Color(Sky Blue), Position Of(Last Of(Sorted Array(All Players(All Teams),\n\t\t\tCurrent Array Element.sleeps))), 0.900, Visible To Position and Radius)",
          "disabled Create Effect(All Players(All Teams), Sparkles, Color(Purple), Position Of(Last Of(Sorted Array(All Players(All Teams),\n\t\t\tCurrent Array Element.maxks))), 0.900, Visible To Position and Radius)",
          "disabled Create Effect(All Players(All Teams), Sparkles, Color(Red), Position Of(Last Of(Sorted Array(All Players(All Teams),\n\t\t\tCurrent Array Element.d))), 1, Visible To Position and Radius)",
          "disabled Create Effect(All Players(All Teams), Sparkles, Color(Red), Position Of(Last Of(Sorted Array(All Players(All Teams),\n\t\t\tCurrent Array Element.punch))), 0.900, Visible To Position and Radius)",
          "disabled Create Effect(All Players(All Teams), Sparkles, Color(Orange), Position Of(Last Of(Sorted Array(All Players(All Teams),\n\t\t\tPlayer Stat(Current Array Element, Final Blows) / Player Stat(Current Array Element, Deaths)))), 0.900,\n\t\t\tVisible To Position and Radius)",
          "If(!Global.option_disableSleepz)",
          {
            "quote": "# game board"
          },
          "Create HUD Text(All Players(All Teams), Null, Custom String(\" \"), Null, Left, 0, Color(White), Color(White), Color(White),\n\t\t\t\tVisible To and String, Default Visibility)",
          "Create HUD Text(Filtered Array(All Players(All Teams), !Current Array Element.isFocusing), Ability Icon String(Hero(Ana), Button(\n\t\t\t\tAbility 1)), Custom String(\"most sleepz\"), Custom String(\"{0} - {2}\", Last Of(Sorted Array(All Players(All Teams),\n\t\t\t\tCurrent Array Element.sleeps)), Null, Last Of(Sorted Array(All Players(All Teams), Current Array Element.sleeps)).sleeps),\n\t\t\t\tLeft, 1, Custom Color(254, 163, 170, 255), Custom Color(254, 163, 170, 255), Color(White), Visible To and String,\n\t\t\t\tDefault Visibility)",
          "End",
          "Create HUD Text(All Players(All Teams), Null, Custom String(\"  \"), Null, Left, 2, Color(White), Color(White), Color(White),\n\t\t\tVisible To and String, Default Visibility)",
          "Create HUD Text(Filtered Array(All Players(All Teams), !Current Array Element.isFocusing), Ability Icon String(Hero(Pharah),\n\t\t\tButton(Ability 1)), Custom String(\"higest killstreak\"), Custom String(\"{0} - {2}\", Last Of(Sorted Array(All Players(All Teams),\n\t\t\tCurrent Array Element.maxks)), Null, Last Of(Sorted Array(All Players(All Teams), Current Array Element.maxks)).maxks), Left,\n\t\t\t3, Custom Color(248, 184, 139, 255), Custom Color(248, 184, 139, 255), Color(White), Visible To and String,\n\t\t\tDefault Visibility)",
          "disabled Create HUD Text(All Players(All Teams), Null, Custom String(\"  \"), Null, Left, 4, Color(White), Color(White), Color(White),\n\t\t\tVisible To and String, Default Visibility)",
          "disabled Create HUD Text(All Players(All Teams), Icon String(Skull), Custom String(\"most deaths\"), Custom String(\"{0} - {2}\", Last Of(\n\t\t\tSorted Array(All Players(All Teams), Current Array Element.d)), Null, Last Of(Sorted Array(All Players(All Teams),\n\t\t\tCurrent Array Element.d)).d), Left, 5, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility)",
          "If(!Global.option_disableMelee)",
          "Create HUD Text(All Players(All Teams), Null, Custom String(\"  \"), Null, Left, 4, Color(White), Color(White), Color(White),\n\t\t\t\tVisible To and String, Default Visibility)",
          "Create HUD Text(Filtered Array(All Players(All Teams), !Current Array Element.isFocusing), Ability Icon String(Hero(Ana), Button(\n\t\t\t\tMelee)), Custom String(\"most melees\"), Custom String(\"{0} - {2}\", Last Of(Sorted Array(All Players(All Teams),\n\t\t\t\tCurrent Array Element.punch)), Null, Last Of(Sorted Array(All Players(All Teams), Current Array Element.punch)).punch), Left,\n\t\t\t\t5, Custom Color(250, 248, 132, 255), Custom Color(250, 248, 132, 255), Color(White), Visible To and String,\n\t\t\t\tDefault Visibility)",
          "End",
          "Create HUD Text(All Players(All Teams), Null, Custom String(\"  \"), Null, Left, 6, Color(White), Color(White), Color(White),\n\t\t\tVisible To and String, Default Visibility)",
          "Create HUD Text(Filtered Array(All Players(All Teams), !Current Array Element.isFocusing), Ability Icon String(Hero(Mercy), Button(\n\t\t\tUltimate)), Custom String(\"higest k/d\"), Custom String(\"{0} - {2}\", Last Of(Sorted Array(All Players(All Teams), Player Stat(\n\t\t\tCurrent Array Element, Final Blows) / Player Stat(Current Array Element, Deaths))), Null, Player Stat(Last Of(Sorted Array(\n\t\t\tAll Players(All Teams), Player Stat(Current Array Element, Final Blows) / Player Stat(Current Array Element, Deaths))),\n\t\t\tFinal Blows) / Player Stat(Last Of(Sorted Array(All Players(All Teams), Player Stat(Current Array Element, Final Blows)\n\t\t\t/ Player Stat(Current Array Element, Deaths))), Deaths)), Left, 7, Custom Color(186, 237, 145, 255), Custom Color(186, 237,\n\t\t\t145, 255), Color(White), Visible To and String, Default Visibility)",
          "Create HUD Text(All Players(All Teams), Null, Custom String(\" \"), Null, Left, 8, Color(White), Color(White), Color(White),\n\t\t\tVisible To and String, Default Visibility)",
          "disabled Create HUD Text(Filtered Array(All Players(All Teams), !Current Array Element.isFocusing), Ability Icon String(Hero(Ana), Button(\n\t\t\tAbility 1)), Custom String(\"most noscopes\"), Custom String(\"{0} - {2}\", Last Of(Sorted Array(All Players(All Teams),\n\t\t\tCurrent Array Element.unscopedHits)), Null, Last Of(Sorted Array(All Players(All Teams), Current Array Element.unscopedHits))\n\t\t\t.unscopedHits), Left, 9, Custom Color(178, 206, 254, 255), Custom Color(178, 206, 254, 255), Color(White),\n\t\t\tVisible To and String, Default Visibility)",
          "Create HUD Text(Filtered Array(All Players(All Teams), !Current Array Element.isFocusing), Ability Icon String(Hero(Baptiste),\n\t\t\tButton(Ability 2)), Custom String(\"most noscopes\"), Custom String(\"{0} - {2}\", Last Of(Sorted Array(All Players(All Teams),\n\t\t\tPlayer Hero Stat(Current Array Element, Hero(Ana), Shots Hit) - Player Hero Stat(Current Array Element, Hero(Ana),\n\t\t\tScoped Hits))), Null, Player Hero Stat(Last Of(Sorted Array(All Players(All Teams), Player Hero Stat(Current Array Element,\n\t\t\tHero(Ana), Shots Hit) - Player Hero Stat(Current Array Element, Hero(Ana), Scoped Hits))), Hero(Ana), Shots Hit)\n\t\t\t- Player Hero Stat(Last Of(Sorted Array(All Players(All Teams), Player Hero Stat(Current Array Element, Hero(Ana), Shots Hit)\n\t\t\t- Player Hero Stat(Current Array Element, Hero(Ana), Scoped Hits))), Hero(Ana), Scoped Hits)), Left, 9, Custom Color(178, 206,\n\t\t\t254, 255), Custom Color(178, 206, 254, 255), Color(White), Visible To and String, Default Visibility)",
          "If(!Global.option_disableScoping)",
          "Create HUD Text(All Players(All Teams), Null, Custom String(\" \"), Null, Left, 10, Color(White), Color(White), Color(White),\n\t\t\t\tVisible To and String, Default Visibility)",
          "Create HUD Text(Filtered Array(All Players(All Teams), !Current Array Element.isFocusing), Ability Icon String(Hero(Echo), Button(\n\t\t\t\tSecondary Fire)), Custom String(\"scoped accuracy\"), Custom String(\"{0} - {2}%\", Last Of(Sorted Array(All Players(All Teams),\n\t\t\t\tPlayer Hero Stat(Current Array Element, Hero(Ana), Scoped Accuracy))), Null, Round To Integer(Player Hero Stat(Last Of(\n\t\t\t\tSorted Array(All Players(All Teams), Player Hero Stat(Current Array Element, Hero(Ana), Scoped Accuracy))), Hero(Ana),\n\t\t\t\tScoped Accuracy) * 100, Up)), Left, 12, Custom Color(242, 162, 232, 255), Custom Color(242, 162, 232, 255), Color(White),\n\t\t\t\tVisible To and String, Default Visibility)",
          "End"
        ]
      }
    },
    {
      "@player @track#kills": {
        "event": [
          "Player Dealt Final Blow",
          "All",
          "All"
        ],
        "actions": [
          {
            "quote": "@track#sleeps"
          },
          "If(Event Ability == Button(Ability 1))",
          "Play Effect(All Players(All Teams), Good Pickup Effect, Custom Color(254, 163, 170, 255), Event Player, 1)",
          "Event Player.sleeps += 1",
          "If(Random Integer(0, 1) < 1)",
          "Communicate(Attacker, Sorry)",
          "End",
          "End",
          {
            "quote": "@track#punches"
          },
          "If(Event Ability == Button(Melee))",
          "Play Effect(All Players(All Teams), Good Pickup Effect, Custom Color(250, 248, 132, 255), Event Player, 1)",
          "Event Player.punch += 1",
          "If(Random Integer(0, 1) < 1)",
          "Communicate(Attacker, Goodbye)",
          "End",
          "End",
          {
            "quote": "@track#ks"
          },
          "Event Player.ks += 1",
          {
            "quote": "@track#maxks"
          },
          "If(Event Player.ks > Event Player.maxks)",
          "Play Effect(All Players(All Teams), Good Pickup Effect, Custom Color(248, 184, 139, 255), Event Player, 1)",
          "Event Player.maxks = Event Player.ks",
          "End",
          "disabled Event Player.unscopedHits = Player Hero Stat(Event Player, Hero(Ana), Shots Hit) - Player Hero Stat(Event Player, Hero(Ana),\n\t\t\tScoped Hits)",
          "Victim.ks = 0"
        ]
      }
    },
    {
      "@player @mode.focus": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Is Button Held(Event Player, Button(Interact)) == True",
          "Event Player._isAFK == False"
        ],
        "actions": [
          "Event Player.isFocusing = !Event Player.isFocusing",
          "Small Message(Event Player, Custom String(\"focus mode: {2}\", Null, Null, Event Player.isFocusing ? Custom String(\"on\")\n\t\t\t: Custom String(\"off\")))",
          {
            "quote": "# hero display"
          },
          "If(Event Player.isFocusing)",
          "Disable Game Mode HUD(Event Player)",
          "Else",
          "Enable Game Mode HUD(Event Player)",
          "End"
        ]
      }
    },
    {
      "@player @disable": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "actions": [
          "If(Global.option_disableMelee)",
          "Set Melee Enabled(Event Player, False)",
          "End",
          "If(Global.option_disableScoping)",
          "Set Secondary Fire Enabled(Event Player, False)",
          "End",
          "If(Global.option_disableSleepz)",
          "Set Ability 1 Enabled(Event Player, False)",
          "End"
        ]
      }
    },
    {
      "@water @player.boat": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Global.option_waterForgiveness == True"
        ],
        "actions": [
          "Wait Until(Has Spawned(Event Player) && Is On Ground(Event Player), 99999)",
          "Event Player._lastGroundPos = Position Of(Event Player)",
          {
            "quote": "# event loop"
          },
          "While(0 == 0)",
          "Wait Until(!Is On Ground(Event Player), 99999)",
          "Event Player._lastGroundPos = Position Of(Event Player)",
          {
            "quote": "# wait until is swimming in water"
          },
          "Wait Until((!Is On Ground(Event Player) && Y Component Of(Update Every Frame(Position Of(Event Player))) < -0.200) || Is On Ground(\n\t\t\t\tEvent Player), 99999)",
          "If(Is On Ground(Event Player))",
          "Continue",
          "End",
          {
            "quote": "# wait until is swimming in water"
          },
          "disabled Wait Until(!Is On Ground(Event Player) && Y Component Of(Update Every Frame(Position Of(Event Player))) < -0.200, 99999)",
          "Wait(0.016, Ignore Condition)",
          "If(Is On Ground(Event Player))",
          "Continue",
          "End",
          "Teleport(Event Player, Event Player._lastGroundPos)",
          "Apply Impulse(Event Player, Vector Towards(Velocity Of(Event Player), Vector(0, 0, 0)), 0.002, To World, Cancel Contrary Motion)",
          "Set Status(Event Player, Null, Frozen, 2)",
          "Wait(0.016, Ignore Condition)",
          "Wait Until(Absolute Value(Vertical Speed Of(Event Player)) > 9, 2)",
          "If(Vertical Speed Of(Event Player) > 9)",
          "Abort",
          "End",
          "If(Has Status(Event Player, Frozen))",
          "Teleport(Event Player, Nearest Walkable Position(Event Player._lastGroundPos))",
          "End",
          "End"
        ]
      }
    },
    {
      "@water @player.boat": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Global.option_waterForgiveness == True",
          {
            "quote": "is in air"
          },
          "Is On Ground(Event Player) == False",
          {
            "quote": "is falling"
          },
          "Vertical Speed Of(Event Player) < 0",
          {
            "quote": "# optional quality verification"
          },
          "Distance Between(Position Of(Event Player), Nearest Walkable Position(Position Of(Event Player))) > 2",
          "Y Component Of(Update Every Frame(Position Of(Event Player))) < -0.200"
        ],
        "actions": [
          "Apply Impulse(Event Player, Vector Towards(Velocity Of(Event Player), Vector(0, 0, 0)), 0.002, To World, Cancel Contrary Motion)",
          "Teleport(Event Player, Event Player._lastGroundPos)",
          "Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Event Player.color, Occluded)",
          "Set Status(Event Player, Null, Frozen, 2)",
          "Wait Until(Y Component Of(Update Every Frame(Position Of(Event Player))) < 0.200, 2.900)",
          "If(Has Status(Event Player, Frozen))",
          "Apply Impulse(Event Player, Vector Towards(Velocity Of(Event Player), Vector(0, 0, 0)), 0.002, To World, Cancel Contrary Motion)",
          "Teleport(Event Player, Nearest Walkable Position(Event Player._lastGroundPos))",
          "End",
          "Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Event Player.color, Default)"
        ]
      }
    },
    {
      "@player @variable.lastGroundPos": {
        "event": [
          "Ongoing - Each Player",
          "All",
          "All"
        ],
        "conditions": [
          "Event Player._isAFK == False",
          "Is On Ground(Event Player) == False"
        ],
        "actions": [
          "Event Player._lastGroundPos = Position Of(Event Player)"
        ]
      }
    }
  ]
}