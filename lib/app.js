"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkshopDeserialize = void 0;
const parser_1 = require("./parser");
const WorkshopDeserialize = (workshopSettings) => parser_1.parse(workshopSettings);
exports.WorkshopDeserialize = WorkshopDeserialize;
// test trick
const txt = 'c2V0dGluZ3MKewoJbWFpbgoJewoJCURlc2NyaXB0aW9uOiAiSGVhdCBTdHJlZXQ6IFN1cnZpdmFsIC0gQ1I2N0YgLSBGaWdodCBmb3Igc3Vydml2YWwgYWdhaW5zdCBhbiBvdmVyd2hlbG1pbmcgZm9yY2UuIFlvdXIgZW5lbWllcyBhcmUgbnVtZXJvdXMgYW5kIGh1bnRpbmcgeW91IGRvd24uIENhbiB5b3Ugc3Vydml2ZSBhbGwgd2F2ZXM/IFRoZSBBSSBpcyBhYmxlIHRvIHBsYXkgMTYgZGlmZmVyZW50IGhlcm9lcywgc29tZSBvZiB3aGljaCBoYXZlIG5ldyBhYmlsaXRpZXMuIFB2RSBnYW1lIG1vZGUgc3VpdGVkIGZvciAxIHRvIDUgcGxheWVycy4gdjIuNS4xIGJ5IFNoaW5nZW4uIEZvciBtb3JlIGluZm8sIHZpc2l0IHdvcmtzaG9wLmNvZGVzL2hlYXQtc3RyZWV0IgoJfQoKCWxvYmJ5Cgl7CgkJQWxsb3cgUGxheWVycyBXaG8gQXJlIEluIFF1ZXVlOiBZZXMKCQlNYXggU3BlY3RhdG9yczogMTIKCQlNYXggVGVhbSAxIFBsYXllcnM6IDAKCQlNYXggVGVhbSAyIFBsYXllcnM6IDUKCQlSZXR1cm4gVG8gTG9iYnk6IE5ldmVyCgl9CgoJbW9kZXMKCXsKCQlUZWFtIERlYXRobWF0Y2gKCQl7CgkJCWVuYWJsZWQgbWFwcwoJCQl7CgkJCQlCbGl6emFyZCBXb3JsZAoJCQkJQ2jDonRlYXUgR3VpbGxhcmQKCQkJCUVjb3BvaW50OiBBbnRhcmN0aWNhCgkJCQlIb2xseXdvb2QKCQkJCUthbmV6YWthCgkJCQlLaW5nJ3MgUm93CgkJCQlQYXJpcwoJCQl9CgkJfQoKCQlHZW5lcmFsCgkJewoJCQlHYW1lIE1vZGUgU3RhcnQ6IEltbWVkaWF0ZWx5CgkJCUhlcm8gTGltaXQ6IE9mZgoJCQlLaWxsIENhbTogT2ZmCgkJCUtpbGwgRmVlZDogT2ZmCgkJCVNjb3JlIFRvIFdpbjogMjIKCQkJU3Bhd24gSGVhbHRoIFBhY2tzOiBEaXNhYmxlZAoJCX0KCX0KCgloZXJvZXMKCXsKCQlUZWFtIDEKCQl7CgkJCUJhcHRpc3RlCgkJCXsKCQkJCURhbWFnZSBEZWFsdDogMTQlCgkJCQlIZWFsdGg6IDEyNSUKCQkJCUltbW9ydGFsaXR5IEZpZWxkIENvb2xkb3duIFRpbWU6IDAlCgkJCQlQcm9qZWN0aWxlIEdyYXZpdHk6IDUwMCUKCQkJCVByb2plY3RpbGUgU3BlZWQ6IDAlCgkJCQlSZWdlbmVyYXRpdmUgQnVyc3QgQ29vbGRvd24gVGltZTogMCUKCQkJfQoKCQkJQmFzdGlvbgoJCQl7CgkJCQlEYW1hZ2UgRGVhbHQ6IDIwJQoJCQkJSGVhbHRoOiA1MDAlCgkJCQlJbmZpbml0ZSBVbHRpbWF0ZSBEdXJhdGlvbjogT24KCQkJfQoKCQkJQnJpZ2l0dGUKCQkJewoJCQkJQmFycmllciBTaGllbGQgQ29vbGRvd24gVGltZTogMCUKCQkJCUJhcnJpZXIgU2hpZWxkIFJlY2hhcmdlIFJhdGU6IDUwMCUKCQkJCURhbWFnZSBEZWFsdDogMjIlCgkJCQlIZWFsdGg6IDgwJQoJCQkJU2hpZWxkIEJhc2g6IE9mZgoJCQkJV2hpcCBTaG90IENvb2xkb3duIFRpbWU6IDAlCgkJCX0KCgkJCUVjaG8KCQkJewoJCQkJRGFtYWdlIERlYWx0OiAyMiUKCQkJCUZsaWdodCBDb29sZG93biBUaW1lOiAwJQoJCQkJRm9jdXNpbmcgQmVhbSBDb29sZG93biBUaW1lOiAwJQoJCQkJU3RpY2t5IEJvbWJzIENvb2xkb3duIFRpbWU6IDAlCgkJCX0KCgkJCUdlbmppCgkJCXsKCQkJCURhbWFnZSBEZWFsdDogMzAlCgkJCQlEZWZsZWN0IENvb2xkb3duIFRpbWU6IDAlCgkJCQlIZWFsdGg6IDUwMCUKCQkJCUluZmluaXRlIFVsdGltYXRlIER1cmF0aW9uOiBPbgoJCQkJU3dpZnQgU3RyaWtlIENvb2xkb3duIFRpbWU6IDAlCgkJCX0KCgkJCUhhbnpvCgkJCXsKCQkJCURhbWFnZSBEZWFsdDogMzAlCgkJCQlIZWFsdGg6IDUwMCUKCQkJCUx1bmdlIENvb2xkb3duIFRpbWU6IDAlCgkJCQlQcm9qZWN0aWxlIFNwZWVkOiAxNTAlCgkJCQlTdG9ybSBBcnJvd3MgQ29vbGRvd24gVGltZTogMCUKCQkJCVN0b3JtIEFycm93cyBRdWFudGl0eTogMTIKCQkJfQoKCQkJTWNDcmVlCgkJCXsKCQkJCUNvbWJhdCBSb2xsIENvb2xkb3duIFRpbWU6IDAlCgkJCQlEYW1hZ2UgRGVhbHQ6IDEyJQoJCQkJRmxhc2hiYW5nIENvb2xkb3duIFRpbWU6IDAlCgkJCQlIZWFsdGg6IDc1JQoJCQl9CgoJCQlPcmlzYQoJCQl7CgkJCQlEYW1hZ2UgRGVhbHQ6IDE2JQoJCQkJRGFtYWdlIFJlY2VpdmVkOiA1MCUKCQkJCUZvcnRpZnkgQ29vbGRvd24gVGltZTogMCUKCQkJCUhhbHQhIENvb2xkb3duIFRpbWU6IDAlCgkJCQlIZWFsaW5nIFJlY2VpdmVkOiA1MCUKCQkJCUhlYWx0aDogOTAlCgkJCX0KCgkJCVJlYXBlcgoJCQl7CgkJCQlEYW1hZ2UgRGVhbHQ6IDIyJQoJCQkJSGVhbHRoOiAxNDAlCgkJCQlXcmFpdGggRm9ybSBDb29sZG93biBUaW1lOiAwJQoJCQl9CgoJCQlSZWluaGFyZHQKCQkJewoJCQkJQmFycmllciBGaWVsZCBSZWNoYXJnZSBSYXRlOiAwJQoJCQkJQ2hhcmdlIENvb2xkb3duIFRpbWU6IDAlCgkJCQlEYW1hZ2UgRGVhbHQ6IDI3JQoJCQkJRGFtYWdlIFJlY2VpdmVkOiA0MCUKCQkJCUZpcmUgU3RyaWtlIENvb2xkb3duIFRpbWU6IDAlCgkJCQlIZWFsaW5nIFJlY2VpdmVkOiA0MCUKCQkJCUhlYWx0aDogMTUwJQoJCQkJUHJvamVjdGlsZSBTcGVlZDogMTUwJQoJCQl9CgoJCQlSb2FkaG9nCgkJCXsKCQkJCUNoYWluIEhvb2sgQ29vbGRvd24gVGltZTogMCUKCQkJCURhbWFnZSBEZWFsdDogMjYlCgkJCQlIZWFsdGg6IDc1JQoJCQl9CgoJCQlTaWdtYQoJCQl7CgkJCQlBY2NyZXRpb24gQ29vbGRvd24gVGltZTogMCUKCQkJCURhbWFnZSBEZWFsdDogMzIlCgkJCQlEYW1hZ2UgUmVjZWl2ZWQ6IDY1JQoJCQkJSGVhbGluZyBSZWNlaXZlZDogNjUlCgkJCQlIZWFsdGg6IDg1JQoJCQkJS2luZXRpYyBHcmFzcCBDb29sZG93biBUaW1lOiAwJQoJCQl9CgoJCQlTb2xkaWVyOiA3NgoJCQl7CgkJCQlEYW1hZ2UgRGVhbHQ6IDIwJQoJCQkJSGVhbHRoOiA3NSUKCQkJCUhlbGl4IFJvY2tldHMgQ29vbGRvd24gVGltZTogMCUKCQkJfQoKCQkJU29tYnJhCgkJCXsKCQkJCURhbWFnZSBEZWFsdDogMjAlCgkJCQlQcm9qZWN0aWxlIEdyYXZpdHk6IDAlCgkJCQlTdGVhbHRoIENvb2xkb3duIFRpbWU6IDAlCgkJCQlUcmFuc2xvY2F0b3IgQ29vbGRvd24gVGltZTogMCUKCQkJfQoKCQkJVHJhY2VyCgkJCXsKCQkJCUJsaW5rIENvb2xkb3duIFRpbWU6IDE1MCUKCQkJCURhbWFnZSBEZWFsdDogMTYlCgkJCQlIZWFsdGg6IDExMCUKCQkJCVByb2plY3RpbGUgR3Jhdml0eTogNTAwJQoJCQkJUHJvamVjdGlsZSBTcGVlZDogMCUKCQkJfQoKCQkJV2lkb3dtYWtlcgoJCQl7CgkJCQlEYW1hZ2UgRGVhbHQ6IDQwJQoJCQkJSGVhbHRoOiAxMTUlCgkJCQlWZW5vbSBNaW5lIENvb2xkb3duIFRpbWU6IDAlCgkJCX0KCgkJCVdyZWNraW5nIEJhbGwKCQkJewoJCQkJRGFtYWdlIERlYWx0OiAxNCUKCQkJCURhbWFnZSBSZWNlaXZlZDogNDUlCgkJCQlIZWFsdGg6IDUwMCUKCQkJCVJvbGwgQWx3YXlzIEFjdGl2ZTogT24KCQkJfQoJCX0KCgkJVGVhbSAyCgkJewoJCQlVbHRpbWF0ZSBHZW5lcmF0aW9uOiA3NSUKCQl9Cgl9Cn0KCnZhcmlhYmxlcwp7CglnbG9iYWw6CgkJMTogV2F2ZQoJCTI6IFNwYXduc19yZW1haW5pbmcKCQkzOiBCb3NzX1NwYXduc19yZW1haW5pbmcKCQk0OiBHYW1lbW9kZQoJCTU6IFVwZ3JhZGVfQ291bnRlcgoJCTY6IEhSX1dhdmVfU3RhcnQKCQk3OiBIUl9Ib3N0YWdlX0hlcm9fQXJyYXkKCQk4OiBJVl9PYmplY3RpdmVfUG9zaXRpb24KCQk5OiBJVl9IVlRfT2JqZWN0aXZlX1N0YXR1cwoJCTEwOiBJVl9IVlRfT2JqZWN0aXZlX1RpbWVyCgkJMTE6IElWX0hWVF9TcGF3bl9TbG90X1NpeAoJCTEyOiBJVl9IVlRfQm9zc19TcGF3bnNfYmxvY2tlZF91bnRpbAoJCTEzOiBJVl9IVlRfRGFtYWdlX01vZHMKCQkxNDogSFZUX1RpbWVzX1N1YmR1ZWQKCQkxNTogSFZUX0NhbGxfUmVpbmZvcmNlbWVudHMKCQkxNjogSXNfSW5mcmFzaWdodF9vbl9QbGF5ZXJzCgkJMTc6IElzX0luZnJhc2lnaHRfb25fQm90cwoJCTE4OiBDb21iYXRhbnRzCgkJMTk6IENvbWJhdGFudHNfQ291bnQKCQkyMDogUHJvZ3Jlc3NfQmFyCgkJMjE6IEdhbWVfU3RhcnRfSFVECgkJMjI6IE11dGF0b3JfU3RhcnRfSFVECgkJMjM6IFRlbXAKCQkyNDogUGxheWVyX1NwYXduCgkJMjU6IFBsYXllcl9TcGF3bl9GYWNpbmcKCQkyNjogQWJpbGl0eV9CdXlfTG9jYXRpb24KCQkyNzogQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkCgkJMjg6IEJ1eV9NZW51X0NhbV9Qb3MKCQkyOTogQnV5X01lbnVfUG9zCgkJMzA6IFNwYXducwoJCTMxOiBTcGF3bnNfTmVhcmVzdF9Ob2Rlc19ieV9JbmRleAoJCTMyOiBOb2RlcwoJCTMzOiBOb2Rlc19Db3VudAoJCTM0OiBFZGdlcwoJCTM1OiBEaXN0YW5jZV9NYXRyaXgKCQkzNjogRWxldmF0b3JfTm9kZXMKCQkzNzogQ2hhcl9BcnJheQoJCTM4OiBNYXhfU3BlZWRfQm9udXMKCQkzOTogT2JqZWN0aXZlX1NwYXducwoJCTQwOiBBaW1fT2Zmc2V0CgkJNDE6IENhbGxlZF9JbmNvbWluZwoJCTQyOiBNdXRhdG9yX0FjdGl2YXRpb25fbG9ja2VkCgkJNDM6IE11dGF0b3JzX2FjdGl2YXRlZAoJCTQ0OiBNb25leQoJCTQ1OiBDdXJyZW50X1BlcmtzCgkJNDY6IEN1cnJlbnRfUGVya3NfSFVEcwoJCTQ3OiBCYWRfTXV0YXRvcnMKCQk0ODogR011dF9TdG9ybV9SYWdpbmcKCQk0OTogR011dF9DbG9zZV9RdWFydGVycwoJCTUwOiBHTXV0X0tlZXBfeW91cl9EaXN0YW5jZQoJCTUxOiBHTXV0X0ZvcnRpZmllZAoJCTUyOiBNdXRfQW1wZWQKCQk1MzogTXV0X0V4dGVuZGVkX0Fyc2VuYWwKCQk1NDogTXV0X1RoZV9DYXZhbHJ5CgkJNTU6IE11dF9SZWdlbmVyYXRpb24KCQk1NjogTXV0X0NvbWJhdF9NZWRpYwoJCTU3OiBNdXRfRU1QX1JvdW5kcwoJCTU4OiBNdXRfRGVhdGhfR3VhcmQKCQk1OTogTXV0X0RlZXBfV291bmRzCgkJNjA6IE11dF9IdXJ0X01lX01vcmUKCQk2MTogTXV0X0xhc3RfU3RhbmQKCQk2MjogTXV0X0xhc3RfU3RhbmRfYWN0aXZlCgkJNjM6IE11dF9BZHZhbmNlZF9NZWRraXQKCQk2NDogTXV0X1JlaW5mb3JjZW1lbnRzCgkJNjU6IE11dF9NdXRhdGlvbgoJCTY2OiBNdXRfUHJvbW90aW9uCgoJcGxheWVyOgoJCTA6IEFiX1BsYXllcgoJCTE6IEFiX1Zhcl8xCgkJMjogQWJfVmFyXzIKCQkzOiBBYl9WYXJfMwoJCTQ6IExhc3RfRGFtYWdlX3Rha2VuCgkJNTogSXNfQ29tYmF0YW50CgkJNjogRG93bmVkX3NpbmNlCgkJNzogUmV2aXZlX1RpbWVyCgkJODogVGFzZWRfdW50aWwKCQk5OiBJc19mbHlpbmcKCQkxMDogSXNfaW52aXNpYmxlCgkJMTE6IFNwZWN0YXRlZF9QbGF5ZXIKCQkxMjogRGVhdGhfQ2FtX1RhcmdldAoJCTEzOiBJc19jaGFuZ2luZ19IZXJvZXMKCQkxNDogSW5fQnV5X01lbnVfU2luY2UKCQkxNTogTW9uZXlfc3BlbnQKCQkxNjogSXNfdXNpbmdfQ29tYmF0X1BhdGhmaW5kaW5nCgkJMTc6IE5hdgoJCTE4OiBOYXZfSW5kZXgKCQkxOTogTmF2X2lzX3JlYWNoYWJsZV9Ob2RlCgkJMjA6IExhc3RfTmF2X1VwZGF0ZQoJCTIxOiBMYXN0X1RpbWVfYXRfTm9kZQoJCTIyOiBQb3NfMQoJCTIzOiBQb3NfMgoJCTI0OiBMYXN0X0p1bXAKCQkyNTogUHJpbWFyeV9TcGVlZAoJCTI2OiBJc19XcmFpdGgKCQkyNzogSXNfUmFuZ2VkX0hlcm8KCQkyODogQWxsb3dfRmxpbmNoCgkJMjk6IENhbl9RdWlja19NZWxlZQoJCTMwOiBJc19UYXJnZXRfaW5fTE9TCgkJMzE6IFRhcmdldAoJCTMyOiBUYXJnZXRfTGFzdF9Qb3Nfc2VlbgoJCTMzOiBMZXZlbAoJCTM0OiBJc19MaXZpbmdfQm9zcwoJCTM1OiBIYXNfU3Bhd25fU3BlZWRfQm9udXMKCQkzNjogSXNfYXNzYXVsdGluZwoJCTM3OiBDYW5fcmVzcGF3bl9hZnRlcgoJCTM4OiBGZWFyZWRfdW50aWwKCQkzOTogSXNfbXV0YXRlZAoJCTQwOiBHTXV0X1ZhcgoJCTQxOiBMYXN0X0tub2NrYmFja19yZWNlaXZlZAoJCTQyOiBMYXN0X1RpbWVfaGl0X2J5X1NoYXR0ZXIKCQk0MzogQWJfU3RyaW5nCgkJNDQ6IEFiX0hlYWRodW50ZXIKCQk0NTogQWJfUXVpY2tfRml4CgkJNDY6IEN1cnJlbnRfUXVpY2tfRml4X1NwZWVkX0JvbnVzCgkJNDc6IEFiX0NoYXJnZWQKCQk0ODogQWJfSGVhdnlfSW1wYWN0CgkJNDk6IEFiX1NlY29uZF9XaW5kCgkJNTA6IEFiX0JpbmRpbmdfSGVhbAoJCTUxOiBBYl9SZXNpbGllbmNlCgkJNTI6IEFiX0FtYnVzaAoJCTUzOiBBYl9IYXN0ZQoJCTU0OiBBYl9Qcmlvcml0eQoJCTU1OiBBYl9IZWFsdGhfQm9udXMKCQk1NjogQWJfRGFtYWdlX0JvbnVzCgkJNTc6IEFiX0hlYWxpbmdfQm9udXMKCQk1ODogUGVya19TaG9ja3Byb29mCgkJNTk6IFBlcmtfQnVsbGV0c3Rvcm0KCQk2MDogUGVya19EaWVfSGFyZAoJCTYxOiBQZXJrX1B1bXBpbmdfSXJvbgoJCTYyOiBQZXJrX1RlcnJpZnkKCQk2MzogUGVya19SdW5uaW5nX1Jpb3QKCQk2NDogUGVya19VcF9Zb3VfR28KCQk2NTogUGVya19TdGFiaWxpemVyCgkJNjY6IFBlcmtfTmVtZXNpcwoJCTY3OiBOZW1lc2lzX0tpbGxlcgoJCTY4OiBQZXJrX015c3RlcnlfU3dhcAoJCTY5OiBQZXJrX0hlYXZ5X1dlaWdodAoJCTcwOiBQZXJrX1NoYXJwc2hvb3RlcgoJCTcxOiBIZWFsdGhfUGVyY2VudAoJCTcyOiBEYW1hZ2VfRGVhbHRfUGVyY2VudAoJCTczOiBIZWFsaW5nX0RlYWx0X1BlcmNlbnQKCQk3NDogTW92ZV9TcGVlZF9QZXJjZW50Cn0KCnN1YnJvdXRpbmVzCnsKCTA6IFVwZGF0ZV9Db21iYXRhbnRzCgkxOiBTY2FsZV9EYW1hZ2UKCTI6IERlY2xhcmVfVmljdG9yeQoJMzogVGVsZXBvcnRfdG9fZnJlZV9TcGF3bgoJNDogTldQX1RlbGVwb3J0Cgk1OiBGaW5kX0NoYXNlX1RhcmdldAoJNjogUm9hbQoJNzogRmluZF9OV1BfbmVhcl9OYXYKCTg6IElWX0RlZmVuZF9Qb3J0YWwKCTk6IFNldF9SYW5kb21fUGVya3MKCTEwOiBNVVRfQWRkX011dGF0b3IKCTExOiBMZWF2ZV9CdXlfTWVudQoJMTI6IEFmdGVyX0J1eWluZ19BYmlsaXR5CgkxMzogU2V0X01hcF9LUgoJMTQ6IFNldF9NYXBfQlcKCTE1OiBTZXRfTWFwX0VBCgkxNjogU2V0X01hcF9DRwoJMTc6IFNldF9NYXBfUEEKCTE4OiBTZXRfTWFwX0hXCgkxOTogU2V0X01hcF9LWgp9CgpydWxlKCJNYWRlIGJ5IFNoaW5nZW4jMjE4NTksIHlvdSBhcmUgYWxsb3dlZCB0byBlZGl0IG9yIHVzZSBteSBjb2RlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gR2xvYmFsOwoJfQoKCWFjdGlvbnMKCXsKCQlEaXNhYmxlIEluc3BlY3RvciBSZWNvcmRpbmc7Cgl9Cn0KCnJ1bGUoIkdsb2JhbCAoSW5pdCk6IFNldCBXb3Jrc2hvcCBWYXJzLCBHYW1lIFZhcnMsIERpc2FibGUgR2FtZSBDb21wb25lbnRzLCBDcmVhdGUgR2FtZSBFbnRpdGllcyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEdsb2JhbDsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLkdhbWVtb2RlID0gRW1wdHkgQXJyYXk7CgkJSWYoV29ya3Nob3AgU2V0dGluZyBUb2dnbGUoQ3VzdG9tIFN0cmluZygiRW5hYmxlZCBHYW1lIE1vZGVzIiksIEN1c3RvbSBTdHJpbmcoIkhlcm8gUmVzY3VlIiksIFRydWUsIDApKTsKCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShHYW1lbW9kZSwgQXBwZW5kIFRvIEFycmF5LCAwKTsKCQlFbmQ7CgkJSWYoV29ya3Nob3AgU2V0dGluZyBUb2dnbGUoQ3VzdG9tIFN0cmluZygiRW5hYmxlZCBHYW1lIE1vZGVzIiksIEN1c3RvbSBTdHJpbmcoIkludmFzaW9uIiksIFRydWUsIDEpKTsKCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShHYW1lbW9kZSwgQXBwZW5kIFRvIEFycmF5LCAxKTsKCQlFbmQ7CgkJSWYoV29ya3Nob3AgU2V0dGluZyBUb2dnbGUoQ3VzdG9tIFN0cmluZygiRW5hYmxlZCBHYW1lIE1vZGVzIiksIEN1c3RvbSBTdHJpbmcoIkhpZ2ggVmFsdWUgVGFyZ2V0IiksIFRydWUsIDIpKTsKCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShHYW1lbW9kZSwgQXBwZW5kIFRvIEFycmF5LCAyKTsKCQlFbmQ7CgkJSWYoR2xvYmFsLkdhbWVtb2RlID09IEVtcHR5IEFycmF5KTsKCQkJR2xvYmFsLkdhbWVtb2RlID0gUmFuZG9tIEludGVnZXIoMCwgMik7CgkJRWxzZTsKCQkJR2xvYmFsLkdhbWVtb2RlID0gUmFuZG9tIFZhbHVlIEluIEFycmF5KEdsb2JhbC5HYW1lbW9kZSk7CgkJRW5kOwoJCURpc2FibGUgQnVpbHQtSW4gR2FtZSBNb2RlIENvbXBsZXRpb247CgkJRGlzYWJsZSBCdWlsdC1JbiBHYW1lIE1vZGUgU2NvcmluZzsKCQlEaXNhYmxlIEJ1aWx0LUluIEdhbWUgTW9kZSBNdXNpYzsKCQlEaXNhYmxlIEJ1aWx0LUluIEdhbWUgTW9kZSBBbm5vdW5jZXI7CgkJR2xvYmFsLlByb2dyZXNzX0JhciA9IEFycmF5KEN1c3RvbSBTdHJpbmcoIuKWoeKWoeKWoeKWoeKWoSIpLCBDdXN0b20gU3RyaW5nKCLilqPilqHilqHilqHilqEiKSwgQ3VzdG9tIFN0cmluZygi4pag4pah4pah4pah4pahIiksIEN1c3RvbSBTdHJpbmcoIuKWoOKWo+KWoeKWoeKWoSIpLAoJCQlDdXN0b20gU3RyaW5nKCLilqDilqDilqHilqHilqEiKSwgQ3VzdG9tIFN0cmluZygi4pag4pag4paj4pah4pahIiksIEN1c3RvbSBTdHJpbmcoIuKWoOKWoOKWoOKWoeKWoSIpLCBDdXN0b20gU3RyaW5nKCLilqDilqDilqDilqPilqEiKSwgQ3VzdG9tIFN0cmluZygi4pag4pag4pag4pag4pahIiksCgkJCUN1c3RvbSBTdHJpbmcoIuKWoOKWoOKWoOKWoOKWoyIpLCBDdXN0b20gU3RyaW5nKCLilqDilqDilqDilqDilqAiKSk7CgkJR2xvYmFsLkNoYXJfQXJyYXkgPSBBcnJheShDdXN0b20gU3RyaW5nKCIwIiksIEN1c3RvbSBTdHJpbmcoIjEiKSwgQ3VzdG9tIFN0cmluZygiMiIpLCBDdXN0b20gU3RyaW5nKCIzIiksIEN1c3RvbSBTdHJpbmcoIjQiKSwKCQkJQ3VzdG9tIFN0cmluZygiNSIpLCBDdXN0b20gU3RyaW5nKCI2IiksIEN1c3RvbSBTdHJpbmcoIjciKSwgQ3VzdG9tIFN0cmluZygiOCIpLCBDdXN0b20gU3RyaW5nKCI5IiksIEN1c3RvbSBTdHJpbmcoIiEiKSwKCQkJQ3VzdG9tIFN0cmluZygiPyIpLCBDdXN0b20gU3RyaW5nKCIjIiksIEN1c3RvbSBTdHJpbmcoIiQiKSwgQ3VzdG9tIFN0cmluZygiJSIpKTsKCQlTZXQgVGVhbSBTY29yZShUZWFtIDEsIDIyKTsKCQlHbG9iYWwuQWltX09mZnNldCA9IDAuNTAwICogRG93bjsKCQlHbG9iYWwuQmFkX011dGF0b3JzWzE1XSA9IDA7CgkJR2xvYmFsLkJhZF9NdXRhdG9ycyA9IE1hcHBlZCBBcnJheShHbG9iYWwuQmFkX011dGF0b3JzLCBDdXJyZW50IEFycmF5IEluZGV4KTsKCQkiSW5pdGlhbGl6ZSBNYXAgU3BlY2lmaWMgVmFyaWFibGVzIgoJCUlmKEN1cnJlbnQgTWFwID09IE1hcChLaW5nJ3MgUm93KSB8fCBDdXJyZW50IE1hcCA9PSBNYXAoS2luZydzIFJvdyBXaW50ZXIpKTsKCQkJQ2FsbCBTdWJyb3V0aW5lKFNldF9NYXBfS1IpOwoJCUVsc2UgSWYoQ3VycmVudCBNYXAgPT0gTWFwKEJsaXp6YXJkIFdvcmxkKSB8fCBDdXJyZW50IE1hcCA9PSBNYXAoQmxpenphcmQgV29ybGQgV2ludGVyKSk7CgkJCUNhbGwgU3Vicm91dGluZShTZXRfTWFwX0JXKTsKCQlFbHNlIElmKEN1cnJlbnQgTWFwID09IE1hcChFY29wb2ludDogQW50YXJjdGljYSkgfHwgQ3VycmVudCBNYXAgPT0gTWFwKEVjb3BvaW50OiBBbnRhcmN0aWNhIFdpbnRlcikpOwoJCQlDYWxsIFN1YnJvdXRpbmUoU2V0X01hcF9FQSk7CgkJRWxzZSBJZihDdXJyZW50IE1hcCA9PSBNYXAoQ2jDonRlYXUgR3VpbGxhcmQpIHx8IEN1cnJlbnQgTWFwID09IE1hcChDaMOidGVhdSBHdWlsbGFyZCBIYWxsb3dlZW4pKTsKCQkJQ2FsbCBTdWJyb3V0aW5lKFNldF9NYXBfQ0cpOwoJCUVsc2UgSWYoQ3VycmVudCBNYXAgPT0gTWFwKFBhcmlzKSk7CgkJCUNhbGwgU3Vicm91dGluZShTZXRfTWFwX1BBKTsKCQlFbHNlIElmKEN1cnJlbnQgTWFwID09IE1hcChIb2xseXdvb2QpIHx8IEN1cnJlbnQgTWFwID09IE1hcChIb2xseXdvb2QgSGFsbG93ZWVuKSk7CgkJCUNhbGwgU3Vicm91dGluZShTZXRfTWFwX0hXKTsKCQlFbHNlIElmKEN1cnJlbnQgTWFwID09IE1hcChLYW5lemFrYSkpOwoJCQlDYWxsIFN1YnJvdXRpbmUoU2V0X01hcF9LWik7CgkJRWxzZTsKCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoCgkJCQkiIFxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG7igIHigIHigIHigIHigIFUaGlzIE1hcCBpcyBub3Qgc3VwcG9ydGVkISBSZXN0YXJ0IGFuZCBjaG9vc2UgYSB2YWxpZCBtYXAu4oCB4oCB4oCB4oCB4oCBXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIpLAoJCQkJTnVsbCwgTnVsbCwgVG9wLCAtMTAwMCwgQ29sb3IoWWVsbG93KSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJRW5kOwoJCSJDcmVhdGUgSFVEcyBhbmQgRWZmZWN0cyIKCQlDcmVhdGUgSFVEIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsIERpc3RhbmNlIEJldHdlZW4oQ3VycmVudCBBcnJheSBFbGVtZW50LCBHbG9iYWwuQWJpbGl0eV9CdXlfTG9jYXRpb24pID4gMiksCgkJCUN1c3RvbSBTdHJpbmcoIiBcbnswfVxuXG7igIFQcmVzcyB7MX0gdG8gU3RhcnTigIFcbiIsIEFycmF5KEN1c3RvbSBTdHJpbmcoIuKAgeKAgUhlcm8gUmVzY3VlIiksIEN1c3RvbSBTdHJpbmcoIuKAgeKAgeKAgUludmFzaW9uIiksCgkJCUN1c3RvbSBTdHJpbmcoIiAgSGlnaCBWYWx1ZSBUYXJnZXQiKSlbR2xvYmFsLkdhbWVtb2RlXSwgSW5wdXQgQmluZGluZyBTdHJpbmcoQnV0dG9uKEludGVyYWN0KSkpLCBOdWxsLCBOdWxsLCBUb3AsCgkJCUdsb2JhbC5HYW1lbW9kZSA/IC05MCA6IDEwLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJR2xvYmFsLkdhbWVfU3RhcnRfSFVEID0gTGFzdCBUZXh0IElEOwoJCUNyZWF0ZSBIVUQgVGV4dChHbG9iYWwuV2F2ZSA/IEhvc3QgUGxheWVyIDogRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsIERpc3RhbmNlIEJldHdlZW4oQ3VycmVudCBBcnJheSBFbGVtZW50LAoJCQlHbG9iYWwuQWJpbGl0eV9CdXlfTG9jYXRpb24pID4gMiksIE51bGwsIE51bGwsIEdsb2JhbC5XYXZlID8gQ3VzdG9tIFN0cmluZygKCQkJIkhvbGQgezB9IGZvciAyIHNlY29uZHMgdG8gYWN0aXZhdGUgTXV0YXRvcnMgKGZvciBleHBlcmllbmNlZCBwbGF5ZXJzKSIsIElucHV0IEJpbmRpbmcgU3RyaW5nKEJ1dHRvbihJbnRlcmFjdCkpKQoJCQk6IEN1c3RvbSBTdHJpbmcoIkNoYW5nZSB0aGUgT2JqZWN0aXZlIGluIHRoZSBXb3Jrc2hvcCBTZXR0aW5ncyIpLCBUb3AsIEdsb2JhbC5HYW1lbW9kZSA/IC04OSA6IDExLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwKCQkJQ29sb3IoR3JlZW4pLCBWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJR2xvYmFsLk11dGF0b3JfU3RhcnRfSFVEID0gTGFzdCBUZXh0IElEOwoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAwKTsKCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoIkVuZW15IFNwYXducyBSZW1haW5pbmc6IHswfSIsIEdsb2JhbC5TcGF3bnNfcmVtYWluaW5nKSwgUmlnaHQsCgkJCQktMTAsIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIFZpc2libGUgVG8gYW5kIFN0cmluZywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJR2xvYmFsLkhSX0hvc3RhZ2VfSGVyb19BcnJheSA9IEFycmF5KEhlcm8oQW5hKSwgSGVybyhBc2hlKSwgSGVybyhHZW5qaSksIEhlcm8oTWNDcmVlKSwgSGVybyhUcmFjZXIpLCBIZXJvKFdpZG93bWFrZXIpLCBIZXJvKAoJCQkJWmVueWF0dGEpLCBIZXJvKFNvbGRpZXI6IDc2KSwgSGVybyhMw7pjaW8pLCBIZXJvKFBoYXJhaCksIEhlcm8oTW9pcmEpLCBIZXJvKFphcnlhKSwgSGVybyhKdW5rcmF0KSwgSGVybyhIYW56byksIEhlcm8oRG9vbWZpc3QpLAoJCQkJSGVybyhNZXJjeSksIEhlcm8oU29tYnJhKSwgSGVybyhXaW5zdG9uKSwgSGVybyhFY2hvKSwgSGVybyhUb3JiasO2cm4pLCBIZXJvKEJyaWdpdHRlKSwgSGVybyhNZWkpLCBIZXJvKFNpZ21hKSwgSGVybyhSZWFwZXIpLAoJCQkJSGVybyhSb2FkaG9nKSwgSGVybyhPcmlzYSksIEhlcm8oRC5WYSksIEhlcm8oV3JlY2tpbmcgQmFsbCksIEhlcm8oQmFwdGlzdGUpLCBIZXJvKFN5bW1ldHJhKSwgSGVybyhSZWluaGFyZHQpLCBIZXJvKEJhc3Rpb24pKTsKCQlFbHNlOwoJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygKCQkJCSJI4oCLZeKAi2HigIt04oCLIOKAi1PigIt04oCLcuKAi2XigItl4oCLdOKAizrigIsg4oCLU+KAi3XigIty4oCLduKAi2nigIt24oCLYeKAi2zigIsg4oCLMi41LjHigIsg4oCLKOKAi0PigItS4oCLNuKAizfigItG4oCLKeKAiyDigIst4oCLIOKAi3swfXsxfSIsIEdsb2JhbC5HYW1lbW9kZSA9PSAxID8gQ3VzdG9tIFN0cmluZygKCQkJCSJD4oCLbOKAi2/igItz4oCLZeKAiyDigIt04oCLaOKAi2XigIsg4oCLUOKAi2/igIty4oCLdOKAi2HigIts4oCLcyIpIDogQ3VzdG9tIFN0cmluZygiQ2FwdHVyZSB0aGUgSFZUcyIpLCBNYXRjaCBUaW1lID8gQ3VzdG9tIFN0cmluZygiICAgICAgezB9ezF9ezJ9IiwKCQkJCU1hdGNoIFRpbWUgPiAxMCA/IEN1c3RvbSBTdHJpbmcoIjA6IikgOiBTdHJpbmcoIiIpLCBSb3VuZCBUbyBJbnRlZ2VyKFJvdW5kIFRvIEludGVnZXIoMTAgKiBNYXRjaCBUaW1lLCBVcCkgLyAxMCwgRG93biksCgkJCQlNYXRjaCBUaW1lID4gMTAgPyBTdHJpbmcoIiIpIDogQ3VzdG9tIFN0cmluZygiLnswfSIsIFJvdW5kIFRvIEludGVnZXIoMTAgKiBNYXRjaCBUaW1lLCBVcCkgJSAxMCkpIDogU3RyaW5nKCIiKSksIFRvcCwgLTEwMCwKCQkJCUNvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIFZpc2libGUgVG8gYW5kIFN0cmluZywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoIldhdmUgezB9LzE1IiwgR2xvYmFsLldhdmUpLCBOdWxsLCBOdWxsLCBUb3AsIC05OSwgQ29sb3IoV2hpdGUpLCBDb2xvcigKCQkJCVdoaXRlKSwgQ29sb3IoV2hpdGUpLCBWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCUNyZWF0ZSBIVUQgVGV4dChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBOdWxsLAoJCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgfHwgR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIgPyBDdXN0b20gU3RyaW5nKCIgIikgOiBDdXN0b20gU3RyaW5nKCIgXG5cblxuIiksCgkJCQlOdWxsLCBUb3AsIC05OCwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwgVmlzaWJsZSBUbyBhbmQgU3RyaW5nLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygKCQkJCSIgXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iKSwKCQkJCVRvcCwgLTEsIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJRW5kOwoJCUNyZWF0ZSBIVUQgVGV4dChBbGwgUGxheWVycyhUZWFtIDIpLCBOdWxsLCBOdWxsLCBDdXN0b20gU3RyaW5nKCJBdm9pZCBkYW1hZ2UgZm9yIHswfSBzZWNvbmRzIHRvIHJlZ2VuZXJhdGUiLAoJCQlHbG9iYWwuTXV0X0RlZXBfV291bmRzID8gNSA6IEN1c3RvbSBTdHJpbmcoIjIuNSIpKSwgTGVmdCwgLTEwLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwgQ29sb3IoU2t5IEJsdWUpLAoJCQlWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEhVRCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLCAhQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSAmJiAoCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jc19jaGFuZ2luZ19IZXJvZXMgfHwgKE1hdGNoIFRpbWUgPiAwICYmIERpc3RhbmNlIEJldHdlZW4oQ3VycmVudCBBcnJheSBFbGVtZW50LAoJCQlHbG9iYWwuQWJpbGl0eV9CdXlfTG9jYXRpb24pID4gMikpKSwgQ3VzdG9tIFN0cmluZygKCQkJIiBcblxuXG7igIHigIHigIEgIFlvdSBjYW4gY2hhbmdlIEhlcm9lcyBub3dcblxu4oCB4oCB4oCB4oCB4oCB4oCB4oCB4oCBICAgSG9sZCB7MH0sXG7igIFUaGVuIHByZXNzIEggdG8gb3BlbiB0aGUgSGVybyBtZW514oCBXG4iLCBJbnB1dCBCaW5kaW5nIFN0cmluZygKCQkJQnV0dG9uKEludGVyYWN0KSkpLCBOdWxsLCBOdWxsLCBUb3AsIEdsb2JhbC5HYW1lbW9kZSA/IC05MCA6IDEwLCBDb2xvcihZZWxsb3cpLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwKCQkJVmlzaWJsZSBUbyBhbmQgU3RyaW5nLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBIVUQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywgQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoCgkJCSJXYWl0aW5nIGZvciByZXZpdmFsLiBQcmVzcyB7MH0gdG8gc3BlY3RhdGUgdGhlIG5leHQgcGxheWVyLiIsIElucHV0IEJpbmRpbmcgU3RyaW5nKEJ1dHRvbihKdW1wKSkpLCBUb3AsCgkJCUdsb2JhbC5HYW1lbW9kZSA/IC03MCA6IDMwLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwgQ29sb3IoWWVsbG93KSwgVmlzaWJsZSBUbyBhbmQgU3RyaW5nLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBIVUQgVGV4dChHbG9iYWwuSXNfSW5mcmFzaWdodF9vbl9Cb3RzID8gQWxsIFBsYXllcnMoQWxsIFRlYW1zKSA6IEVtcHR5IEFycmF5LCBDdXN0b20gU3RyaW5nKCJFbmVtaWVzIGhhdmUgaW1wcm92ZWQgYWltISIpLAoJCQlOdWxsLCBOdWxsLCBUb3AsIEdsb2JhbC5HYW1lbW9kZSA/IC01MCA6IDUwLCBDb2xvcihZZWxsb3cpLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoVGVhbSAxKSwgQ3VzdG9tIFN0cmluZygiU2VydmVyIExvYWQ6IHswfSwgQXZlcmFnZTogezF9LCBQZWFrOiB7Mn0iLCBTZXJ2ZXIgTG9hZCwgU2VydmVyIExvYWQgQXZlcmFnZSwKCQkJU2VydmVyIExvYWQgUGVhayksIE51bGwsIE51bGwsIExlZnQsIC0xMTAsIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIFZpc2libGUgVG8gYW5kIFN0cmluZywKCQkJRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSFVEIFRleHQoRW1wdHkgQXJyYXksIE51bGwsIEN1c3RvbSBTdHJpbmcoIk3igIth4oCLZOKAi2XigIsg4oCLYuKAi3nigIsg4oCLU+KAi2jigItp4oCLbuKAi2figItl4oCLbiIpLCBDdXN0b20gU3RyaW5nKAoJCQkid+KAi2/igIty4oCLa+KAi3PigIto4oCLb+KAi3DigIsu4oCLY+KAi2/igItk4oCLZeKAi3PigIsv4oCLaOKAi2XigIth4oCLdOKAiy3igItz4oCLdOKAi3LigItl4oCLZeKAi3TigItcbiIpLCBMZWZ0LCAtMTAwMCwgQ29sb3IoV2hpdGUpLCBDb2xvcihHcmVlbiksIENvbG9yKEdyZWVuKSwgVmlzaWJsZSBUbywKCQkJVmlzaWJsZSBBbHdheXMpOwoJCSJUYXNlIEVmZmVjdHMiCgkJQ3JlYXRlIEVmZmVjdChGaXJzdCBPZihQbGF5ZXJzIE9uIEhlcm8oSGVybyhTb21icmEpLCBUZWFtIDEpKS5BYl9QbGF5ZXIgIT0gMCA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwgRW5lcmd5IFNvdW5kLAoJCQlDb2xvcihXaGl0ZSksIEZpcnN0IE9mKFBsYXllcnMgT24gSGVybyhIZXJvKFNvbWJyYSksIFRlYW0gMSkpLkFiX1BsYXllciwgMjAwLCBWaXNpYmxlIFRvIFBvc2l0aW9uIGFuZCBSYWRpdXMpOwoJCUNyZWF0ZSBCZWFtIEVmZmVjdChGaXJzdCBPZihQbGF5ZXJzIE9uIEhlcm8oSGVybyhTb21icmEpLCBUZWFtIDEpKS5BYl9QbGF5ZXIgIT0gMCA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwgQmFkIEJlYW0sCgkJCUZpcnN0IE9mKFBsYXllcnMgT24gSGVybyhIZXJvKFNvbWJyYSksIFRlYW0gMSkpLCBGaXJzdCBPZihQbGF5ZXJzIE9uIEhlcm8oSGVybyhTb21icmEpLCBUZWFtIDEpKS5BYl9QbGF5ZXIsIENvbG9yKFJlZCksCgkJCVZpc2libGUgVG8gUG9zaXRpb24gYW5kIFJhZGl1cyk7CgkJQ3JlYXRlIEVmZmVjdChGaXJzdCBPZihQbGF5ZXJzIE9uIEhlcm8oSGVybyhTb21icmEpLCBUZWFtIDEpKS5BYl9QbGF5ZXIgIT0gMCA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwgUmluZywgQ29sb3IoCgkJCVNreSBCbHVlKSwgRmlyc3QgT2YoUGxheWVycyBPbiBIZXJvKEhlcm8oU29tYnJhKSwgVGVhbSAxKSksIDMgKiBUb3RhbCBUaW1lIEVsYXBzZWQgJSAwLjc1MCwgVmlzaWJsZSBUbyBQb3NpdGlvbiBhbmQgUmFkaXVzKTsKCQkiQ3JlYXRlIEFiaWxpdHkgTW9kaWZpY2F0aW9ucyBhbmQgQnV5IE1lbnUiCgkJR2xvYmFsLk1vbmV5ID0gMTAwMDsKCQlDYWxsIFN1YnJvdXRpbmUoU2V0X1JhbmRvbV9QZXJrcyk7CgkJIk5vIEFiaWxpdGllczogQm90cyB0byBQbGF5ZXJzIERhbWFnZSBEZWNyZWFzZSIKCQlTdGFydCBEYW1hZ2UgTW9kaWZpY2F0aW9uKEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLCAhQ3VycmVudCBBcnJheSBFbGVtZW50Lk1vbmV5X3NwZW50KSwgQWxsIFBsYXllcnMoVGVhbSAxKSwgTWF4KDcwLAoJCQkxMDAgLyAoMSArIEdsb2JhbC5Nb25leSAvIDcwMDAgKiAwLjQwMCkpLCBSZWNlaXZlcnMgRGFtYWdlcnMgYW5kIERhbWFnZSBQZXJjZW50KTsKCQkiUHJpb3JpdHkgQTogUGxheWVycyB0byBCb3RzIERhbWFnZSBJbmNyZWFzZSIKCQlTdGFydCBEYW1hZ2UgTW9kaWZpY2F0aW9uKEZpbHRlcmVkIEFycmF5KEFsbCBQbGF5ZXJzKFRlYW0gMSksCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jc19UYXJnZXRfaW5fTE9TICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5UYXJnZXQuQWJfUHJpb3JpdHkgPT0gMSksIEdsb2JhbC5Db21iYXRhbnRzLCAxMTUsCgkJCVJlY2VpdmVycyBhbmQgRGFtYWdlcnMpOwoJCSJQcmlvcml0eSBBOiBCb3RzIHRvIFBsYXllcnMgRGFtYWdlIERlY3JlYXNlIgoJCVN0YXJ0IERhbWFnZSBNb2RpZmljYXRpb24oR2xvYmFsLkNvbWJhdGFudHMsIEZpbHRlcmVkIEFycmF5KEFsbCBQbGF5ZXJzKFRlYW0gMSksCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jc19UYXJnZXRfaW5fTE9TICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5UYXJnZXQuQWJfUHJpb3JpdHkgPT0gMSksIDg1LCBSZWNlaXZlcnMgYW5kIERhbWFnZXJzKTsKCQkiU3RhYmlsaXplcjogUGxheWVycyB0byBQbGF5ZXJzIEhlYWxpbmcgSW5jcmVhc2UiCgkJU3RhcnQgSGVhbGluZyBNb2RpZmljYXRpb24oRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsIE5vcm1hbGl6ZWQgSGVhbHRoKEN1cnJlbnQgQXJyYXkgRWxlbWVudCkgPD0gMC41MDApLCBGaWx0ZXJlZCBBcnJheSgKCQkJR2xvYmFsLkNvbWJhdGFudHMsIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5QZXJrX1N0YWJpbGl6ZXIpLCAxMzAsIFJlY2VpdmVycyBhbmQgSGVhbGVycyk7CgkJQ3JlYXRlIEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBSaW5nLCBDb2xvcihHcmVlbiksIEdsb2JhbC5BYmlsaXR5X0J1eV9Mb2NhdGlvbiwgMiwgVmlzaWJsZSBUbyk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgIUdsb2JhbC5XYXZlIHx8IE1hdGNoIFRpbWUgPyBDdXN0b20gU3RyaW5nKCJbezB9XSBUZWxlcG9ydCBIZXJlXG7igIEgQnV5IEFiaWxpdGllc+KAgSAiLAoJCQlJbnB1dCBCaW5kaW5nIFN0cmluZyhCdXR0b24oUmVsb2FkKSkpIDogQ3VzdG9tIFN0cmluZygiIFxu4oCBIEJ1eSBBYmlsaXRpZXPigIEgIiksIEdsb2JhbC5BYmlsaXR5X0J1eV9Mb2NhdGlvbiwgMS41MDAsIERvIE5vdCBDbGlwLAoJCQlWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIENvbG9yKEdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSFVEIFRleHQoRmlsdGVyZWQgQXJyYXkoUGxheWVycyBXaXRoaW4gUmFkaXVzKEdsb2JhbC5BYmlsaXR5X0J1eV9Mb2NhdGlvbiwgMiwgVGVhbSAyLCBPZmYpLAoJCQkhQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSAmJiAhQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlKSwgQ3VzdG9tIFN0cmluZygKCQkJIiBcbuKAgVByZXNzIHswfSB0byBvcGVuIHRoZSBCdXkgTWVudeKAgVxuIiwgSW5wdXQgQmluZGluZyBTdHJpbmcoQnV0dG9uKEludGVyYWN0KSkpLCBOdWxsLCBOdWxsLCBUb3AsIEdsb2JhbC5HYW1lbW9kZSA/IC04MCA6IDIwLAoJCQlDb2xvcihHcmVlbiksIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJIkNyZWF0ZSBCdXkgTWVudSBJV1RzLCBvbiBzY2FsZSAyLjUgMSBzcGFjZSBpcyA4LjUgcGl4ZWxzIgoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLCBDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UpLCBDdXN0b20gU3RyaW5nKAoJCQki4pSDXG7ilINcbuKUg1xu4pSDXG7ilINcbuKUg1xu4pSDXG7ilINcbuKUgyIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gMjEgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgOTAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwgRG8gTm90IENsaXAsCgkJCVZpc2libGUgVG8sIENvbG9yKFdoaXRlKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywgQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlKSwgQ3VzdG9tIFN0cmluZygKCQkJIuKUg1xu4pSDXG7ilINcbuKUg1xu4pSDXG7ilINcbuKUg1xu4pSDXG7ilIMiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIDIxICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDkwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLAoJCQlWaXNpYmxlIFRvLCBDb2xvcihXaGl0ZSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSksIEN1c3RvbSBTdHJpbmcoIlJlZnVuZCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zICsgNDUgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgOTAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAzLCBEbyBOb3QgQ2xpcCwKCQkJVmlzaWJsZSBUbywgQ29sb3IoR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLCBDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UpLCBDdXN0b20gU3RyaW5nKCJbezB9XSBMZWF2ZSIsCgkJCUlucHV0IEJpbmRpbmcgU3RyaW5nKEJ1dHRvbihJbnRlcmFjdCkpKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyArIDQ1ICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDkwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMywgRG8gTm90IENsaXAsCgkJCVZpc2libGUgVG8gYW5kIFN0cmluZywgQ29sb3IoR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgIUN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9Qcmlvcml0eSksIEN1c3RvbSBTdHJpbmcoIlByaW9yaXR5IEFcbuKAgTEyMDAkIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgKyAyMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiAhQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX1ByaW9yaXR5KSwgQ3VzdG9tIFN0cmluZygiUHJpb3JpdHkgQlxu4oCBMTIwMCQiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIDIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIDExMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwKCQkJRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKEdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmICFDdXJyZW50IEFycmF5IEVsZW1lbnQuQWJfUHJpb3JpdHkpLCBDdXN0b20gU3RyaW5nKCJQcmlvcml0eSBDXG7igIExMjAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gMjUgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLAoJCQlEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX1ByaW9yaXR5KSwgQ3VzdG9tIFN0cmluZygiUHJpb3JpdHkgQVxu4oCBICBGcmVlIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgKyAyMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihZZWxsb3cpLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX1ByaW9yaXR5KSwgQ3VzdG9tIFN0cmluZygiUHJpb3JpdHkgQlxu4oCBICBGcmVlIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihZZWxsb3cpLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX1ByaW9yaXR5KSwgQ3VzdG9tIFN0cmluZygiUHJpb3JpdHkgQ1xu4oCBICBGcmVlIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAyNSAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihZZWxsb3cpLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX0hlYWRodW50ZXIgPCAyKSwgQ3VzdG9tIFN0cmluZygiSGVhZGh1bnRlclxu4oCBICAgODAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zICsgMjAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgNjcuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuQWJfSGVhZGh1bnRlciA+PSAyKSwgQ3VzdG9tIFN0cmluZygiSGVhZGh1bnRlclxu4oCBICAgODAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zICsgMjAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgNjcuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmF5KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9BbWJ1c2ggPCAyKSwgQ3VzdG9tIFN0cmluZygiQW1idXNoXG4gICA4MDAkIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyA2Ny41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwKCQkJRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKEdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9BbWJ1c2ggPj0gMiksIEN1c3RvbSBTdHJpbmcoIkFtYnVzaFxuICAgODAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgNjcuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmF5KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9RdWlja19GaXggPCAyKSwgQ3VzdG9tIFN0cmluZygiUXVpY2sgRml4XG7igIE3MDAkIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAyNSAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyA2Ny41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwKCQkJRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKEdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9RdWlja19GaXggPj0gMiksIEN1c3RvbSBTdHJpbmcoIlF1aWNrIEZpeFxu4oCBNzAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gMjUgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgNjcuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmF5KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9DaGFyZ2VkIDwgMiksIEN1c3RvbSBTdHJpbmcoIkNoYXJnZWRcbuKAgTcwMCQiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyArIDIwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIDIyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLAoJCQlEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX0NoYXJnZWQgPj0gMiksIEN1c3RvbSBTdHJpbmcoIkNoYXJnZWRcbuKAgTcwMCQiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyArIDIwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIDIyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLAoJCQlEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuQWJfSGFzdGUgPCAyKSwgQ3VzdG9tIFN0cmluZygiSGFzdGVcbiA3MDAkIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyAyMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwKCQkJRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKEdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9IYXN0ZSA+PSAyKSwgQ3VzdG9tIFN0cmluZygiSGFzdGVcbiA3MDAkIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyAyMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwKCQkJRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKEdyYXkpLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX0hlYXZ5X0ltcGFjdCA8IDIpLCBDdXN0b20gU3RyaW5nKAoJCQkiSGVhdnkgSW1wYWN0XG7igIEgICAxMDAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gMjUgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgMjIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuQWJfSGVhdnlfSW1wYWN0ID49IDIpLCBDdXN0b20gU3RyaW5nKAoJCQkiSGVhdnkgSW1wYWN0XG7igIEgICAxMDAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gMjUgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgMjIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmF5KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9SZXNpbGllbmNlIDwgMiksIEN1c3RvbSBTdHJpbmcoIlJlc2lsaWVuY2VcbuKAgTgwMCQiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyArIDIwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDIyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLAoJCQlEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX1Jlc2lsaWVuY2UgPj0gMiksIEN1c3RvbSBTdHJpbmcoIlJlc2lsaWVuY2VcbuKAgTgwMCQiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyArIDIwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDIyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLAoJCQlEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuQWJfQmluZGluZ19IZWFsIDwgMiksIEN1c3RvbSBTdHJpbmcoIkJpbmRpbmcgSGVhbFxu4oCB4oCBNzAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMjIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuQWJfQmluZGluZ19IZWFsID49IDIpLCBDdXN0b20gU3RyaW5nKCJCaW5kaW5nIEhlYWxcbuKAgeKAgTcwMCQiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIDIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDIyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLAoJCQlEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuQWJfU2Vjb25kX1dpbmQgPCAyKSwgQ3VzdG9tIFN0cmluZygiU2Vjb25kIFdpbmRcbuKAgeKAgTkwMCQiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIDI1ICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDIyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLAoJCQlEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX1NlY29uZF9XaW5kID49IDIpLCBDdXN0b20gU3RyaW5nKCJTZWNvbmQgV2luZFxu4oCB4oCBOTAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gMjUgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMjIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmF5KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywgQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlKSwgQ3VzdG9tIFN0cmluZygKCQkJIis1JSBIZWFsdGhcbuKAgSAgNDAwJCIpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zICsgMjAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gNjcuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSksIEN1c3RvbSBTdHJpbmcoCgkJCSIrNSUgRGFtYWdlXG7igIHigIE0MDAkIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSA2Ny41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwKCQkJRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKEdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywgQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlKSwgQ3VzdG9tIFN0cmluZygKCQkJIis1JSBIZWFsaW5nXG7igIHigIE0MDAkIiksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAyNSAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSA2Ny41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwKCQkJRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKEdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywgQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlKSwgQ3VzdG9tIFN0cmluZygiTGltaXRlZCBvZmZlciEiKSwKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyArIDIyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsCgkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcihXaGl0ZSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuTGFzdF9EYW1hZ2VfdGFrZW4gKyAyID49IFRvdGFsIFRpbWUgRWxhcHNlZCksIEN1c3RvbSBTdHJpbmcoCgkJCSJZb3UgYXJlIHVuZGVyIEF0dGFjayFcbuKAgSAgUHJlc3MgezB9IHRvIGxlYXZlIiwgSW5wdXQgQmluZGluZyBTdHJpbmcoQnV0dG9uKEludGVyYWN0KSkpLAoJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gNzQgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdICsgNTUgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwgRG8gTm90IENsaXAsCgkJCVZpc2libGUgVG8gU3RyaW5nIGFuZCBDb2xvciwgQ3VzdG9tIENvbG9yKDI0NSArIDEwICogU2luZSBGcm9tIFJhZGlhbnMoNCAqIFRvdGFsIFRpbWUgRWxhcHNlZCksIDIwNSArIDUwICogU2luZSBGcm9tIFJhZGlhbnMoCgkJCTQgKiBUb3RhbCBUaW1lIEVsYXBzZWQpLCAyMDAgKiBTaW5lIEZyb20gUmFkaWFucyg0ICogVG90YWwgVGltZSBFbGFwc2VkKSwgMjU1KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywgQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlKSwgQ3VzdG9tIFN0cmluZygKCQkJIlByZXNzIHswfSB0byBidXlcbiIsIElucHV0IEJpbmRpbmcgU3RyaW5nKEJ1dHRvbihQcmltYXJ5IEZpcmUpKSksCgkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSA3NCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSA1NSAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwKCQkJVmlzaWJsZSBUbyBhbmQgU3RyaW5nLCBDb2xvcihXaGl0ZSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJIlNraXAgQXNzZW1ibGluZyBIZXJvZXMiCgkJU2V0IE1hdGNoIFRpbWUoMyk7CgkJV2FpdCBVbnRpbChJcyBHYW1lIEluIFByb2dyZXNzLCAzLjUwMCk7CgkJU2V0IE1hdGNoIFRpbWUoMCk7CgkJQ3JlYXRlIER1bW15IEJvdChIZXJvKE1jQ3JlZSksIFRlYW0gMSwgMCwgMTAwMCAqIERvd24sIEZvcndhcmQpOwoJCUNyZWF0ZSBEdW1teSBCb3QoSGVybyhTb2xkaWVyOiA3NiksIFRlYW0gMSwgMSwgMTAwMCAqIERvd24sIEZvcndhcmQpOwoJCUNyZWF0ZSBEdW1teSBCb3QoSGVybyhNY0NyZWUpLCBUZWFtIDEsIDIsIDEwMDAgKiBEb3duLCBGb3J3YXJkKTsKCQlDcmVhdGUgRHVtbXkgQm90KEhlcm8oU29sZGllcjogNzYpLCBUZWFtIDEsIDMsIDEwMDAgKiBEb3duLCBGb3J3YXJkKTsKCQlDcmVhdGUgRHVtbXkgQm90KEhlcm8oV2lkb3dtYWtlciksIFRlYW0gMSwgNCwgMTAwMCAqIERvd24sIEZvcndhcmQpOwoJCUNyZWF0ZSBEdW1teSBCb3QoSGVybyhCcmlnaXR0ZSksIFRlYW0gMSwgNSwgMTAwMCAqIERvd24sIEZvcndhcmQpOwoJCUlmKEdsb2JhbC5HYW1lbW9kZSk7CgkJCUNyZWF0ZSBEdW1teSBCb3QoSGVybyhSb2FkaG9nKSwgVGVhbSAxLCA2LCAxMDAwICogRG93biwgRm9yd2FyZCk7CgkJRW5kOwoJCVdhaXQoMSwgSWdub3JlIENvbmRpdGlvbik7CgkJU3RhcnQgRGFtYWdlIE1vZGlmaWNhdGlvbihBbGwgUGxheWVycyhUZWFtIDEpLCBBbGwgUGxheWVycyhUZWFtIDEpLCAwLCBOb25lKTsKCX0KfQoKcnVsZSgiU3Vicm91dGluZSAoU2V0IE1hcCBLUik6IFNldCBTcGF3bnMsIE5vZGVzLCBFZGdlcywgRGlzdGFuY2UgTWF0cml4LCBEcm9wLW9mZiBMb2NhdGlvbiwgQWJpbGl0eSBCdXkgTG9jYXRpb24iKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJU2V0X01hcF9LUjsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLlNwYXducyA9IEFycmF5KFZlY3RvcigtNDkuNTQzLCAtMC4wNTgsIC0yMC45NDEpLCBWZWN0b3IoLTkwLjk0MywgMC44NTMsIC0zNC43MDgpLCBWZWN0b3IoLTcyLjc4MSwgNC41MDAsIC0zMC42MzkpLCBWZWN0b3IoCgkJCS05MC41MDQsIDEuMTAwLCAxMC44MTMpLCBWZWN0b3IoLTY3LjQxNCwgMC4wMjEsIC0xMi44MzUpLCBWZWN0b3IoLTU0LjU1NiwgMCwgLTEuODY4KSwgVmVjdG9yKC03Ny44MzQsIDYsIC0xMS4wMzkpLCBWZWN0b3IoCgkJCS0zNi42NDgsIDksIC0yMi4wODkpLCBWZWN0b3IoLTQ4LjY0MywgMS4xNDYsIC00Ni44OTMpLCBWZWN0b3IoLTkyLjAwNCwgLTIuNDk2LCAtNDUuMDU3KSk7CgkJR2xvYmFsLlNwYXduc19OZWFyZXN0X05vZGVzX2J5X0luZGV4ID0gQXJyYXkoMiwgMTksIDEyLCAyMCwgMzksIDI0LCAyOCwgMzQsIDUsIDE2KTsKCQlHbG9iYWwuTm9kZXMgPSBBcnJheShWZWN0b3IoLTUzLjI5NiwgLTAuMjI4LCAtMzQuNzcxKSwgVmVjdG9yKC01NS42NTcsIC0wLjA1OCwgLTI0LjM5NCksIFZlY3RvcigtNDYuMTQzLCAtMC4wNTgsIC0xOS4xNzIpLCBWZWN0b3IoCgkJCS00MS44NzYsIDAuMDYxLCAtMzAuNjgyKSwgVmVjdG9yKC0zNS43MzQsIDIsIC00OS45NTYpLCBWZWN0b3IoLTQ4LjE4MiwgMiwgLTUwLjkzNiksIFZlY3RvcigtNDkuNzMwLCAwLjA5MSwgLTQxLjkzNCksIFZlY3RvcigKCQkJLTU5LjYxMSwgMC4xNzQsIC00Ny43MzYpLCBWZWN0b3IoLTcwLjQ5MSwgMC4xODgsIC00My4zMDUpLCBWZWN0b3IoLTcyLjI5OCwgMC41MDAsIC0zOC4yNDYpLCBWZWN0b3IoLTcyLjQzNywgMC41MDAsIC0zMS43MjMpLAoJCQlWZWN0b3IoLTgxLjQ5NywgMi41MDAsIC0zMi4zMDcpLCBWZWN0b3IoLTc2LjAxOCwgNC41MDAsIC0yOC4wMDcpLCBWZWN0b3IoLTcwLjE0OCwgNC41MDAsIC0zNS45MTYpLCBWZWN0b3IoLTgxLjczMywgNC41MDAsCgkJCS0zOS43ODcpLCBWZWN0b3IoLTg5LjA2MywgLTEuNDk0LCAtNjAuMTU3KSwgVmVjdG9yKC05NS4yNDQsIC0yLjQ5NiwgLTQ2LjQyMCksIFZlY3RvcigtMTAxLjQ1NSwgLTAuNDk0LCAtMzIuNjI2KSwgVmVjdG9yKAoJCQktODcuODc1LCAwLjc0NSwgLTI3LjAyNSksIFZlY3RvcigtODMuNTI2LCAwLjMxNSwgLTQ3LjA1MyksIFZlY3RvcigtOTEuMDYzLCAwLjg1OSwgLTEzLjk4OCksIFZlY3RvcigtODkuMTcwLCAwLjkyNywgMy41NjIpLAoJCQlWZWN0b3IoLTc1LjIzNSwgLTAuMjAwLCAzLjIxNCksIFZlY3RvcigtNjAuNzc3LCAwLCAzLjAyMyksIFZlY3RvcigtNDkuMjM4LCAwLCAxLjczNyksIFZlY3RvcigtNDYuNTY3LCAxLCAtOS40OTUpLCBWZWN0b3IoCgkJCS01OS43NjcsIDUuMDIxLCAtMTIuMDc0KSwgVmVjdG9yKC02Ny4yNDcsIDUuMDIxLCAtMTMuMzExKSwgVmVjdG9yKC03Ny4xOTgsIDYsIC0xNC43NjQpLCBWZWN0b3IoLTc4LjQwNSwgNiwgLTYuNzA2KSwgVmVjdG9yKAoJCQktODYuODc2LCA2LjkzNCwgLTE2Ljk3NCksIFZlY3RvcigtOTAuMzc5LCA2LjkzMCwgLTQuMjc2KSwgVmVjdG9yKC05Ny4wMzMsIDYuOTM4LCAtNi4wMDkpLCBWZWN0b3IoLTU4LjY5MywgNC45NTYsIC0xNi43MjMpLAoJCQlWZWN0b3IoLTM3Ljc3NCwgOSwgLTEyLjY4NiksIFZlY3RvcigtMzMuODk5LCA5LCAtMzQuMjc2KSwgVmVjdG9yKC0zMS40MDcsIDYsIC00OS45MjApLCBWZWN0b3IoLTYwLjA0NiwgMywgLTMuNzU0KSwgVmVjdG9yKAoJCQktNzIuODU0LCAtMC4xOTIsIC03LjQyOCksIFZlY3RvcigtNzEuOTUyLCAtMC4xOTAsIC0xNC4yMDUpLCBWZWN0b3IoLTcwLjM0NywgLTAuMjU5LCAtMjAuMzM5KSwgVmVjdG9yKC02NC4zNjAsIC0wLjMyNywKCQkJLTI4LjgxNCkpOwoJCUdsb2JhbC5Ob2Rlc19Db3VudCA9IENvdW50IE9mKEdsb2JhbC5Ob2Rlcyk7CgkJR2xvYmFsLkVkZ2VzID0gQXJyYXkoQXJyYXkoMSwgMywgNywgNDAsIDQxKSwgQXJyYXkoMCwgMiksIEFycmF5KDEsIDMpLCBBcnJheSgwLCAyLCA0KSwgQXJyYXkoMywgNSksIEFycmF5KDQsIDYpLCBBcnJheSg1LCA3KSwKCQkJQXJyYXkoMCwgNiwgOCwgMTUpLCBBcnJheSg3LCA5LCAxOSksIEFycmF5KDgsIDEwKSwgQXJyYXkoOSwgMTEsIDQxKSwgQXJyYXkoMTAsIDEyKSwgQXJyYXkoMTEsIDEzKSwgQXJyYXkoMCwgOCwgMTIsIDE0KSwgQXJyYXkoCgkJCTEzLCAxOCksIEFycmF5KDcsIDE2KSwgQXJyYXkoMTUsIDE3KSwgQXJyYXkoMTYsIDE4KSwgQXJyYXkoMTQsIDE3LCAxOSwgMjAsIDQwKSwgQXJyYXkoOCwgMTgpLCBBcnJheSgxOCwgMjEpLCBBcnJheSgyMCwgMjIpLAoJCQlBcnJheSgyMSwgMjMsIDM4KSwgQXJyYXkoMjIsIDI0KSwgQXJyYXkoMjMsIDI1KSwgQXJyYXkoMjQsIDI2KSwgQXJyYXkoMjUsIDI3LCAyOCwgMzAsIDMzLCAzNyksIEFycmF5KDI2LCAyOCwgMzAsIDQxKSwgQXJyYXkoMjYsCgkJCTI3LCAyOSwgMzApLCBBcnJheSgyOCksIEFycmF5KDE4LCAyNiwgMjcsIDI4LCAzMSksIEFycmF5KDIxLCAzMCwgMzIpLCBBcnJheSgzMSksIEFycmF5KDI2LCAzNCwgNDApLCBBcnJheSgzMywgMzUsIDM2KSwgQXJyYXkoMCwKCQkJMzQsIDM2KSwgQXJyYXkoMzQsIDM1KSwgQXJyYXkoMjYsIDM4KSwgQXJyYXkoMjIsIDM3LCAzOSwgNDApLCBBcnJheSgzOCwgNDApLCBBcnJheSgwLCAxOCwgMzgsIDM5LCA0MSksIEFycmF5KDAsIDEwLCA0MCkpOwoJCUdsb2JhbC5EaXN0YW5jZV9NYXRyaXggPSBBcnJheShDdXN0b20gU3RyaW5nKAoJCQkiMDEyMTIzMjEyMzIzNDQzMjMzMjMzNDM0NTU0NTU2NTY3NTY3NzMyMjExMTAxMjM0MzIzNDM0NTU0MzQ0MzQ0NTQ1NjY1NjY3Njc4Njc4ODQzMzIyMjEwMTIzNDM0NTQ1NjY1NDU1NDU1NjU2Nzc2Nzc4Nzg5Nzg5OTU0NDMzMTIiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjEwMTIzMjM0MzQ1NTQzNDQzNDQ1NDU2NjU2Njc2Nzg2Nzg4NDMzMjIyMzIxMDEyMzQ1NDU2NjU0NTU0NTU2NTY3NzY3Nzg3ODk3ODk5NTQ0MzMzNDMyMTAxMjM0NTY3NzYzNDU1NDY3Njc4ODc4ODk4OSE4OSEhNjU1NDQyMzQzIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIyMTAxMjM0NTY2NTIzNDQzNTY1Njc3Njc3ODc4OTc4OTk1NDQzMzEyMzIzMjEwMTIzNDU1NDEyMzMyNDU0NTY2NTY2NzY3ODY3ODg0MzMyMjIzNDM0MzIxMDEyMzQ0MzIzMzIxMzQ1Njc3Njc3ODc4OTc4OTk1NDQzMzM0NTQ1NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzIxMDEyMzQ0MzQ0MzI0NTU2Nzc2Nzc4Nzg5Nzg5OTU0NDMyMjM0MzQ1NDMyMTAxMjM0NDU0MzM0NTQ1NjY1NjY3Njc4Njc4ODQzMzIxMzQ1NDU2NTQzMjEwMTIzNTY1NDQ1NjU2Nzc2Nzc4Nzg5Nzg5OTU0NDMyMjM0MzQ1NDMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjIzMjEwMTI0NTQzMzQ1NTY3NzY3Nzg3ODk3ODk5NTQ0MzMxMjMyMzQzMjEyMzIxMDEzNDMyMjM0NDU2NjU2Njc2Nzg2Nzg4NDMzMjIyMzQzNDU0MzIzNDMyMTA0MzIxMjIzNDU2NjU2Njc2Nzg2Nzg4NDMzMjMyMzQzNDMyMTIzIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NTY1NDAxMjMzNDU1Njc3Njc3ODc4OTc4OTk1NDQzMzM0NTQ1NDMyMzQ1NjU0MzEwMTIzMzQ1Njc3Njc3ODc4OTc4OTk1NDQzNDM0NTQ1NTQzMzQ0NTQzMjIxMDEyMjM0NTY2NTY2NzY3ODY3ODg0MzMyMzIzNDM0NTQzMjMzNCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzIxMzIxMDExMjM0NTU0NTU2NTY3NTY3NzMyMjEyMzQ1NDU0MzIxMjM0NDMyMzMyMTAyMzQ1NjY1NjY3Njc4Njc4ODQzMzIzMzQ1NDU2NTQzNDQ1NDMyNDMyMTIwMTIzNDU1NjY3Njc4Njc4ODQzMzIzNDU2NTY3NjU0NTU2NTQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjM1NDMyMzEwMTIzNDQ1NTY1Njc1Njc3MzIzMzQzNDU0NTY1NDU1NDU2NTQ1NTQzNDIxMDEyMzM0NDU0NTY0NTY2MjEyMjM0NTY1Njc2NTY2NTY3NjU2NjU0NTMyMTAxMjM0NDU0NTY0NTY2MzIzMzQ1Njc2Nzg3NjY2NTY3NjU3IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI2NTQ1NDMyMTAxMjMzNDM0NTM0NTUzMzQ0NDQ1NjU2NzY1NTU0NTY1NDY1NDM0NDQzMjEwMTIyMzIzNDIzNDQyMzQzMzM0NTQ1NjU0NDQzNDU0MzU0MzIzMzMzMzIxMDExMjEyMzEyMzMxMjMyMjIzNDM0NTQzNDMyMzQ0MzQ0MyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMjMzMzQ0MzIxMDEyMTIzMjM0NDIzMzIxMzQ1NDU2NTQ0NDM0NTQzNTQzMjMzMzQ0MzIxMTAxMTIzMjM0NDIzNDMyNDU2NTY3NjU1NTQ1NjU0NjU0MzQ0NDU1NDMyMjEwMjM0MzQ1NTM0NTQzMzQ1NDU2NTQzNDM0NDMyNDMyMTIiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjIyMzQzMjExMTIwMTIyMzQ0MjMzMjI0NTY1Njc2NTQ1NDU1NDM1NDMyMzIxMjM0MzIyMjMxMDEzNDU1MzM0MzM1Njc2Nzg3NjU2NTY2NTQ2NTQzNDMyMzQ1NDMzMzQyMTA0NTY2NDQ1NDQyMzQzNDU0MzQ0MzQ1NDM0NDMyMzM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzNDMyMTIyMzIzNDAxMjIyMjIxMjIzNDM0NTQzNDU0NTY1NDQ1NDM0NDU0NTQzMjMzNDM0NTEwMTEzMzMyMzEyMzIzNDMyMzQzNDU1NDM0NDM0NDU0NTU0MzQ0NTQ1NjIxMDE0MzMyMjIzNDM0NTQzNDU0NTY2NTQ1NTQ1NTY1NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTQzNDQ1NDU2MjExMDQ0NDMzMzQ1NDU2NTQ1NTQ1NjU0NTU0MzQ0MzIzMzIxMjIzMjM0MjM0NDAxMjIzMjM0MzQ1NDM0NDM0NTQzNDQzMjMzMjEyMzMyMzM0MzQ1MzQ1NTEwMTEyMjM0MzQ1NDM0NDM0NTQzNDQzMjMzMzIzNDQiKSwKCQkJQ3VzdG9tIFN0cmluZygiMzQ0NTQ1NjQ1NjYyMTAxMjEyMzIzNDMyMzMyMzQzMjMzMjEyMjMyMzQ0MzQ0NTQ1NjQ1NjYyMTEwMTEyMzIzNDMyMzIxMjM0MzM0MzIzMzQzNDU1NDU1NjU2NzU2NzczMjIxMCIpKTsKCQlHbG9iYWwuRWxldmF0b3JfTm9kZXMgPSBFbXB0eSBBcnJheTsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMCk7CgkJCUdsb2JhbC5PYmplY3RpdmVfU3Bhd25zID0gQXJyYXkoVmVjdG9yKC0zNC44MTMsIDIsIC01MC44MTkpLCBWZWN0b3IoLTQyLjk3OSwgMC4wMDIsIDUuNzUzKSwgVmVjdG9yKC05Mi41MTQsIDEuMTM0LCAxMS4yNzYpLCBWZWN0b3IoCgkJCQktOTMuODk0LCAtMi40OTcsIC00Mi44MTMpLCBWZWN0b3IoLTc5LjQ4OSwgNi4wMDEsIC02LjU2OSksIFZlY3RvcigtMjkuOTc5LCA5LCAtMTUuMjc0KSwgVmVjdG9yKC0zMS4yOTQsIDYuMDAyLCAtNTAuMTEzKSwKCQkJCVZlY3RvcigtOTguNTg3LCA2LjkzOCwgLTYuMTc0KSk7CgkJRWxzZSBJZihHbG9iYWwuR2FtZW1vZGUgPT0gMSk7CgkJCUdsb2JhbC5PYmplY3RpdmVfU3Bhd25zID0gQXJyYXkoVmVjdG9yKC0zNC44OTksIDEuODU4LCAtMjQuNzM0KSwgVmVjdG9yKC0zNi40MTksIDQsIC00OS40MTYpLCBWZWN0b3IoLTU2LjM1NywgMS45MjMsIC00NS4xNjQpLAoJCQkJVmVjdG9yKC04My4zODIsIDIuMzA3LCAtNDYuNTk1KSwgVmVjdG9yKC03NS43MDksIDYuNTAwLCAtMzguNTg2KSwgVmVjdG9yKC04MC40NDAsIDgsIC0xNS4zMDIpLCBWZWN0b3IoLTkzLjEyMiwgOC45MzksIC01LjQyNSksCgkJCQlWZWN0b3IoLTkzLjcxMCwgMi45NDcsIC0xMS4wNTUpLCBWZWN0b3IoLTc4LjIyOCwgMi4xNDIsIC0yMy4wNTcpLCBWZWN0b3IoLTcxLjcwMywgMS43ODAsIC0wLjY1NCksIFZlY3RvcigtNDQuNjI5LCAyLCAyLjA4OSksCgkJCQlWZWN0b3IoLTQ4LjI4MCwgOC45NTYsIC0xNS4wMjkpLCBWZWN0b3IoLTk1LjM1MiwgLTAuNDk2LCAtNDYuNDIyKSk7CgkJRW5kOwoJCUdsb2JhbC5QbGF5ZXJfU3Bhd24gPSBWZWN0b3IoLTcxLjgzNCwgMC41MDEsIC0zMS40OTApOwoJCUdsb2JhbC5QbGF5ZXJfU3Bhd25fRmFjaW5nID0gVmVjdG9yKDIsIDAsIDEpOwoJCUdsb2JhbC5BYmlsaXR5X0J1eV9Mb2NhdGlvbiA9IFZlY3RvcigtNTMuNjY4LCAtMC4wNjAsIC0yNi4zODcpOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl0gPSBGb3J3YXJkOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gPSBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdKSwKCQkJVmVydGljYWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSkgLSA5MCk7CgkJR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSA9IENyb3NzIFByb2R1Y3QoR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSwgR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSk7CgkJR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgPSA5MDAgKiBVcDsKCQlHbG9iYWwuQnV5X01lbnVfUG9zID0gR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgLSA5ICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIDE0MiAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl07CgkJR2xvYmFsLk1heF9TcGVlZF9Cb251cyA9IDE2MDsKCX0KfQoKcnVsZSgiU3Vicm91dGluZSAoU2V0IE1hcCBCVyk6IFNldCBTcGF3bnMsIE5vZGVzLCBFZGdlcywgRGlzdGFuY2UgTWF0cml4LCBEcm9wLW9mZiBMb2NhdGlvbiwgQWJpbGl0eSBCdXkgTG9jYXRpb24iKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJU2V0X01hcF9CVzsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLlNwYXducyA9IEFycmF5KFZlY3RvcigtNDMuMTc3LCAtMi4yMTUsIDE0NC43NjcpLCBWZWN0b3IoLTY5LjE0NiwgMS43NTAsIDE0OC4yNjkpLCBWZWN0b3IoLTcyLjc5NSwgNi42NjMsIDk4LjkxNCksIFZlY3RvcigKCQkJLTc5LjA1NiwgNC44NzUsIDYzLjY2MyksIFZlY3RvcigtODcuODQ2LCAwLjc1MCwgODguMzIyKSwgVmVjdG9yKC03NS43NzEsIDAuMjUwLCA2Ny4zMjEpLCBWZWN0b3IoLTI2LjkxMiwgMiwgNjcuNTc4KSwgVmVjdG9yKAoJCQktMjcuOTEwLCAwLjI4OSwgMTExLjA2MyksIFZlY3RvcigtMjYuNzY5LCA2LjAwMiwgOTQuOTY5KSwgVmVjdG9yKC01MC42MDYsIDQuNzIwLCA4Ni41OTEpKTsKCQlHbG9iYWwuU3Bhd25zX05lYXJlc3RfTm9kZXNfYnlfSW5kZXggPSBBcnJheSgxOSwgMTYsIDQwLCA2LCA5LCAzMCwgMSwgMzIsIDM0LCAzNik7CgkJR2xvYmFsLk5vZGVzID0gQXJyYXkoVmVjdG9yKC0xNi44ODcsIDIuMDk5LCA4MC44MjMpLCBWZWN0b3IoLTE2LjM2NywgMiwgNzUuMDEyKSwgVmVjdG9yKC0yNy4xNTUsIDAsIDYxLjkzNCksIFZlY3RvcigtMzcuMzExLAoJCQktMC4zOTQsIDczLjQwMSksIFZlY3RvcigtNDcuMjM4LCAtMC4yMDQsIDY1LjE4NSksIFZlY3RvcigtNTcuMDA3LCAtMC4yNTAsIDYwLjc2MiksIFZlY3RvcigtNzkuNjEzLCA0Ljg3NSwgNjMuMTY2KSwgVmVjdG9yKAoJCQktODIuMjkyLCAwLjc5MCwgODUuODUwKSwgVmVjdG9yKC04Ni41NTgsIDAuNzUwLCA4MC44MjUpLCBWZWN0b3IoLTkwLjg5OSwgMC43NTAsIDk0LjA1MCksIFZlY3RvcigtNzUuNDU5LCAwLjc4OSwgOTguOTQ0KSwKCQkJVmVjdG9yKC02NC4yMjIsIC0wLjM5NSwgOTguMDM1KSwgVmVjdG9yKC01Mi4yNDYsIC0wLjM5NSwgMTA5LjI3MSksIFZlY3RvcigtNjcuNTc2LCAwLjc1OSwgMTE3Ljg0NiksIFZlY3RvcigtNjYuMjA4LCAwLjc0NywKCQkJMTMzLjg5NCksIFZlY3RvcigtNzYuOTExLCAxLjc0OCwgMTQ0LjE0MSksIFZlY3RvcigtNjUuOTg2LCAxLjc1MSwgMTU2LjYwMiksIFZlY3RvcigtNjAuMTk2LCAwLjc0NywgMTQwLjc3MiksIFZlY3RvcigtNDkuNDgzLAoJCQktMC4yNTAsIDEzOS44ODIpLCBWZWN0b3IoLTQxLjc0NiwgLTIuMjEzLCAxNDIuMjE4KSwgVmVjdG9yKC01Ny4wNTQsIC0wLjIwNSwgMTI5LjY1NSksIFZlY3RvcigtNDQuMTUwLCAtMC4yMDUsIDExNy41MDkpLCBWZWN0b3IoCgkJCS0zNy4xNTUsIC0wLjIwNSwgOTUuNzkyKSwgVmVjdG9yKC00MC4wMDcsIC0wLjIwNSwgODcuOTE1KSwgVmVjdG9yKC00NC4yNjAsIC0wLjE5NCwgOTAuMjM4KSwgVmVjdG9yKC01NC42NzcsIC0wLjE5MCwgODguNTM0KSwKCQkJVmVjdG9yKC01Mi4wMjgsIC0wLjE5NywgOTguNDAzKSwgVmVjdG9yKC02MS4xNjIsIC0wLjM5NSwgODMuNDk2KSwgVmVjdG9yKC02OC42MzQsIDAuMjUwLCA3NC4zOTQpLCBWZWN0b3IoLTc0LjE1OCwgMC4yNTAsCgkJCTc3LjY3MSksIFZlY3RvcigtODEuMjU2LCAwLjI1MCwgNjIuMjQ3KSwgVmVjdG9yKC02My43NDQsIDAuMDc3LCA2OC43OTApLCBWZWN0b3IoLTIzLjgxNCwgMC4yODksIDExMC4yOTUpLCBWZWN0b3IoLTE5LjcwNiwKCQkJMi4wNzksIDk5Ljk5MiksIFZlY3RvcigtMzEuMjYxLCA1LjgyMCwgMTAxLjEzMyksIFZlY3RvcigtMzUuODY5LCA1LjgwNSwgOTIuODQ1KSwgVmVjdG9yKC01NC42NTgsIDQuNTIyLCA4OS4wMTYpLCBWZWN0b3IoCgkJCS01Mi44MzYsIDQuNTI0LCA5Ni45ODUpLCBWZWN0b3IoLTQ2LjExMywgMy4yODgsIDEwMi40MjEpLCBWZWN0b3IoLTcyLjUxNiwgNi41NzYsIDEwNS4xMDQpLCBWZWN0b3IoLTc2LjM3OSwgNi41NzMsIDk4LjUyMSksCgkJCVZlY3RvcigtNzguNzE1LCAxLjgxNywgMTEyLjA2MyksIFZlY3RvcigtNDEuNDMyLCAtMC4xMDYsIDEwNC4zOTApLCBWZWN0b3IoLTUyLjEzNSwgLTAuMjUwLCAxNDYuNjQzKSwgVmVjdG9yKC00Mi45ODQsIC0yLjIxMywKCQkJMTQ5LjU1MCksIFZlY3RvcigtNDguOTk5LCAtMC4yMDUsIDEzMi45MTgpKTsKCQlHbG9iYWwuTm9kZXNfQ291bnQgPSBDb3VudCBPZihHbG9iYWwuTm9kZXMpOwoJCUdsb2JhbC5FZGdlcyA9IEFycmF5KEFycmF5KDEsIDMsIDMzKSwgQXJyYXkoMCwgMiksIEFycmF5KDEsIDMpLCBBcnJheSgwLCAyLCA0LCAyMywgMjcpLCBBcnJheSgzLCA1KSwgQXJyYXkoNCwgNiwgMzEpLCBBcnJheSg1LCA3LAoJCQkzNiksIEFycmF5KDYsIDgsIDEwLCAyOSksIEFycmF5KDcsIDkpLCBBcnJheSg4LCAxMCksIEFycmF5KDcsIDksIDExKSwgQXJyYXkoMTAsIDEyLCAyNyksIEFycmF5KDExLCAxMywgMjEsIDI2KSwgQXJyYXkoMTIsIDE0LAoJCQk0MSksIEFycmF5KDEzLCAxNSwgMTcpLCBBcnJheSgxNCwgMTYpLCBBcnJheSgxNSwgMTcpLCBBcnJheSgxNCwgMTYsIDE4LCAyMCksIEFycmF5KDE3LCAxOSwgNDMsIDQ1KSwgQXJyYXkoMTgsIDQ0KSwgQXJyYXkoMTcsCgkJCTIxLCA0NSksIEFycmF5KDEyLCAyMCwgMjIsIDM4LCA0MiksIEFycmF5KDIxLCAyMywgMzIsIDQyKSwgQXJyYXkoMywgMjIsIDI0KSwgQXJyYXkoMjMsIDI1KSwgQXJyYXkoMjQsIDI2LCAyNyksIEFycmF5KDEyLCAyNSksCgkJCUFycmF5KDMsIDExLCAyNSwgMjgpLCBBcnJheSgyNywgMjksIDMxKSwgQXJyYXkoNywgMjgsIDMwKSwgQXJyYXkoMjksIDMxKSwgQXJyYXkoNSwgMjgsIDMwKSwgQXJyYXkoMjIsIDMzKSwgQXJyYXkoMCwgMzIsIDM0KSwKCQkJQXJyYXkoMzMsIDM1KSwgQXJyYXkoMjEsIDIzLCAzNCwgMzYsIDM3KSwgQXJyYXkoNiwgMTEsIDM1LCAzNyksIEFycmF5KDM1LCAzNiwgMzgsIDM5KSwgQXJyYXkoMjEsIDM3KSwgQXJyYXkoMTMsIDM3LCA0MCksIEFycmF5KAoJCQkzOSwgNDEpLCBBcnJheSgxMywgNDApLCBBcnJheSgyMSwgMjIpLCBBcnJheSgxOCwgNDQpLCBBcnJheSgxOSwgNDMpLCBBcnJheSgxOCwgMjApKTsKCQlHbG9iYWwuRGlzdGFuY2VfTWF0cml4ID0gQXJyYXkoQ3VzdG9tIFN0cmluZygKCQkJIjAxMjEyMzQ1NjU0MzQ1Njc3Njc4NTQzMjMzNDIzNDU0MjEyMzQ0NTU2NjQ4OTYxMDEyMzQ1Njc2NTQ1Njc4ODc4OTY1NDM0NDUzNDU2NTMyMzQ1NTY2Nzc1OSE3MjEwMTIzNDU2NTQzNDU2Nzc2Nzg1NDMyMzM0MjM0NTQ0MzQ1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1NjU3NzY0ODk2MTIxMDEyMzQ1NDMyMzQ1NjY1Njc0MzIxMjIzMTIzNDMzMjM0NDU0NjY1Mzc4NTIzMjEwMTIzNDU0MzQ1Njc3Njc4NTQzMjMzNDIzNDMyNDM0NDM0NTU2NjQ4OTYzNDMyMTAxMjM0MzM0NTY3NzY3ODU0NDM0NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTMyMzIxNTQ0MzIzNDQ1NjU4OTY0NTQzMjEwMTIzMjIzNDU2NjU2NzQzNDM0NDQzMzIzMjU0MzIxMjMzNDU0Nzg1NTY1NDMyMTAxMjEyMzQ1Njc2Nzg1NDU0NTQ0MzIxMjM2NTQzMjM0NDU1NTg5NjY3NjU0MzIxMDEyMzQ1NjciKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjg3ODk2NTY1NjU1NDMyMzQ3NjU0MzQ1NTY2NjkhNzU2NTQ1NDMyMTAxMjM0NTY3Njc4NTQ1NTU0NDM0MzQ1NjY2NTQ1NTY2NTU4OTY0NTQzNDMyMTIxMDEyMzQ1NjU2NzQzNDQ0MzMyMzIzNDU1NTQzNDQ1NTQ0Nzg1MzQzMjM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzMjMyMTAxMjM0NTQ1NjMyMzMzMjIxMjM0MzQ0NTU0NDM1NDMzNjc0NDU0MzQ1NDM0MzIxMDEyMzQzNDUyMTIzMzIxMjM0NTQzNDU0NDMyNDMyMjU2MzU2NTQ1NjU0NTQzMjEwMTIzMjM0MzIzNDQzMjM0NTY1NDU2NTU0MzMyMSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzQ1NDY3NjU2NzY1NjU0MzIxMDEyMTIzMjM0NTU0MzQ1Njc2NTY3NjY1NDQzMjQzNDM3ODc2Nzg3Njc2NTQzMjEwMTIzNDM0NTY2NTQ1Njc4NzY3ODc3NjU1NDM1NDU0Nzg3Njc4Nzc4NzY1NDMyMTAxMjMyMzQ1NjY1Njc4OTgiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU2NzY2NTQ2NTQ0MzQzNjc2NTY3NjY3NjU0MzIxMjEwMTIxMjM0NTU0NTY3ODc0NTY1NTQzNTQzMzIzMjc4NzY3ODc3ODc2NTQzMjMyMTAxMjM0NTY2NTY3ODk4NTY3NjY1NDY1NDQxMjE4OTg3ODk4ODk4NzY1NDM0MzIxMDM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1Njc3Njc4OSE5Njc4Nzc2NTc2NTUyMTI1NjU0NTY1NTY1NDMyMzIzMjEyMzAxMjM0NDM0NTY3NjM0NTQ0MzI0NTQyMzQxNDU0MzQ1NDQ1NDMyMTIzNDMyMzQxMDEyMzMyMzQ1NjUyMzQzMzIxMzQzMTQ1MjM0MzIzNDU1NjU0MyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMjM0NTQzNDUyMTAxMjMzMzQ1NjUxMjM0NDMyNDU0MTU2MzIzMjEyMzQ1NjU0MzM0NTY1NDU2MzIxMDEyMzIzNDU0MjM0NTU0MzU2NTI2NzQzNDMyMzQ1NTY1NDMzNDU2NjU2NzQzMjEwMTIyMzQ1NDM0NTY2NTQ2NjUzNzg1MzQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjMyMzQ1NDU0MzIyMzQ1NjU2NzQzMzIxMDExMjM0MzQ0NTY2NTQ2NTQ0Nzg1NDU0MzQ1NTQ1NDMyMTIzNDU0NTYzMjMzMjEwMjM0NTQ0NTY1NTQzNTQzMzY3NDIzMjEyMzQzNDMyMTIzNDU2NTY3NDMzMjIxMjAxMjMyNDM0NTU1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NjU0NDc4NTM0MzIzMjMyMzQzMjM0NTY3Njc4NTQ0MzMyMzEwMTIxNTQ1NTQ1NTY2NTU4OTY0NTQzNDMyMTIzMjM0NTY3ODc4OTY1NTQ0MzQyMTAxMjY1NTQzNDU1NjY2OSE3NTY1NDMyMzIzNDM0NTY3ODk4OSE3NjY1NTQ1MyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMjEwMTc2NjU0NTY2Nzc3IT84NDU0MzIxMjM0NTQzNDU2Nzg3ODk2NTU0NDM0MjEyMTA2NTU0MzQ1NTY2NjkhNzIzNDM0NTU2NzY1NDM0NTY1NDU2MzIxMjM0NDQ1Njc2MDEyMzQ0MzU2NTI2NzQxMjMyMzQ0NTY2NTQ0NTY3NjUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjY3NDMyMzQ0NTM0NTY1MTAxMjMzNDQ1NjM3ODUyMzQzNDQzNDU1NDMzNDU2NTQ1NjMyMzIzNDQ0NTU2NTIxMDEyMjMzNDUzNjc0MzQzMjMzMjM0NDMyMjM0NTQzNDUyMTIxMjMzMzQ0NTQzMjEwMTEyMjM0MjU2MzQ1NDMzMjEyIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzMzIxMjM0NTU0NTYzMjMyMzMzMjMzNDM0MzIxMDEyMjM0MzY3NDQ1NDM0MzIzNDQzMjMyMzQ1NDU2MzIzMjM0NDM0NDU0NDMyMTEwMTEyMzM2NzQ1NjU0NTQzNDU1NDMyMzQ1NDM0NTIxMjM0NDM0NTU2NTM0MzIyMTAyMzQyNSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjM1NjU0NTQzNDU1NDMyMTIzNDM0NTQzNDM0NDM0NTU2NTU0MzIyMTIwMTI0NTY1Njc2NTY1NDU2NjU0MzIzNDU0NTY1NDU0NTU0NTY2NzY2NTQzMzIzMTAxNTY3NjY3NjU2NjU1NjU0MzIxMjM0MzQ1NDM0NTU0MzQ1Njc2NTYiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU0NDM0MjEwNDU2NTQ1NDM0NTU1NjU0MzIzNDU0MzQ1MjExMjM0MzQ1Njc2MjM0NDQzMjQ1NDA1NjM4OTg3ODk4ODk4NzY1NDM0MzIxMjM0NTY3NzY3ODkhOTY3ODc3NjU3NjU1MDEyOSE5ODkhOTkhOTg3NjU0NTQzMjE0NTY3IiksCgkJCUN1c3RvbSBTdHJpbmcoIjg4Nzg5IT8hNzg5ODg3Njg3NjYxMDM2NzY1Njc2Njc2NTQzNDM0MzIxMjEyMzQ1NTQ1Njc4NzQ1NjU1NDM1NjUzMjMwIikpOwoJCUdsb2JhbC5FbGV2YXRvcl9Ob2RlcyA9IEVtcHR5IEFycmF5OwoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAwKTsKCQkJR2xvYmFsLk9iamVjdGl2ZV9TcGF3bnMgPSBBcnJheShWZWN0b3IoLTMwLjA2NiwgLTIuMjE1LCAxNDUuNzg2KSwgVmVjdG9yKC03Ny44NTMsIDEuNzUwLCAxNTQuNjE3KSwgVmVjdG9yKC0yMy4wNzUsIDAuMjg4LCAxMTMuMzk5KSwKCQkJCVZlY3RvcigtMjQuNjU5LCA2LjAwMSwgODguNzE0KSwgVmVjdG9yKC0xNS40NTIsIDEuOTk5LCA2NS40NjIpLCBWZWN0b3IoLTc2LjExMCwgMC4yNDksIDY3LjUyNCksIFZlY3RvcigtMTAxLjU2NiwgMC43NTAsCgkJCQk5NC4wOTQpKTsKCQlFbHNlIElmKEdsb2JhbC5HYW1lbW9kZSA9PSAxKTsKCQkJR2xvYmFsLk9iamVjdGl2ZV9TcGF3bnMgPSBBcnJheShWZWN0b3IoLTM2LjA0MywgLTAuMjEzLCAxNDcuMDI3KSwgVmVjdG9yKC03Ny45ODYsIDIuNTk4LCAxMjcuMTU5KSwgVmVjdG9yKC03OC4yMTksIDguNTY4LCA5OS43NjApLAoJCQkJVmVjdG9yKC02Mi45OTYsIDcuNjE3LCAxMDEuMzgwKSwgVmVjdG9yKC01OC45NDYsIDcuNDQ2LCA4My44NjgpLCBWZWN0b3IoLTQ0LjU5OSwgNi41MTEsIDkzLjA1NCksIFZlY3RvcigtMjMuOTkzLCA4LCA5NC4zNzcpLAoJCQkJVmVjdG9yKC0xNC43NDgsIDMuOTE4LCA4OC4zNzUpLCBWZWN0b3IoLTI0LjkzOSwgMiwgNTkuMjU2KSwgVmVjdG9yKC0zMS45MzgsIDEuNjA2LCA3My43NjYpLCBWZWN0b3IoLTM3LjU2MywgMS43OTUsIDEwMC4wMzEpLAoJCQkJVmVjdG9yKC02MSwgMS42MDYsIDgyLjU3NiksIFZlY3RvcigtNjQuODcxLCAxLjY4MCwgOTguOTQwKSwgVmVjdG9yKC01NC4yNTMsIDEuNjA1LCAxMTAuODg1KSwgVmVjdG9yKC05OC4wNzUsIDIuNzUwLCA5MS4zMjIpLAoJCQkJVmVjdG9yKC03Ny4xMTksIDYuODc1LCA2Ni4wNjQpLCBWZWN0b3IoLTM5LjUyMiwgMS44NTgsIDEyMi43OTYpKTsKCQlFbmQ7CgkJR2xvYmFsLlBsYXllcl9TcGF3biA9IFZlY3RvcigtNzEuNzYzLCA2LjU3OSwgMTA4LjExMCk7CgkJR2xvYmFsLlBsYXllcl9TcGF3bl9GYWNpbmcgPSBWZWN0b3IoMiwgMCwgLTEpOwoJCUdsb2JhbC5BYmlsaXR5X0J1eV9Mb2NhdGlvbiA9IFZlY3RvcigtNzMuNzU2LCAwLjc0OCwgMTM4LjA3OCk7CgkJR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSA9IEJhY2t3YXJkOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gPSBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdKSwKCQkJVmVydGljYWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSkgLSA5MCk7CgkJR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSA9IENyb3NzIFByb2R1Y3QoR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSwgR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSk7CgkJR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgPSA5MDAgKiBVcDsKCQlHbG9iYWwuQnV5X01lbnVfUG9zID0gR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgLSA5ICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIDE0MiAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl07CgkJR2xvYmFsLk1heF9TcGVlZF9Cb251cyA9IDE4MDsKCX0KfQoKcnVsZSgiU3Vicm91dGluZSAoU2V0IE1hcCBFQSk6IFNldCBTcGF3bnMsIE5vZGVzLCBFZGdlcywgRGlzdGFuY2UgTWF0cml4LCBEcm9wLW9mZiBMb2NhdGlvbiwgQWJpbGl0eSBCdXkgTG9jYXRpb24iKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJU2V0X01hcF9FQTsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLlNwYXducyA9IEFycmF5KFZlY3RvcigtMzAuODQ5LCA5LCAwKSwgVmVjdG9yKDEuMjcxLCA3Ljk3NywgNTMuNTM4KSwgVmVjdG9yKDEuMjcxLCA3Ljk3NywgLTUzLjUzOCksIFZlY3RvcigtNy4yMjksIDcuMzM5LAoJCQkzNC4wNDMpLCBWZWN0b3IoLTYuNDczLCA3LjM0MSwgLTM0LjgxMyksIFZlY3RvcigxOC4xMjAsIDQuNzExLCA5LjEzNSksIFZlY3RvcigxOC4xMjAsIDQuNzExLCAtOS4xMzUpLCBWZWN0b3IoMy42MDAsIDguMDY1LAoJCQktMTkuNzczKSwgVmVjdG9yKDMuMTM2LCA3LjQwMSwgMjAuMjA5KSk7CgkJR2xvYmFsLlNwYXduc19OZWFyZXN0X05vZGVzX2J5X0luZGV4ID0gQXJyYXkoMTQsIDMxLCA3LCAyOSwgOSwgMjcsIDIsIDMsIDI2KTsKCQlHbG9iYWwuTm9kZXMgPSBBcnJheShWZWN0b3IoMjAuNTA0LCA4Ljk5OSwgMCksIFZlY3RvcigyMy45MjAsIDYuMDE4LCAtMTUuODc3KSwgVmVjdG9yKDE4LjQyNywgNi4wMTUsIC0xNC40NjIpLCBWZWN0b3IoMC40MzUsIDcuMzg2LAoJCQktMjMuOTkzKSwgVmVjdG9yKDMuMjQxLCA3LjAxMSwgLTM1LjMxNSksIFZlY3RvcigxOS4zNTAsIDkuNTQ3LCAtMzAuMzg3KSwgVmVjdG9yKDEzLjI0NSwgOC4wMTIsIC00OS41NDIpLCBWZWN0b3IoLTIuMjgxLCA2Ljk5OSwKCQkJLTU0Ljc2MiksIFZlY3RvcigtMTIuMjY2LCA3LjAwMiwgLTQ1LjExNyksIFZlY3RvcigtNy41MTEsIDcuMDQ3LCAtMzkuNzk2KSwgVmVjdG9yKC05LjM4OCwgNy4wNTEsIC0yNC4zOTkpLCBWZWN0b3IoLTE1LjA0MywKCQkJMTAuMDAyLCAtMTkuMTMxKSwgVmVjdG9yKC0xMy44NTIsIDExLjk5OCwgLTExLjMzMSksIFZlY3RvcigtMjAuOTk4LCAxMi4wNDAsIDApLCBWZWN0b3IoLTMyLjEwNywgOSwgMCksIFZlY3RvcigtMjkuMjIwLCA5LAoJCQktNy4xMjApLCBWZWN0b3IoLTE3LjE3MSwgNy4yNjksIC01LjExNyksIFZlY3Rvcig2LjY0NiwgNC43NDEsIC0zLjYxMSksIFZlY3RvcigxNy4xNDMsIDMuOTk4LCAwKSwgVmVjdG9yKDI3LjE2MCwgMy4xNTYsIC02LjI2MiksCgkJCVZlY3Rvcig2LjY0NiwgNC43NDEsIDMuNjExKSwgVmVjdG9yKC0xNy4xNzEsIDcuMjY5LCA1LjExNyksIFZlY3RvcigtMjkuMjIwLCA5LCA3LjEyMCksIFZlY3RvcigtOS4zODgsIDcuMDUxLCAyNC4zOTkpLCBWZWN0b3IoCgkJCS0xNS4wNDMsIDEwLjAwMiwgMTkuMTMxKSwgVmVjdG9yKC0xMy44NTIsIDExLjk5OCwgMTEuMzMxKSwgVmVjdG9yKDAuNDM1LCA3LjM4NiwgMjMuOTkzKSwgVmVjdG9yKDE4LjQyNywgNi4wMTUsIDE0LjQ2MiksIFZlY3RvcigKCQkJMjMuOTIwLCA2LjAxOCwgMTUuODc3KSwgVmVjdG9yKC03LjUxMSwgNy4wNDcsIDM5Ljc5NiksIFZlY3RvcigtMTIuMjY2LCA3LjAwMiwgNDUuMTE3KSwgVmVjdG9yKC0yLjI4MSwgNi45OTksIDU0Ljc2MiksIFZlY3RvcigKCQkJMTMuMjQ1LCA4LjAxMiwgNDkuNTQyKSwgVmVjdG9yKDMuMjQxLCA3LjAxMSwgMzUuMzE1KSwgVmVjdG9yKDE5LjM1MCwgOS41NDcsIDMwLjM4NyksIFZlY3RvcigxNC4wMDksIDExLjgwOCwgMjAuMzU0KSwgVmVjdG9yKAoJCQkxMC41NTYsIDEyLjAwMSwgMTMuMDg5KSwgVmVjdG9yKC01LjYzNCwgMTEuOTk4LCAxMS44ODkpLCBWZWN0b3IoLTUuNjM0LCAxMS45OTgsIC0xMS44ODkpLCBWZWN0b3IoMTAuNTU2LCAxMi4wMDEsIC0xMy4wODkpLAoJCQlWZWN0b3IoNi42MTQsIDExLjYyNCwgLTI1LjUyMCksIFZlY3RvcigxNC4wMDksIDExLjgwOCwgLTIwLjM1NCksIFZlY3Rvcig2LjYxNCwgMTEuNjI0LCAyNS41MjApLCBWZWN0b3IoMjkuNjYwLCAzLCAwKSwgVmVjdG9yKAoJCQkyNy4xNjAsIDMuMTU2LCA2LjI2MiksIFZlY3RvcigtMTIuMzIzLCA2LjM3NCwgMTUuNTM0KSwgVmVjdG9yKC0xMi4zMjMsIDYuMzc0LCAtMTUuNTM0KSwgVmVjdG9yKDEyLjMyMSwgNi44NTEsIDIzLjE1NSksIFZlY3RvcigKCQkJMTIuMzIxLCA2Ljg1MSwgLTIzLjE1NSksIFZlY3RvcigyNy45MzUsIDguOTYxLCAyLjI5NSksIFZlY3RvcigyNy45MzUsIDguOTYxLCAtMi4yOTUpKTsKCQlHbG9iYWwuTm9kZXNfQ291bnQgPSBDb3VudCBPZihHbG9iYWwuTm9kZXMpOwoJCUdsb2JhbC5FZGdlcyA9IEFycmF5KEFycmF5KDEsIDE3LCAxOSwgMjAsIDI4LCAzNSwgNDEsIDQ0LCA0OSwgNTApLCBBcnJheSgwLCAyKSwgQXJyYXkoMSwgMywgMTgsIDQ4KSwgQXJyYXkoMiwgNCwgMTApLCBBcnJheSgzLCA1LAoJCQk2LCA5LCA0OCksIEFycmF5KDQsIDQxKSwgQXJyYXkoNCwgNyksIEFycmF5KDYsIDgpLCBBcnJheSg3LCA5KSwgQXJyYXkoNCwgOCwgMTApLCBBcnJheSgzLCA5LCAxMSwgMTcsIDQ2KSwgQXJyYXkoMTAsIDEyKSwgQXJyYXkoCgkJCTExLCAxMywgMzgpLCBBcnJheSgxMiwgMTQsIDI1KSwgQXJyYXkoMTMsIDE1LCAyMiksIEFycmF5KDE0LCAxNiksIEFycmF5KDE1LCAxNywgMjEsIDQ2KSwgQXJyYXkoMTAsIDE2LCAxOCwgMjApLCBBcnJheSgyLCAxNywKCQkJMTksIDIwLCAyNywgNDQpLCBBcnJheSgxOCwgNDMpLCBBcnJheSgxNywgMTgsIDIxLCAyMyksIEFycmF5KDE2LCAyMCwgMjIsIDQ1KSwgQXJyYXkoMTQsIDIxKSwgQXJyYXkoMjAsIDI0LCAyNiwgMjksIDQ1KSwgQXJyYXkoCgkJCTIzLCAyNSksIEFycmF5KDEzLCAyNCwgMzcpLCBBcnJheSgyMywgMjcsIDMzKSwgQXJyYXkoMTgsIDI2LCAyOCwgNDcpLCBBcnJheSgwLCAyNyksIEFycmF5KDIzLCAzMCwgMzMpLCBBcnJheSgyOSwgMzEpLCBBcnJheSgzMCwKCQkJMzIpLCBBcnJheSgzMSwgMzMpLCBBcnJheSgyNiwgMjksIDMyLCAzNCwgNDcpLCBBcnJheSgzMywgMzUpLCBBcnJheSgwLCAzNCwgMzYpLCBBcnJheSgzNSwgMzcsIDQyKSwgQXJyYXkoMjUsIDM2LCAzOCksIEFycmF5KDEyLAoJCQkzNywgMzkpLCBBcnJheSgzOCwgNDAsIDQxKSwgQXJyYXkoNCwgMzkpLCBBcnJheSgwLCA1LCAzOSksIEFycmF5KDMzLCAzNiksIEFycmF5KDE5LCA0NCksIEFycmF5KDE4LCA0MyksIEFycmF5KDIxLCAyMyksIEFycmF5KAoJCQkxMCwgMTYpLCBBcnJheSgyNywgMzMpLCBBcnJheSgyLCA0KSwgQXJyYXkoMCwgNTApLCBBcnJheSgwLCA0OSkpOwoJCUdsb2JhbC5EaXN0YW5jZV9NYXRyaXggPSBBcnJheShDdXN0b20gU3RyaW5nKAoJCQkiMDEyMzMyNDU0MzIzNDU0MzIxMjExMjMyMzQzMjEzNDU0MzIxMjMzMjMxMzIxMzMzMzExMTAxMjMzNDU1NDM0NTY1NDMyMjIyMzQzNDU0MzI0NTY1NDMyMzQ0MzQyNDMyNDQ0MjIyMjEwMTIzMzQ0MzIzNDU1NDMyMTIyMzQzNDUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjMyMzQ1NjU0NDM0NTU0NTM1MzI0MzMxMzMzMjEwMTIyMzMyMTIzNDU0MzIyMzM0NTQ1NTQzNDU2NzY1NTQ1NTQ0NTM2NDM1MjQyNDQzMzIxMDExMjIxMjM0NTY1NDMzNDQ1NjU2NjU0NDY3ODc2NTQ1NTQzNDI2NTQ2MzUxNDQyIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzMzIxMDIzMzIzNDQ1NjU0MzQzMzQ1NDU1NTQzNTY3NjU0MzQ0MzIzMTU0MzU0NTIzMzQ0MzIxMjAxMjIzNDU2NzY1NDQ1NTY3Njc3NjU1Nzg5ODc2NTY2NTQ1Mzc2NTc0NjI1NTU1NDMyMzEwMTIzNDU2NzY1NDU2NTY3Njc3NyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjY3ODk5ODc2Nzc2NTY0ODc2NzQ3MzY2NTU0MzIzMjEwMTIzNDU2NTQzNDU0NTY1NjY2NTY2Nzg4Nzc2NzY1NTY0ODY1NjM2MzY2NDQzMjEyMjIxMDEyMzQ1NDMyMzQzNDU0NTU1NDU1Njc3NjY1NjU0NDUzNzU0NTI1MjU1NDMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjIxMjMzMzIxMDEyMzQzMjEyMzIzNDM0NDQzNDQ1NjY1NjU1NDM0NTQ2NDM0MTQzNTU1NDMyMzQ0NDMyMTAxMjM0MzIzNDM0NDQ0MzU0NTU2Nzc2NjU0MzIzNDQ1NTQ1MjU0NjY0NTQzNDQ1NTQzMjEwMTIzNDM0NTQ0MzQzMjU1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1NTY3NjU1NDMyMTIzMzQ2NTUzNjU1NTU2NTQ1NTY2NTQzMjEwMTIzNDU2NDMyMzIxNDU2NDU2NjU1NDMyMjM0NDQ3NjQ0NjY2NjY2NTU2Njc3NjU0MzIxMDEyMzQ1MzIxNDMyNTU2NTY3NzY2NTQzMzQ1NTU2NTMzNjY3NzY1NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNDU2NjY1NDM0MzIxMDEyMzQzMjI0NDM1NDU1Njc3Njc2NTQ0NTY2NjU0MzI1NTc3NTQzMzQ1NTU0MzIzNDMyMTAxMjMyMTIzNDQ0MzQ0NTY2NTY2NjU1Njc2NzQzMjE0NDY2NDMyMjM0NDQzMjEyMzQzMjEwMTIxMjMyMzQzMjMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjM0NTU0NTU2NTQ1NjU3MzIzMjMzNTUzMjEyMzQ0NTQzMjM0NTQzMjEwMTEyMzIzNDIxMjM0NTQzNDQ1NTU1NjQ2MjEzMzIyNDQ0MzIzNDU1NjU0MzQ1NjU0MzIxMDIzNDM0NTMyMzQ1NjU0NTU2NjY2NzU3MTI0NDMzNTU0MzIzIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NTU1NDMyMzQ0MzMyMTEyMDEyMTIzMjIzMjM0NDM0NTU0NTY3NTYzMjIzMzM1NTU0MzQ1NjY2NTQzNDQzMjIxMjIzMTAxMjM0MzM0MzQ1NTQ1NjY1NTY3Njc0MzEyNDQ2NjY1NDU2Nzc3NjU0NDMyMTIyMzM0MjEwMzQzNDQ1NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTY2NTY2NTQ0NTY2NjU0MjM1NTc3NDQzNDU2NjY1NDM0NDM0NDMyMjMxMjMwMTIxMjMxMjMzMjM0NDM0NTY1NTQzMTQzNDU1NTU0NTY2Nzc2NTQ0MzIzNDQzMzQyMzQxMDEyMzQyMzQ0MzQ0MzIzNDU1NDU0MjU0NTY2NDU1NTUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU2NzY1NDMyMTIzNDQ0NTM0MzIxMDM0NTM0NTU0NDMyMTIzNDQzNjUzNTU2NTUzNDM0NTU2NzY1NDU1NDU1NDMyMzIzNDEyMzAxMjIzMzIxMjM0NDU1NjQ1NDMyNTI0NDQyMzIzNDQ1NjU0MzQ1NTU0MzIxMjIzNDIzNDEwMTM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0MzIzMzQ1NTQ1MzUzMjM0MTMzMzEyMzQ0MzU2NTQzNDU2NTQzMjIyMjM0MzQ1MjEwNDU1NDMzMjM0NDM0MjQzMjQ0MjQyMjQ1NDU2Njc3NjU0NTU0NTU0MzM0MjM0MTIzMjM0MDEyMjEyMzQ0NTY3NTU1NDI1MjU1NTU2NTY3NyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiODg3NjU2NjU2NjU0NDUzNDUyMzQzNDUxMDEyMjM0NTU2Nzg2NjY1MzYzNjY2NTY2Nzg3OTk4NzY3NzY3NzY1NTY0NTYzNDUzNDUyMTAxMjM0NTY3Nzg2Njc2NDczNzY2NDU1Njc2ODk4NzY3NzY3NzY1NDU0NTYzNDUyMzQyMjEiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjAxMjM0NTY2NzU1NjU0NzI2NTUzNDQ1NjU3ODc2NTY2NTY2NTQzNDM0NTIzNDEyMzEyMjEwMTIzNDU1NjQ0NTQzNjE1NDQyMzQ1NTQ2NzY1NDU1NTY1NDM0MzM0NTM0NDIzMzIzMzIxMDEyMzQ0NTMzNDM0NTI1MzMxMjM0NDM1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI2NTQzNDQ0NTQzMjMyMjM0MzQzMzMyMzQ0MzIxMDEyMzM0MjIzMjQ0MzQyMjIzNDU1NDY3NjU0NDMzNDU0MzQzMzQ1NDMyMzQzMzQ0MzIyMTAxMjM0MzE0MzU1MzUzMzM0NTU0NDU2NjU0MzIyMzQ1NDU0NDU0MzIxNDU0NDU1NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzMyMTAxMjMzMjU0NDU0NTQ0MzQ1NDMzNDU1NDMyMTIzNDU0NTQ0NTQ0MzI1NTQ1NjY1NDQzMjEwMTIyMzU0NTQ1NDQ0MjM0MzIyMzQ0MzQzMjM0NTQzNDMzNDU0NDM1NDM1Njc2NTQzMzIxMDExNDQzNTU1MzMzMzQzMjEyMjMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjMyMzQzNDU2NTQ0NDQ1NjU1NDY1NDY3ODc2NTQ0MzIxMDI1NTQ2NDYyNDQxMjMzMjEzNDQzMzQzNDU0MzIzMjIzNDM0NDQzMjQ1NjU0MzIzMzIxMjA0MzI0NDQzMjIzNDU2NjU3ODc2NTU0NDU2NTQ0NDQ1NjM0MzIzNDIzMzIxIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIyMjEyMzQ1NDA1NDQ2MjY0NDU0MzQ1NjY3NjU0NTY3NjU0MzIxMzQ1NDU2NDM0NTY3NjU2Njc3Nzc4NjgwMTU1NDQ2NjQzMjM0NTU2NTQzNDU2NTQzMjEyMjM0MzQ1MzIzNDU2NTQ1NTY2NjY3NTcxMDQ0MzM1NTU1NDU2Nzc3NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTQ1NTQzMzIzMzQyMTIxMjMyMzQyMzQ0MzQ1NTQ1Njc2NjU0MDM0NTY2NTQzMjM0NDQzMjEyMzQzMjEyMzQzMjM0NTU1NDU1Njc3Njc2NjU0NTY1NzU0MzA1NDY2MzQzNDU1Njc2NTQ1NjY2NTQzMjMzNDUzNDUyMTIyMzMyMTIiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjM0NTY1NjQ1NDM0NTA0NDQzMjEyMTIyMzMyMzQ1NjY1NDMyMzM0NTQ1NjQzNDU2NzY1NTQ1NjU0NTM2NDM1NDQwNDQxMjM0NDM1NjU0MzQ1NjU0MzIzMjIzNDM0NTQzMjQ1NjU0MzIzNDQzNDI0MzI0NDQ0MDExMjM0NDM1NjU0IiksCgkJCUN1c3RvbSBTdHJpbmcoIjM0NTY1NDMyMzIyMzQzNDU0MzI0NTY1NDMyMzQ0MzQyNDMyNDQ0NDEwIikpOwoJCUdsb2JhbC5FbGV2YXRvcl9Ob2RlcyA9IEVtcHR5IEFycmF5OwoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAwKTsKCQkJR2xvYmFsLk9iamVjdGl2ZV9TcGF3bnMgPSBBcnJheShWZWN0b3IoLTUuNDk3LCAxMC45MjAsIDMzLjEyNCksIFZlY3RvcigtNS40OTcsIDEwLjkyMCwgLTMzLjEyNCksIFZlY3RvcigxMy42MjEsIDguMDM0LCA1OC45NzEpLAoJCQkJVmVjdG9yKDEzLjYyMSwgOC4wMzQsIC01OC45NzEpLCBWZWN0b3IoLTAuMzMxLCA3LjM4NCwgMjcuNTE4KSwgVmVjdG9yKC0wLjMzMSwgNy4zODQsIC0yNy41MTgpLCBWZWN0b3IoLTM0LjkzMywgOC45OTksIDApKTsKCQlFbHNlIElmKEdsb2JhbC5HYW1lbW9kZSA9PSAxKTsKCQkJR2xvYmFsLk9iamVjdGl2ZV9TcGF3bnMgPSBBcnJheShWZWN0b3IoNy40NzMsIDYuNjAzLCAwKSwgVmVjdG9yKDIyLjM1NCwgNSwgMCksIFZlY3RvcigtNS41NTksIDE0LCAwKSwgVmVjdG9yKDE1LjI0OCwgMTEsIDApLAoJCQkJVmVjdG9yKC0wLjg1MCwgMTMuNjM0LCAyNy45NTcpLCBWZWN0b3IoLTAuODUwLCAxMy42MzQsIC0yNy45NTcpLCBWZWN0b3IoMTAuOTIzLCAxMC4wMzUsIDUwLjU3MSksIFZlY3RvcigxMC45MjMsIDEwLjAzNSwKCQkJCS01MC41NzEpLCBWZWN0b3IoNi45NTEsIDguODc3LCAzNC4yODgpLCBWZWN0b3IoNi45NTEsIDguODc3LCAtMzQuMjg4KSwgVmVjdG9yKDIuNjI2LCAxNCwgMTIuMjk2KSwgVmVjdG9yKDIuNjI2LCAxNCwgLTEyLjI5NiksCgkJCQlWZWN0b3IoLTcuOTE4LCA5LjM0MSwgMzQuNTc4KSwgVmVjdG9yKC03LjkxOCwgOS4zNDEsIC0zNC41NzgpKTsKCQlFbmQ7CgkJR2xvYmFsLlBsYXllcl9TcGF3biA9IFZlY3RvcigyMC4zNjIsIDkuMDAyLCAwKTsKCQlHbG9iYWwuUGxheWVyX1NwYXduX0ZhY2luZyA9IFJpZ2h0OwoJCUdsb2JhbC5BYmlsaXR5X0J1eV9Mb2NhdGlvbiA9IFZlY3RvcigtMzEuMDA3LCA4Ljk5OSwgMCk7CgkJR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSA9IERpcmVjdGlvbiBGcm9tIEFuZ2xlcygxNDguMTg0LCAwKTsKCQlHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdID0gRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSksCgkJCVZlcnRpY2FsIEFuZ2xlIEZyb20gRGlyZWN0aW9uKEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl0pIC0gOTApOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0gPSBDcm9zcyBQcm9kdWN0KEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0sIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl0pOwoJCUdsb2JhbC5CdXlfTWVudV9DYW1fUG9zID0gVmVjdG9yKDMzLjc3NywgLTMuMDY0LCAtNDIuNDAzKTsKCQlHbG9iYWwuQnV5X01lbnVfUG9zID0gR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgLSA5ICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIDE0MiAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl07CgkJR2xvYmFsLk1heF9TcGVlZF9Cb251cyA9IDE4MDsKCX0KfQoKcnVsZSgiU3Vicm91dGluZSAoU2V0IE1hcCBDRyk6IFNldCBTcGF3bnMsIE5vZGVzLCBFZGdlcywgRGlzdGFuY2UgTWF0cml4LCBEcm9wLW9mZiBMb2NhdGlvbiwgQWJpbGl0eSBCdXkgTG9jYXRpb24iKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJU2V0X01hcF9DRzsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLlNwYXducyA9IEFycmF5KFZlY3RvcigyMDYuNDU0LCAwLjAwMSwgNzAuMjIwKSwgVmVjdG9yKDIyMS40MjcsIDguNjkyLCA2Ni45MzMpLCBWZWN0b3IoMTkzLjY1OCwgMC45OTgsIDY3LjQ0OSksIFZlY3RvcigKCQkJMjI5LjU0MywgMS45OTksIDg1Ljg3NSksIFZlY3RvcigyMjQuNTk5LCA1LjAwMSwgMTEwLjY4MyksIFZlY3RvcigxOTkuOTAyLCA4Ljg0MywgMTA5LjgyMyksIFZlY3RvcigxODMuNzI4LCA5LjAwMiwgMTA3LjgzNCksCgkJCVZlY3RvcigxNzYuNTg5LCA2Ljk5OSwgNjYuMDI0KSwgVmVjdG9yKDIxMi44MzYsIDksIDgxLjM5MCksIFZlY3RvcigyMjguOTg4LCAxMi45OTgsIDY1LjgyMCksIFZlY3RvcigxODYuODIwLCAwLjk5OSwgODcuODE0KSk7CgkJR2xvYmFsLlNwYXduc19OZWFyZXN0X05vZGVzX2J5X0luZGV4ID0gQXJyYXkoMCwgMjQsIDIsIDQwLCA0MiwgMzUsIDMzLCAxMCwgMjUsIDIxLCA3KTsKCQlHbG9iYWwuTm9kZXMgPSBBcnJheShWZWN0b3IoMjA2LjEzNywgMC4wNDEsIDgxLjU3MiksIFZlY3RvcigxOTcuNzUzLCAxLjAwMiwgODEuMjEzKSwgVmVjdG9yKDE4OS4yNDIsIDAuOTk4LCA2Ni43OTQpLCBWZWN0b3IoCgkJCTE4OC42MDgsIDIuOTk4LCA1Mi44MTMpLCBWZWN0b3IoMTk2LjQ1OCwgMTYuNDk4LCA0OC4wNjgpLCBWZWN0b3IoMTk2LjQ3NiwgMTYuNTAxLCA2OC43ODEpLCBWZWN0b3IoMTg2LjcwMywgMC45OTksIDgwLjk4MCksCgkJCVZlY3RvcigxODcuNTc5LCAwLjk5OSwgOTIuMzg4KSwgVmVjdG9yKDE3NC45MTYsIDUuMDAxLCA5Mi4zMzApLCBWZWN0b3IoMTc0LjI5NCwgNSwgODAuODgxKSwgVmVjdG9yKDE3My4zMDEsIDYuOTk5LCA2Ni4wNjUpLAoJCQlWZWN0b3IoMTczLjI2MiwgNi45OTgsIDU3LjAxMCksIFZlY3RvcigxODMuMDQwLCA3Ljk5OSwgNTYuMDY0KSwgVmVjdG9yKDE4My40OTEsIDcuOTk5LCA2My43NjYpLCBWZWN0b3IoMTkxLjAzNywgNy45OTksIDY0LjExOSksCgkJCVZlY3RvcigxOTkuMDYxLCA3Ljk5OCwgNDkuMTA0KSwgVmVjdG9yKDIwMS43NDIsIDcuOTk4LCA2MC45MTMpLCBWZWN0b3IoMjA5LjUxOCwgNy45OTgsIDYwLjc3NCksIFZlY3RvcigyMDguOTU4LCA4Ljk5OSwgNDMuNDc5KSwKCQkJVmVjdG9yKDIxOC41NDUsIDExLjk5OCwgNDUuNDU2KSwgVmVjdG9yKDIxNi42MTMsIDE0LjAwMSwgNjEuOTM4KSwgVmVjdG9yKDIyOS4yMzEsIDEzLjAwMSwgNjEuNzYzKSwgVmVjdG9yKDIyOS42NzcsIDkuMTg3LAoJCQk3My44OTUpLCBWZWN0b3IoMjIwLjk4NSwgNy45OTgsIDgxLjE0MCksIFZlY3RvcigyMjEuMzMwLCA5LjAwMiwgNjEuNjY0KSwgVmVjdG9yKDIwNi4xMDAsIDksIDgxLjA4NCksIFZlY3RvcigyMDYuMzEzLCA3Ljk5OSwKCQkJNzAuMDQ2KSwgVmVjdG9yKDE4My44MDIsIDUuOTk4LCA3NC4zMjUpLCBWZWN0b3IoMTg2LjkzMywgNiwgODAuOTQwKSwgVmVjdG9yKDE4NS4wMjUsIDYuMDAxLCA4Ny4xODApLCBWZWN0b3IoMTk0LjI2NSwgOC4wMDEsCgkJCTk2LjA2NyksIFZlY3RvcigyMDUuOTc0LCA5LjAyNSwgOTUuNjQwKSwgVmVjdG9yKDIxNi4xOTIsIDcuOTk5LCA5NS40NDEpLCBWZWN0b3IoMTgwLjQyMywgOC45OTgsIDEwNC4yMDYpLCBWZWN0b3IoMjA1Ljk3NCwKCQkJOC4wMjcsIDEwMy43NzgpLCBWZWN0b3IoMjA2LjE3MiwgNy45OTgsIDExMC40MDYpLCBWZWN0b3IoMTkzLjUzMywgOSwgMTEwLjQ4OCksIFZlY3RvcigyMTkuMDU0LCA1Ljk5OCwgMTAzLjk3MCksIFZlY3RvcigyMTkuMDcwLAoJCQkxLjk5OCwgOTAuNjU3KSwgVmVjdG9yKDIzNS40MzEsIDEuOTk4LCA5MC41MzkpLCBWZWN0b3IoMjI5LjQwOSwgMS45OTksIDkwLjA0NCksIFZlY3RvcigyMzcuOTY2LCAzLjk5OCwgMTA0LjYyOSksIFZlY3RvcigKCQkJMjI2Ljk2MiwgNC4yODQsIDExMi4wMzcpLCBWZWN0b3IoMjE5LjAwOCwgMC45OTgsIDgxLjMyNyksIFZlY3RvcigxNzcuOTIwLCAwLjAwMiwgNTEuMTQ3KSk7CgkJR2xvYmFsLk5vZGVzX0NvdW50ID0gQ291bnQgT2YoR2xvYmFsLk5vZGVzKTsKCQlHbG9iYWwuRWRnZXMgPSBBcnJheShBcnJheSgxLCA0MyksIEFycmF5KDAsIDIsIDYsIDQzKSwgQXJyYXkoMSwgMyksIEFycmF5KDIsIDQsIDQ0KSwgQXJyYXkoMywgNSwgMTUsIDE5KSwgQXJyYXkoNCwgMTQpLCBBcnJheSgxLAoJCQk3KSwgQXJyYXkoNiwgOCksIEFycmF5KDcsIDkpLCBBcnJheSg4LCAxMCwgMjcsIDI5KSwgQXJyYXkoOSwgMTEpLCBBcnJheSgxMCwgMTIpLCBBcnJheSgzLCAxMSwgMTMpLCBBcnJheSgxMiwgMTQsIDE2LCAyNywgMjkpLAoJCQlBcnJheSgxLCAzLCAxMywgMTUsIDE2KSwgQXJyYXkoMTQsIDE2KSwgQXJyYXkoMTMsIDE0LCAxNSwgMTcsIDE4LCAyNCwgMjYpLCBBcnJheSgxNiwgMTgsIDI0LCAyNiksIEFycmF5KDE2LCAxNywgMTkpLCBBcnJheSgxOCwKCQkJMjApLCBBcnJheSgxNywgMTksIDIxKSwgQXJyYXkoMjAsIDIyKSwgQXJyYXkoMjEsIDIzLCA0MCksIEFycmF5KDIyLCAyNCwgMjUsIDM4KSwgQXJyYXkoMTYsIDE3LCAyMyksIEFycmF5KDYsIDIzLCAyNiksIEFycmF5KDE2LAoJCQkxNywgMjUpLCBBcnJheSg5LCAxMywgMjgsIDI5KSwgQXJyYXkoMSwgMjcsIDI5KSwgQXJyYXkoOSwgMTMsIDI3LCAyOCwgMzApLCBBcnJheSgyOSwgMzEsIDMzLCAzNCwgMzYpLCBBcnJheSgzMCwgMzIsIDM0KSwgQXJyYXkoCgkJCTMxLCAzOCksIEFycmF5KDksIDMwLCAzNCksIEFycmF5KDMwLCAzMSwgMzMsIDM1LCAzNyksIEFycmF5KDM0LCAzNiksIEFycmF5KDMwLCAzNSksIEFycmF5KDM0LCAzOCwgNDEpLCBBcnJheSgzNywgMzksIDQwLCA0MyksCgkJCUFycmF5KDM4LCA0MCwgNDEpLCBBcnJheSgzOCwgMzkpLCBBcnJheSgzNywgMzksIDQyKSwgQXJyYXkoMzUsIDQxKSwgQXJyYXkoMCwgMSwgMzgpLCBBcnJheSgzKSk7CgkJR2xvYmFsLkRpc3RhbmNlX01hdHJpeCA9IEFycmF5KEN1c3RvbSBTdHJpbmcoCgkJCSIwMTIzNDUyMzQ1Njc4NzY1Njc2NTY3ODg3ODc2NzY1NTY1NDU2MzIzMzQ1MTQxMDEyMzQxMjM0NTY3NjU0NTY1NDU2Nzc2NzY1NjU1NTY1NDU2MzIzMzQ1MTMyMTAxMjMyMzQ1Njc2NTQzNDU0MzQ1NjY1NjU2NzY2Njc2NTY3NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzQ0NTYyMjMyMTAxMjM0NTY3NjU0MzIzNDMyMzQ1NTQ1NDU2NTY3ODc2Nzc1NDU1NjczMTQzMjEwMTQ1NjU2NTQzMjEyMzIxMjM0NDM0MzQ1NDU2NzY2NzY2NTY1Nzg0MjMyMzIxMDM0NTQ1NDMyMTIyMzMyMzQ1NDM0MzM0MzQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU2NTU2NTU0NTU2NzMzMjEyMzQ1MDEyMzQ1NjU2NTY3NjU2Nzg4Nzg3NDU0NTY3NjU2NjQzNDQ1NjI0MzIzNDU2MTAxMjM0NTQ1NjU2NjY3ODg3Njc2MzQzNDU2NTU2NTU0NTU2NzM1NDM0NTY3MjEwMTIzNDM0NTQ1NTY3ODc2IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1NjUyMzIzNDU0NDU0NTU2NjY3NDY0MzQ0NTYzMjEwMTIzMjM0MzQ0NTY3NjU0NTQxMjEyMzQzMzQzNDU2NjU2NDU1NDQzNDU0MzIxMDEyMzQ1NDU1NTY3NzY1NjUyMzIzNDU0NDU0NTY3NzY3NTQ1NDMyMzQ1NDMyMTAxMjM0MyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNDQ0NTY2NTQ1NDM0MzQ1NjU1NjU2Njc3Nzg1MzQzMjEyMzQ1NDMyMTAxMjMyMzMzNDU1NDM0MzIzMjM0NTQ0NTQ1NTY2Njc0MjMyMzIzNDM0MzIzMjEwMTIxMjIzNDU0MzIzMjEyMTIzNDMzNDM0NDU1NTYzMzIxMjEyMzIzNDMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjQzMjEwMTEyMjM0NTQzMjMyMjMyMzQ1NDQ1NDQzNDQ1NjIyMzIzMjM0MzQ1NDU0MzIxMDEyMjM0NTQzMjMyMzQzNDU2NTU2NTU0NTU2NzMzMzIzMjM0MzQ0MzQzMjExMTAxMTIzNDMyMTIxMjMyMzQ1NDQ1NDQzNDQ1NjMzNDM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzNDUzNDU0NTQzMjIyMTAxMjM0MzIxMjEzNDM0NTY1NTY1NDM0NDU2NDQ0MzQzNDU0NTU0NTQzMjIyMTEwMTIzNDMyMzIzNDM0NTY1NTY1NTQ1NTY3NDQ1NDU0NTY1NjY1NjU0MzMzMjIxMDEyMzQzNDM0NTQ1Njc2Njc2NjU1NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjc1NTU0NTQ1NjQ1NjU2NTQzMzMyMTIxMDEyMzIzMjQ1NDU2NzY2NzY1NDQzNTY1NTU1NjU2NzQ1NjY3NjU0NDQzMjMyMTAxMjMzMzU2NTY2NzY1Njc0MzMyNDU0NjQ0NTU2NzM0NTY3NjU0NDQzMzQzMjEwMTIyMzU2NTU1NjUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjQ1NjMyMjEzNDM2MzM0NDU2MjM0NTY1NDMzMzIyMzQzMjEwMTEyNDU0NDQ1NDM0NTIxMjIzNDI1NDM0MzQ1MzQ1NDU0MzIyMjExMjM0MzIxMDIyMzQzNDU2NTQ1NTMyMzM0NTM0MzIzNDU2MTIzNDU1NDMzMzIyMzQ0MzIxMjAxIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NTQ1NTY1NDU2MzIzMzQ1MzU0MzQzNDUyMzQ0NTQzMjIyMTEyMzQ0MzIyMTAzNDM0NTY1NTY1NDM0NDU2NDQzMjMzNDUzMzIxMjMyMTIzMjMzNDU2NTQzNDMwMTEyMzQzMzQzNDQ1NTU2MzQyMTIzNDUyMzMyMzQzMjM0MzQ0NSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjc2NTQ1NDEwMTIzNDMzNDM0MzQ0NTYyNDMyMzM0NTMzMjEyMzIxMjMyMzM0NTY1NDM0MzExMDEyMzIyMzIzNDU1NDUzNDQzNDQ1NjQ0MzIzNDMyMzQzNDQ1Njc2NTQ1NDIyMTAxMjExMjEyMzQ0MzQ0NTQ0NTU2NzU1NDM0NTQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjM0NTQ1NTY3ODc2NTY1MzMyMTAxMjEyMjIyMzMzNDM2MzM0NTY3NDU1NDU2NTQ1NjU2Njc4OTg3Njc2NDQzMjEwMzIzMzIxMjIzNDI2NTQ1NTY3NDMyMTIzNDM0NTQ1NTY3ODc2NTY1MjMyMTIzMDEyMjIzNDQzNDQ2NDQ1NTY3IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1NDMyMzQ0MzQ1NDU1Njc4NzY1NjUzMzIxMTIxMDEyMTIzMzIzMzY1NTY2Nzg2NTQzNDU1NDU2NTY2Nzg5ODc2NzY0NDMyMjMyMTAxMjM0NDM0NDc1NDU1Njc1NTQzNDU0MzQ1NDU1Njc4NzY1NjUzMzIxMjMyMjEwMzQ1NTQ1NSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjMzNDU2NzQ1NDM0NTU0NTY1NjY3ODk4NzY3NjQ0MzIyMzIxMjMwMTIyMTIyNjIyMzQ1NjM0NTQ1NjY1NjY2Nzc2Nzg5ODc4NzU1NDMzNDMyMzQxMDExMjMxNTMzNDU2NzQ1NjU2Nzc2Nzc3ODg3ODkhOTg5ODY2NTQ0NTQzMzQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjIxMDExMjI2MzM0NTY3NDU2NTY3NzY3Nzc4ODc4OSE5ODk4NjY1NDQ1NDM0NTIxMTAyMzI2NDQ1Njc4NTY1NDU2NjU2NzY3Nzg5ITk4Nzg3NTU0MzM0MzIyMzEyMTIwMTM3NTU2Nzg5NjY1NDU2NjU2NzY3Nzg5ITk4Nzg3NTU0IiksCgkJCUN1c3RvbSBTdHJpbmcoIjMzNDMyMTIyMzIzMTA0ODExMjM0NTIzNDU2Nzc2NjU2NzY1Njc4ODc4NzY2NTQ0NTQzNDUyMTIyMzQwNDQzMjEyMzQ1Njc4NzY1NDM0NTQzNDU2NjU2NTY3Njc4OTg3ODg2NTY2Nzg0MCIpKTsKCQlHbG9iYWwuRWxldmF0b3JfTm9kZXMgPSBFbXB0eSBBcnJheTsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMCk7CgkJCUdsb2JhbC5PYmplY3RpdmVfU3Bhd25zID0gQXJyYXkoVmVjdG9yKDIwNi40OTAsIDAuMDM4LCA4My42MDIpLCBWZWN0b3IoMTg2LjkxMiwgMC45OTgsIDcxLjI0MyksIFZlY3RvcigxNzguMjg2LCAtMC4wMDIsIDUxLjcxOSksCgkJCQlWZWN0b3IoMjA2LjI1OSwgOS4wMDEsIDgzLjU2MyksIFZlY3RvcigyMjkuMjI3LCA5LjAwMiwgNzguMjA0KSwgVmVjdG9yKDE5Ni45NTAsIDE2LjQ5OSwgNjkuNDA2KSwgVmVjdG9yKDIxNi43NTQsIDE0LCA2Ni41MDcpKTsKCQlFbHNlIElmKEdsb2JhbC5HYW1lbW9kZSA9PSAxKTsKCQkJR2xvYmFsLk9iamVjdGl2ZV9TcGF3bnMgPSBBcnJheShWZWN0b3IoMjA2LjA5NCwgMiwgNzcuNTk3KSwgVmVjdG9yKDIzMi44ODYsIDQsIDkzLjg3NyksIFZlY3RvcigyMzAuNDE2LCA2LCAxMDcuOTE4KSwgVmVjdG9yKAoJCQkJMTkzLjMwNywgMTEsIDExMy41NTEpLCBWZWN0b3IoMTgwLjA4OSwgMTEsIDEwMS44MjMpLCBWZWN0b3IoMjA1LjkxNSwgMTEuMDQzLCA5My45NjApLCBWZWN0b3IoMTY4Ljc5OCwgNywgODEuMTEyKSwgVmVjdG9yKAoJCQkJMTczLjQ4MywgOSwgNTcuMjkyKSwgVmVjdG9yKDE4OS40NTQsIDUsIDU2LjMwMSksIFZlY3RvcigxOTYuMjk1LCAxOC41MDAsIDY4Ljk4NSksIFZlY3RvcigyMDYuNDg1LCAxMCwgNTEuNTkzKSwgVmVjdG9yKDIwNi4yNTksCgkJCQkxMC45OTksIDgxLjA3OSksIFZlY3RvcigyMTguNTk0LCAxMCwgODUuMzM5KSwgVmVjdG9yKDIyNC4wNDMsIDMsIDc4LjI0NyksIFZlY3RvcigxODIuNjI4LCAzLCA4My4wODApKTsKCQlFbmQ7CgkJR2xvYmFsLlBsYXllcl9TcGF3biA9IFZlY3RvcigxOTMuNDAxLCA3Ljk5OCwgMTAxLjMxNik7CgkJR2xvYmFsLlBsYXllcl9TcGF3bl9GYWNpbmcgPSBCYWNrd2FyZDsKCQlHbG9iYWwuQWJpbGl0eV9CdXlfTG9jYXRpb24gPSBWZWN0b3IoMTgyLjU4NywgOC45OTgsIDEwNS4yMjkpOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl0gPSBGb3J3YXJkOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gPSBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdKSwKCQkJVmVydGljYWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSkgLSA5MCk7CgkJR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSA9IENyb3NzIFByb2R1Y3QoR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSwgR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSk7CgkJR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgPSA5MDAgKiBVcDsKCQlHbG9iYWwuQnV5X01lbnVfUG9zID0gR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgLSA5ICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIDE0MiAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl07CgkJR2xvYmFsLk1heF9TcGVlZF9Cb251cyA9IDIwMDsKCX0KfQoKcnVsZSgiU3Vicm91dGluZSAoU2V0IE1hcCBQQSk6IFNldCBTcGF3bnMsIE5vZGVzLCBFZGdlcywgRGlzdGFuY2UgTWF0cml4LCBEcm9wLW9mZiBMb2NhdGlvbiwgQWJpbGl0eSBCdXkgTG9jYXRpb24iKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJU2V0X01hcF9QQTsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLlNwYXducyA9IEFycmF5KFZlY3RvcigtOTUuMzYxLCAxMywgLTEwNC44MTQpLCBWZWN0b3IoLTExNC4yMDgsIDEzLCAtOTUuNDc5KSwgVmVjdG9yKC0xMTQuMjYxLCAxMCwgLTUyLjgxNiksIFZlY3RvcigtMTE2Ljk4OCwKCQkJMTEuMDE1LCAtMzcuMDY3KSwgVmVjdG9yKC04NC43OTEsIDkuOTc1LCAtMjkuNDA5KSwgVmVjdG9yKC00OS4xOTYsIDguODEzLCAtNTMuNjY5KSwgVmVjdG9yKC02Ny41NTAsIDExLCAtNjUuNjk2KSwgVmVjdG9yKAoJCQktNzMuNDkyLCAxMywgLTgxLjEzOCksIFZlY3RvcigtODEuNTEzLCAxMiwgLTc1LjYyMiksIFZlY3RvcigtOTguNTg3LCAxMiwgLTY3LjU3MSksIFZlY3RvcigtNjAuNDAzLCAxNSwgLTkzLjk5MykpOwoJCUdsb2JhbC5TcGF3bnNfTmVhcmVzdF9Ob2Rlc19ieV9JbmRleCA9IEFycmF5KDEyLCAxNSwgNDQsIDQ3LCAyNSwgMiwgMzIsIDYsIDM3LCAzNywgOCk7CgkJR2xvYmFsLk5vZGVzID0gQXJyYXkoVmVjdG9yKC02NS43NDgsIDEwLjAwMSwgLTM2LjM0MSksIFZlY3RvcigtNTQuNDI0LCA5LjU5MSwgLTQxLjk1MSksIFZlY3RvcigtNDMuODUyLCA5LjE2OSwgLTUyLjU4OCksIFZlY3RvcigKCQkJLTU1LjA3NywgMTAuODQ5LCAtNjMuODM4KSwgVmVjdG9yKC00OS45MTksIDExLjAzMSwgLTY2LjIzMyksIFZlY3RvcigtNTguMzc5LCAxMSwgLTcwLjAwNCksIFZlY3RvcigtNjIuOTc0LCAxMywgLTc3Ljk1MiksCgkJCVZlY3RvcigtNTcuODc3LCAxMywgLTgyLjY3MiksIFZlY3RvcigtNjIuNjUzLCAxNSwgLTkzLjAwMSksIFZlY3RvcigtNjguNzU3LCAxNSwgLTg5LjMwMyksIFZlY3RvcigtNzYuMjQ3LCAxNSwgLTkzLjc3MCksIFZlY3RvcigKCQkJLTgxLjMzMywgMTMsIC0xMDMuOTU3KSwgVmVjdG9yKC04OS4wNjgsIDEzLCAtMTA3LjE2OSksIFZlY3RvcigtMTA0LjA4OCwgMTUsIC0xMDAuNzEwKSwgVmVjdG9yKC0xMDAuMTAyLCAxNSwgLTkyLjY1NyksIFZlY3RvcigKCQkJLTExOS45NTgsIDEzLCAtOTIuNzgyKSwgVmVjdG9yKC0xMTYuMjEwLCAxMywgLTg2LjAzMSksIFZlY3RvcigtMTIxLjg2NCwgMTMsIC04My44NjgpLCBWZWN0b3IoLTExNS4zOTEsIDEwLCAtNzEuNzg1KSwgVmVjdG9yKAoJCQktMTE1LjEzMywgMTAsIC02Mi4zMTEpLCBWZWN0b3IoLTEyNC45OTIsIDEwLCAtNTguMDQyKSwgVmVjdG9yKC0xMzAuNDAxLCAxMCwgLTY3LjEyNSksIFZlY3RvcigtMTA4LjEzMCwgMTAuNzc5LCAtMzQuODU5KSwKCQkJVmVjdG9yKC0xMDMuNDM2LCAxMC43NjUsIC0zNi45MzEpLCBWZWN0b3IoLTk1Ljc0NiwgMTAuOTU5LCAtNDEuOTA5KSwgVmVjdG9yKC04OC42NzQsIDkuNzg3LCAtMjcuNjI4KSwgVmVjdG9yKC03OS4zMzksIDEwLjE1NiwKCQkJLTI1LjY4OCksIFZlY3RvcigtODMuMDg1LCA5LjkxNSwgLTM3LjMxMyksIFZlY3RvcigtNzcuMDA0LCA5Ljg1NSwgLTQ4LjExMSksIFZlY3RvcigtNjkuMTk5LCA5Ljg1NSwgLTQ1Ljc1MSksIFZlY3RvcigtNjkuMDM3LAoJCQkxMC44NDIsIC01Ni42OTMpLCBWZWN0b3IoLTYxLjc3MSwgMTAuODQyLCAtNjAuMDYwKSwgVmVjdG9yKC02NS40NDUsIDExLCAtNjYuNjQ1KSwgVmVjdG9yKC0xMDguOTY0LCAxMiwgLTQ3Ljc4NSksIFZlY3RvcigKCQkJLTEwMC41NTksIDEyLCAtNTAuODcyKSwgVmVjdG9yKC0xMDYuODM1LCAxMCwgLTYxLjI4OCksIFZlY3RvcigtMTEwLjA4NCwgMTAsIC02OC40NzEpLCBWZWN0b3IoLTkzLjEzOSwgMTIsIC03Ni44NDkpLCBWZWN0b3IoCgkJCS0xMDEuNjAzLCAxMi4xMDAsIC04Mi4zNDkpLCBWZWN0b3IoLTEwOC44NzksIDEyLCAtODkuMTk3KSwgVmVjdG9yKC04OC45NDEsIDEyLCAtODguNDk4KSwgVmVjdG9yKC05Mi4zMTcsIDEyLCAtOTYuNzc5KSwgVmVjdG9yKAoJCQktODUuODk4LCAxMiwgLTYzLjY4NyksIFZlY3RvcigtOTguMjA4LCAxMiwgLTU3LjQ0OCksIFZlY3RvcigtMTEzLjMwMCwgMTAsIC01My4xNjIpLCBWZWN0b3IoLTEyMC44NTIsIDEwLCAtNjcuMzI0KSwgVmVjdG9yKAoJCQktNTUuMDI5LCAxMywgLTg1LjcxOCksIFZlY3RvcigtMTEzLjk3NywgMTAuOTEzLCAtMzUuNDIyKSk7CgkJR2xvYmFsLk5vZGVzX0NvdW50ID0gQ291bnQgT2YoR2xvYmFsLk5vZGVzKTsKCQlHbG9iYWwuRWRnZXMgPSBBcnJheShBcnJheSgxLCAyLCAyNSwgMjYsIDI3LCAyOSksIEFycmF5KDAsIDIsIDMpLCBBcnJheSgwLCAxLCAzKSwgQXJyYXkoMSwgMiwgNCwgNSwgNiwgMzAsIDMxKSwgQXJyYXkoMyksIEFycmF5KDMsCgkJCTYsIDMyKSwgQXJyYXkoMywgNSwgNywgNDIpLCBBcnJheSg2LCA4LCA0NiksIEFycmF5KDcsIDksIDEwKSwgQXJyYXkoNiwgOCwgMTAsIDM3KSwgQXJyYXkoOCwgOSwgMTEpLCBBcnJheSgxMCwgMTIsIDQwLCA0MSksCgkJCUFycmF5KDExLCAxMywgMTUpLCBBcnJheSgxMiwgMTQsIDE1KSwgQXJyYXkoMTMsIDM4LCAzOSwgNDAsIDQxKSwgQXJyYXkoMTIsIDEzLCAxNiwgMTcpLCBBcnJheSgxNSwgMTcsIDM5KSwgQXJyYXkoMTUsIDE2LCAxOCwKCQkJMzgpLCBBcnJheSgxNywgMTksIDM1LCAzNiwgMzgsIDQ1KSwgQXJyYXkoMTgsIDIwLCAzNSksIEFycmF5KDE5LCAyMSwgMjIsIDQ3KSwgQXJyYXkoMjApLCBBcnJheSgyMCwgMjMsIDI0LCA0NyksIEFycmF5KDIyLCAyNCwKCQkJMzMpLCBBcnJheSgyMiwgMjMsIDI1LCAyOCksIEFycmF5KDAsIDI0LCAyNiksIEFycmF5KDAsIDI1LCAyNyksIEFycmF5KDAsIDI2LCAyOCksIEFycmF5KDI0LCAyNywgMjksIDMwLCA0MiksIEFycmF5KDAsIDI4LCAzMCksCgkJCUFycmF5KDMsIDI4LCAyOSwgMzEpLCBBcnJheSgzLCAzMCwgMzIpLCBBcnJheSg1LCAzMSksIEFycmF5KDIzLCAzNCksIEFycmF5KDMzLCAzNSwgNDMpLCBBcnJheSgxOCwgMTksIDM0LCAzNiwgNDQpLCBBcnJheSgxOCwKCQkJMzUsIDM3LCA0NSksIEFycmF5KDM2LCAzOCwgNDAsIDQyKSwgQXJyYXkoMTcsIDE4LCAzNywgMzksIDQwLCA0MSksIEFycmF5KDE2LCAzOCksIEFycmF5KDExLCAzNywgMzgsIDQxKSwgQXJyYXkoMTEsIDM4LCA0MCksCgkJCUFycmF5KDYsIDI4LCAzNywgNDMpLCBBcnJheSgzNCwgNDIpLCBBcnJheSgzNSksIEFycmF5KDE4LCAzNiksIEFycmF5KDcpLCBBcnJheSgyMCwgMjIpKTsKCQlHbG9iYWwuRGlzdGFuY2VfTWF0cml4ID0gQXJyYXkoQ3VzdG9tIFN0cmluZygKCQkJIjAxMTIzMzM0NTY2Njc4OTc3NjY1NDUzMzIxMTEyMTIzNDQ1NjU0NTY1NjM0NzY1NDEwMTEyMjIzNDU1Njc4OTc3NjY2NTY0NDMyMjIzMjIyMzU1NjU0NTY1NjM0NzY0NTExMDEyMjIzNDU1Njc4OTc3NjY2NTY0NDMyMjIzMjIyIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzNTU2NTQ1NjU2MzQ3NjQ1MjExMDExMTIzNDQ1Njc4NjY1NTY1NjQ0MzMzMzIyMTEyNTQ1NDM0NTQ1MjM2NTM1MzIyMTAyMjM0NTU2Nzg5Nzc2Njc2NzU1NDQ0NDMzMjIzNjU2NTQ1NjU2MzQ3NjQ2MzIyMTIwMTIzNDQ1Njc4NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjU1NjY3NTU0NDQ0MzMyMjE1NDU0MzQ1NDUyMzY1MzYzMjIxMjEwMTIzMzQ1Njc1NTQ0NTU2NDQzNDQzMjMyMjI0MzQzMjM0MzQxMjU0MjU0MzMyMzIxMDEyMjM0NTY1NjU1NjY3NTU0NTU0MzQzMzM1NDU0MzQ1NDQyMzY1MTYiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU0NDM0MzIxMDExMjM0NTQ1NDQ1Njc2NjU2NjU0NTQ0NDY1NDMyMzQzMzM0NTQyNzQzMzIzMjEyMTAxMjM0NTQ0MzM0NTY1NTQ1NTQzNDMzMzU0MzIxMjMyMzIzNDMzNjU0NDM0MzIyMTEwMTIzNDM0NDQ1Njc2NjU2NjU0NTQ0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NjU0MzIzNDIyMzQ1NDM3NjU1NDU0MzMyMjEwMTIzMjMzMzQ1NjY2NTY2NTQ1NTU1NjU0MzIyMzExMzQ1NDQ2NzY2NTY1NDQzMzIxMDEyMTIyMzQ1NjY3Njc3NjU2NjY2NjU0NDMzMzIyNDU1NDU2Nzc3Njc2NTU0NDMyMTAxMSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMjIzNDU2Njc2Nzc2NTY2Nzc2NTQ0MzIyMjI0NTU0NjY2NjY1NjU0NTQ0MzIyMTAyMjIyMzQ1NTY1NjY1NDU1NjY1NDMzMjExMTEzNDQzNjU3Nzc2NzY1NTQ0MzIxMTIwMTEyMzQ1NTY2Nzc2NTY2Nzc1NDMzMzIyMzM0NTQzNjUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjc3NzY3NjU2NTU0MzIyMzEwMTIzNDU1NjY3NzY1NjY3NzU0MzMzMjEzMzQ1NDM3NTY2NjU2NTQ1NTU0MzIyMzExMDEyMzQ0NTU2NjU0NTU2NjQzMjIyMTIyMjM0MzI2NDY2NjU2NTQ1NTU0MzMzNDIyMTAxMjMzNDQ1NjU0NTU2IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI2MzIxMTIxMjIyMzMyMTYzNTY2Njc2NTY2NjU0NDQ1MzMyMTAxMjIzMzQ1NTQ1NTY3MzIxMjMyMzMzNDMyMjcyNDU1NTY2NTY3NzY1NTU2NDQzMjEwMTEyMjM0NDM0NDU2MzMyMzQzNDQ0NDQzMzcxNTY2Njc3Njc4ODc2NjY3NSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTQzMjEwMjMzNDU1NDU1Njc0NDM0NTQ1NTU1NTQ0ODIzNDQ0NTU0NTY3NzY2Njc1NTQzMjEyMDExMjMzMjMzNDUyMzM0NDQ1NTUzNDQ0NjEzNDQ0NTU0NTY3NzY3Nzg2NjU0MzIzMTAxMjMzMjMzNDUxMjM0NDU2NTYzMzQ1NjIiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjIzMzM0NDM0NTY2NTY3ODY2NTQzMjMxMTAxMjIxMjIzNDIzNDQzNDU0NTIzNTU1MjEyMjM0NDQ1Njc3Njc4OTc3NjU0MzQyMjEwMTIyMjM0NTM0NTU0NTY1NjM0NjY2MzEyMjM0NDQ1Njc3Njc4OTc3NjY1NDUzMzIxMDEyMjM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1NDU2NTQ1NjU2MzQ3NjY0MTIyMzQ0MzQ1NjY1Njc4NjY1NTU0NTMzMjIxMDEyMjM0NDQ1NDM0NTQ1MjM2NTU0MjMzMjMzMjM0NTU0NTY3NTU0NDQzNDIyMTIyMTAxMTIzMzM0MzIzNDM0MTI1NDQzMTIyMjMzMzQ1NjY1Njc4NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjU1NTQ1MzMyMjIyMTAxMjM0NDU0MzQ1NDUyMzY1NTQyMjIxMjIyMzQ1NTU2Nzg2NjU1NTQ1MzMyMzMyMTEwMTI0NDU0MzQ1NDUyMzY1NDQzMjIxMjIyMzQ1NTY3ODk3NzY2NjU2NDQzNDQzMjIxMDE1NTY1NDU2NTYzNDc2NDUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjQzMzIzMTIzNDU1Njc4OTc3NjY3Njc1NTQ1NTQzMzIxMDY1NjU0NTY1NjM0NzY0NjQ1NTU2NTQ1Njc3NjY2NzU1NDMzMzQyMTIzNDQzNDQ1NjAxMjM0NDU1NTMyMzQ2MzU1NTQ1NDM0NTY2NTU1NjQ0MzIyMzQzMjM0NTQzNDQ1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1MTAxMjMzNDQ0MjEyMzU0NjY2NTY1NDU2NjU0NDQ1MzMyMTEyMzMzNDU2NTQ1NTY2MjEwMTIyMzMzMzIxMjYzNTU1NDU0MzQ1NTQzNDQ1MzMyMTIzNDQ0NDU1NDM0NDU1MzIxMDEyMzIzMjMyMTU0NDQ0MzQzMjM0NDMyMzQ1MyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzIyMzQ1NDQzNDQzMjMzNDQ0MzIxMDEyMTIxMjMyNDU1NTU0NTQzNDQ0MzIzMzQyMjExMjM0NDU0NTU0MzQ0NTU0MzIyMTAxMTEyMzMyNTQ2NjY1NjU0NTU1NDMzMzQyMTIyMzQ1NTY1NjY1NDU1NjY1NDMzMjEwMjIzNDQzNjUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU1NTQ1NDM0MzMyMTIzNDMzMjIzNDU1NTQ1NTQzNDQ1NTU0MzIxMTIwMTIzNDM1NTY2NjU2NTQ0MzMyMTIzNDMzMjIzNDU1NjU2NjU0NTU2NjU0MzMyMTIxMDM0NDM1NTMzMzIzMjEyMzQ0MzQ1NjQ0MzM0NDUzMzIzMzIxMjIzIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzMzIzMjEyMzIzMDE0MzM0NDQ0MzQzMjM0NTU0NTY3NTU0MzM0NTQzMzQ0MzIzMzQ0MjEyMzIzNDM0MTAzNDQ1Nzc3Njc2NTY3NzY1NTU2NDQzMjIzNDQ0NTY3NjU2Njc3MzIxMjMzNDQ0NDMwMzc0NjY2NTY1NDU2NjU0NDQ1MyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzIxMjM0NDU1NjY1NDU1NjY0MzIxMjIzMzMzNDMwNjQ1NDQzNDMyMTIzMzQ1Njc2NzY2Nzc4NjY1NjY1NDU0NDQ2NTY1NDU2NTUzNDc2MDc0NTU1NjY1Njc4NzY2Njc1NTQzMjEyMTIyMzQ0MzQ0NTYzNDM0NTQ1NTU0NTQ0NzAiKSk7CgkJR2xvYmFsLkVsZXZhdG9yX05vZGVzID0gRW1wdHkgQXJyYXk7CgkJSWYoR2xvYmFsLkdhbWVtb2RlID09IDApOwoJCQlHbG9iYWwuT2JqZWN0aXZlX1NwYXducyA9IEFycmF5KFZlY3RvcigtMTI2LjU5MiwgMTAsIC02Mi45NDgpLCBWZWN0b3IoLTg3LjMzMSwgOS45NzYsIC0xNy4xMTkpLCBWZWN0b3IoLTczLjM4MiwgMTAuMDE3LCAtMzguMTQwKSwKCQkJCVZlY3RvcigtNDQuODY4LCA5LjE5MSwgLTUxLjI3NCksIFZlY3RvcigtNDguOTQ1LCAxMS4wMzEsIC02My40MTkpLCBWZWN0b3IoLTUyLjc2MiwgMTMsIC03OS4zMTYpLCBWZWN0b3IoLTEwOS44OTYsIDExLjAxNSwKCQkJCS0zMC44NzApKTsKCQlFbHNlIElmKEdsb2JhbC5HYW1lbW9kZSA9PSAxKTsKCQkJR2xvYmFsLk9iamVjdGl2ZV9TcGF3bnMgPSBBcnJheShWZWN0b3IoLTEwMC4xMzgsIDE3LCAtOTIuNjA1KSwgVmVjdG9yKC05My4wMTAsIDE1LCAtMTA1LjYwNCksIFZlY3RvcigtMTIxLjI2MiwgMTUsIC04Ni42MjUpLAoJCQkJVmVjdG9yKC0xMTguMTQwLCAxMiwgLTcwLjUwOSksIFZlY3RvcigtOTMuMTg1LCAxNCwgLTc2LjgwOCksIFZlY3RvcigtMTIyLjgwNiwgMTEuNzkyLCAtNTcuNjg5KSwgVmVjdG9yKC05OS4xOTksIDEyLjc3MywKCQkJCS0zNy4yNjApLCBWZWN0b3IoLTg2LjAzNiwgMTQsIC02My41ODYpLCBWZWN0b3IoLTcxLjY1OCwgMTEuODU1LCAtMzUuNDY0KSwgVmVjdG9yKC03Ny45NTYsIDExLjg1NSwgLTQ4LjYxNiksIFZlY3RvcigtNTAuMDI1LAoJCQkJMTEuMTA5LCAtNTAuMDkyKSwgVmVjdG9yKC03MC4zOTgsIDE1LCAtODAuNzk0KSwgVmVjdG9yKC03OC44MDksIDE3LCAtODcuNzMyKSwgVmVjdG9yKC04NS45NzIsIDExLjcwNCwgLTIzLjI5MSkpOwoJCUVuZDsKCQlHbG9iYWwuUGxheWVyX1NwYXduID0gVmVjdG9yKC05OC4wOTEsIDEyLCAtODguNjU0KTsKCQlHbG9iYWwuUGxheWVyX1NwYXduX0ZhY2luZyA9IFZlY3RvcigxLCAwLCAyKTsKCQlHbG9iYWwuQWJpbGl0eV9CdXlfTG9jYXRpb24gPSBWZWN0b3IoLTExMy40NjMsIDEwLCAtNTIuODI2KTsKCQlHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdID0gRm9yd2FyZDsKCQlHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdID0gRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSksCgkJCVZlcnRpY2FsIEFuZ2xlIEZyb20gRGlyZWN0aW9uKEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl0pIC0gOTApOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0gPSBDcm9zcyBQcm9kdWN0KEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0sIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl0pOwoJCUdsb2JhbC5CdXlfTWVudV9DYW1fUG9zID0gOTAwICogVXA7CgkJR2xvYmFsLkJ1eV9NZW51X1BvcyA9IEdsb2JhbC5CdXlfTWVudV9DYW1fUG9zIC0gOSAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyAxNDIgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdOwoJCUdsb2JhbC5NYXhfU3BlZWRfQm9udXMgPSAxNjA7Cgl9Cn0KCnJ1bGUoIlN1YnJvdXRpbmUgKFNldCBNYXAgSFcpOiBTZXQgU3Bhd25zLCBOb2RlcywgRWRnZXMsIERpc3RhbmNlIE1hdHJpeCwgRHJvcC1vZmYgTG9jYXRpb24sIEFiaWxpdHkgQnV5IExvY2F0aW9uIikKewoJZXZlbnQKCXsKCQlTdWJyb3V0aW5lOwoJCVNldF9NYXBfSFc7Cgl9CgoJYWN0aW9ucwoJewoJCUdsb2JhbC5TcGF3bnMgPSBBcnJheShWZWN0b3IoMzIuMTYyLCAxLjg1OCwgLTc2LjIyMyksIFZlY3Rvcig3LjMxMSwgMS43NTAsIC05Ljc3NiksIFZlY3RvcigzLjQzNCwgMS43NDksIC0zMy4xOTMpLCBWZWN0b3IoOS42ODMsCgkJCTEwLjc1MCwgLTM0LjIwMCksIFZlY3Rvcig5LjAzMSwgMTEuMDEwLCAtNjMuODk1KSwgVmVjdG9yKC0xOS42MTksIDUuNzUwLCAtNTMuOTYwKSwgVmVjdG9yKDQwLjg2MiwgMi43NTEsIC01Mi44MDQpLCBWZWN0b3IoCgkJCTUuNTUxLCAyLCAtNTguMTQ2KSwgVmVjdG9yKDE5LjQ0NywgMS43NDgsIC05Mi40NTApLCBWZWN0b3IoMzAuNzQyLCAxLjc1MCwgLTI5LjExMikpOwoJCUdsb2JhbC5TcGF3bnNfTmVhcmVzdF9Ob2Rlc19ieV9JbmRleCA9IEFycmF5KDM4LCAxMiwgNSwgMywgNTcsIDI5LCA1MCwgMTksIDQxLCA1Myk7CgkJR2xvYmFsLk5vZGVzID0gQXJyYXkoVmVjdG9yKDcuMjE2LCAxLjYwNCwgLTQ3LjA5NiksIFZlY3RvcigyMS44NjYsIDEuNjA0LCAtNTEuNTkwKSwgVmVjdG9yKDI0LjcwNCwgMS42MjUsIC0zNi41OTEpLCBWZWN0b3IoMTMuNjMwLAoJCQkxMC44MTEsIC0zMS44MzgpLCBWZWN0b3IoMTEuNDk4LCAxLjc0NiwgLTI1LjI3OCksIFZlY3Rvcig3LjI1MiwgMS43NTAsIC0zMS42OTYpLCBWZWN0b3IoNC4wMDUsIDMuNzMxLCAtMjIuNjYxKSwgVmVjdG9yKDIuNzQxLAoJCQk1LjczMSwgLTI3LjgyMSksIFZlY3Rvcig1Ljg4MSwgNS44MjUsIC0yNi41NDYpLCBWZWN0b3IoMS41NjcsIDUuNzUwLCAtMzUuODc5KSwgVmVjdG9yKDEyLjkyNSwgMS42MDgsIC0xOS4zMDEpLCBWZWN0b3IoMTQuOTg1LAoJCQkxLjc0OSwgLTExLjEzMiksIFZlY3Rvcig1LjMxMCwgMS43NDksIC00LjIzMiksIFZlY3RvcigtNy40NjgsIDEuNjA0LCAtMTEuMTkzKSwgVmVjdG9yKC0zLjAxOCwgMS42MDQsIC0xNy40MDgpLCBWZWN0b3IoLTYuMzcwLAoJCQkxLjYwNCwgLTMzLjQ2NyksIFZlY3RvcigtMC41MjIsIDEuNjA0LCAtNDEuNDEwKSwgVmVjdG9yKC0xLjUxMiwgMS42MDQsIC00OC44MTUpLCBWZWN0b3IoLTIuNjcxLCAyLCAtNTYuMjQwKSwgVmVjdG9yKDExLjEyMSwKCQkJMi4wMDUsIC01OC44NTQpLCBWZWN0b3IoLTQuOTQxLCAzLjk5OSwgLTY0LjM3OSksIFZlY3RvcigxMC45MTgsIDYuMDAxLCAtNjguNDc2KSwgVmVjdG9yKDEzLjQyMywgNi4wMDEsIC02MC40NDcpLCBWZWN0b3IoMTAuMjYwLAoJCQk2LjAwMSwgLTU1LjI5MiksIFZlY3RvcigxLjY5NywgNi4wMDEsIC01My4xNDYpLCBWZWN0b3IoLTguOTIwLCAxLjcyOCwgLTUyLjE4NiksIFZlY3RvcigtNi41MTgsIDEwLjI2OCwgLTU4Ljg2MyksIFZlY3RvcigtOS4zMDksCgkJCTEuNzI5LCAtNjcuNTY0KSwgVmVjdG9yKC0xNi4xOTAsIDMuNzUwLCAtNDQuMTYzKSwgVmVjdG9yKC0yNS43OTMsIDUuNzUxLCAtNDYuMTM1KSwgVmVjdG9yKC0yMC4xODMsIDUuNzUwLCAtNjIuMTUxKSwgVmVjdG9yKAoJCQktMTYuMDI1LCA1Ljc1MCwgLTYzLjQ3MiksIFZlY3RvcigtMTguOTg5LCAxLjcyOSwgLTc1Ljk5MyksIFZlY3Rvcig0LjIzNiwgMS42MDQsIC04MC4yMzEpLCBWZWN0b3IoNi42MTcsIDIsIC02OS4wNjQpLCBWZWN0b3IoCgkJCTAuOTA4LCAyLjAwMSwgLTYwLjkwOCksIFZlY3RvcigxNi4wMzgsIDEuNjA0LCAtNzIuMjA3KSwgVmVjdG9yKDIzLjQwMCwgMS44OTYsIC03NS41NzEpLCBWZWN0b3IoMzAuMjYyLCAxLjg1OCwgLTc3LjU0MCksIFZlY3RvcigKCQkJMjYuMDE3LCAxLjkxMywgLTgwLjAxOSksIFZlY3RvcigxNy45NjEsIDEuNjA3LCAtODMuNTEzKSwgVmVjdG9yKDI2Ljg3NywgMS42MTcsIC04OC45MzkpLCBWZWN0b3IoMzUuMDEyLCAxLjYwNCwgLTg0LjY4OSksCgkJCVZlY3Rvcig0MC40NzQsIDEuNjA0LCAtNzAuOTc5KSwgVmVjdG9yKDM0LjQxNiwgMS42MDQsIC02OC42NDEpLCBWZWN0b3IoMjAuODA4LCAxLjYwNCwgLTYyLjgxNSksIFZlY3RvcigzNi4yNTksIDIuNzUwLCAtNjEuODI5KSwKCQkJVmVjdG9yKDMxLjM0OSwgMi43NTAsIC02MC44NTgpLCBWZWN0b3IoMzIuNzQ4LCAyLjc1MCwgLTU0Ljg3NyksIFZlY3Rvcig0NS42NjQsIDIuNzUwLCAtNjQuMTkzKSwgVmVjdG9yKDQ5Ljk2MywgMi43NTAsIC01My4zNTUpLAoJCQlWZWN0b3IoMzcuNTA2LCAyLjc1MCwgLTQzLjIxNSksIFZlY3RvcigzOS41MTYsIDIuNzUwLCAtMzIuMzg5KSwgVmVjdG9yKDMzLjUzMSwgMS43NTAsIC0zMC40NDIpLCBWZWN0b3IoNC45MDUsIDEwLjc1MCwgLTMyLjU3MyksCgkJCVZlY3Rvcig4LjUxMCwgMTIuODM3LCAtMzguNjQ3KSwgVmVjdG9yKDcuMDgzLCAxMi44MzUsIC01Ny42NjApLCBWZWN0b3IoNS40NzIsIDExLjAxMCwgLTY0LjAwMiksIFZlY3RvcigyOC4wMjIsIDYuNzk3LCAtNzcuMDUyKSwKCQkJVmVjdG9yKDUuNTM5LCAxMC43NTAsIC0zNy42NDkpKTsKCQlHbG9iYWwuTm9kZXNfQ291bnQgPSBDb3VudCBPZihHbG9iYWwuTm9kZXMpOwoJCUdsb2JhbC5FZGdlcyA9IEFycmF5KEFycmF5KDEsIDE2LCAxNywgMTkpLCBBcnJheSgwLCAyLCAxOSwgNDUsIDQ4KSwgQXJyYXkoMSwgMywgNCwgNTMpLCBBcnJheSgyLCA0LCA1NCksIEFycmF5KDIsIDMsIDUsIDYsIDEwKSwKCQkJQXJyYXkoNCwgMTYpLCBBcnJheSg0LCA3KSwgQXJyYXkoNiwgOCwgOSksIEFycmF5KDQsIDcpLCBBcnJheSg3LCAxNSwgMTYpLCBBcnJheSg0LCAxMSwgMTQpLCBBcnJheSgxMCwgMTIpLCBBcnJheSgxMSwgMTMpLAoJCQlBcnJheSgxMiwgMTQpLCBBcnJheSgxMCwgMTMsIDE1KSwgQXJyYXkoMTQsIDE2KSwgQXJyYXkoMCwgNSwgMTUsIDE3KSwgQXJyYXkoMCwgMTYsIDE4LCAyNSksIEFycmF5KDE3LCAxOSwgMjAsIDM1KSwgQXJyYXkoMCwgMSwKCQkJMTgsIDM1LCA0NSksIEFycmF5KDE4LCAyMSksIEFycmF5KDIwLCAyMiwgMzYpLCBBcnJheSgxLCAyMSwgMjMpLCBBcnJheSgwLCAyMiwgMjQpLCBBcnJheSgxNywgMjMpLCBBcnJheSgxNywgMjYsIDI3LCAyOCksIEFycmF5KAoJCQkyNSwgMjcsIDU3KSwgQXJyYXkoMjUsIDI2LCAzMiwgMzMpLCBBcnJheSgyNSwgMjkpLCBBcnJheSgyOCwgMzApLCBBcnJheSgyOSwgMzEpLCBBcnJheSgyNywgMzAsIDMyKSwgQXJyYXkoMjcsIDMxLCAzMywgMzQpLAoJCQlBcnJheSgyNywgMzIsIDM0LCAzNiwgNDApLCBBcnJheSgzMiwgMzMsIDM1KSwgQXJyYXkoMTgsIDE5LCAzNCksIEFycmF5KDMzLCAzNywgNDAsIDQ1LCA1OCksIEFycmF5KDIxLCAzNiwgMzgsIDM5KSwgQXJyYXkoMzcpLAoJCQlBcnJheSgzNywgNDIpLCBBcnJheSgzMywgMzYsIDQxKSwgQXJyYXkoNDAsIDQyKSwgQXJyYXkoMzksIDQxLCA0MyksIEFycmF5KDQyLCA0NCksIEFycmF5KDQzLCA0NSwgNDYpLCBBcnJheSgxLCAxOSwgMzYsIDQ0KSwKCQkJQXJyYXkoNDQsIDQ3LCA0OSksIEFycmF5KDQ2LCA0OCksIEFycmF5KDEsIDQ3LCA1MSksIEFycmF5KDQ2LCA1MCksIEFycmF5KDQ5LCA1MSksIEFycmF5KDQ4LCA1MCwgNTIpLCBBcnJheSg1MSwgNTMpLCBBcnJheSgyLAoJCQk1MiksIEFycmF5KDMsIDE1LCA1NSwgNTkpLCBBcnJheSgxNiwgNTQsIDU2KSwgQXJyYXkoNTUsIDU3KSwgQXJyYXkoMjEsIDI2LCA1NiksIEFycmF5KDQxLCA0MiwgNDQpLCBBcnJheSg1NCkpOwoJCUdsb2JhbC5EaXN0YW5jZV9NYXRyaXggPSBBcnJheShDdXN0b20gU3RyaW5nKAoJCQkiMDEyMzMyNDU2NjQ1NTQzMjExMjEzNDU2NzIzMzM0NTU0NDMyMzQ1NTQ1NTQzMjQzMjU0MzQzNDU1NDQ1MTAxMjIzMzQ1NTM0NTU0MzIyMjEzNDU2NzM0NDQ1NjU0MzMyMjM0NDM0NDMyMTMyMTQzMjMyMzQ1NTM0MjEwMTEyMjMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjQ0MjM0NDMzMzMzMjQ1Njc4NDU1NTY3NjU0NDMzNDU1NDU1NDMyNDMyNTQzMjEyMzQ1NDMzMjEwMTIyMzQ0MjM0NDMyMzQ0MzU1Njc4NTU2Njc4NzY1NTQ0NTY2NTY2NTQzNTQzNjU0MzIxMjM0NTIzMjExMDExMjMzMTIzMzIzIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIyMzQzNTY3ODk0NTU1Njc3NjU1NDQ1NjY1NjY1NDM1NDM2NTQzMjIzNDU1MzIzMjIxMDIzNDQyMzQ0MzIxMjMzNDU2NzgzNDQ0NTY2NTU1NDU2Nzc2Nzc2NTQ2NTQ3NjU0MzM0NTU2NDQzMjIxMjAxMjIyMzQ0MzMzNDU0Njc4OSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiITU2NjY3ODg3NjY1NTY3NzY3NzY1NDY1NDc2NTQzMzQ1NjY0MzQzMzIzMTAxMTM0NTQzMjIzNDQ1Njc4OTQ1NTU2Nzc2NjY1Njc4ODc4ODc2NTc2NTg3NjU0NDU2Njc1NDMyMjEyMjEwMjIzNDQzMzM0NTQ2Nzg5ITU2NjY3ODgiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjc2NjU1Njc3Njc3NjU0NjU0NzY1NDMzNDU2NjQyMzQ0MzIyMTIwMzQ0MzIxMTIzMzQ1Njc4MzQ0NDU2NjU1NTQ1Njc3Njc3NjU0NjU0NzY1NjU1NjY1NjY0MzIyMTIyMzQ0MDEyMjEyMzQ1NDY3ODkhNTY2Njc4ODc2NjU1Njc3IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI2Nzc2NTQ2NTQ3NjU0MzM0NTY2NDU0MzMyMzM0NTUxMDEyMjM0NTY1Nzg5IT82Nzc3ODk5ODc3NjY3ODg3ODg3NjU3NjU4NzY1NDQ1Njc3NTU1NDQzNDQ1NjYyMTAxMjM0NTY2Nzg5IT82Nzc3ODk5ODg4Nzc4OTk4OTk4NzY4NyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjk4NzY1NTY3ODg2NDU0NDM0NDU2NjIyMTAxMjM0NTU2Nzg5ITU2NjY3ODg3Nzc2Nzg5OTg5OTg3Njg3Njk4NzY1NTY3Nzg2MzQzMzIzMzQ1NTEyMjEwMTIzNDQ1Njc4OTQ1NTU2Nzc2NjY1Njc4ODc4ODc2NTc2NTg3NjU0NDUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjY2NzUyMzQ0MzI0NTY2MjMzMjEwMTIzMzQ1Njc4MzQ0NDU2NjU1NTQ1Njc3Njc3NjU0NjU0NzY1NjU1NjY1NjYxMjMzMjEzNDU1MzQ0MzIxMDEyMjM0NTY3MjMzMzQ1NTQ0NDM0NTY2NTY2NTQzNTQzNjU0NTQ0NTU0NTUxMjM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzMjQ1NjY0NTU0MzIxMDEyMjM0NTYxMjIyMzQ0MzMzMjQ1NjY0NTY1NDM1NDM2NTQ1NDU1NDM1NjIyMzQ0MzU2Nzc1NjY1NDMyMTAxMTIzNDUyMzMzNDU0MzMyMTM0NTU0NTU0MzI0NDM1NTQ1NDU2NTQ0NjExMjMzMzQ1NjY0NSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjU0MzIyMTAyMzQ1NjM0NDQ1NTQzMzIxMjM0NDM0NDMyMTMzMjQ0MzQzNDU2NTM1MzM0NTU0Njc4ODY3NzY1NDMyMTIwMTIzNDM0NDQ1NjU0MzMyMjM0NDM0NDU0MzU1NDY2NTY1Njc2NTM3MzIzNDQ1NTY3NzU2Nzc2NTQzMjMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjEwMTIzNDQzNTY1NDMyMzMxMjMzMjMzNDMyNDQzNTU0NTQ1NjY1MjYyMTIzMzQ0NTY2NDU2NjU0MzMzMjIxMDEyNDU0NTY2NTQzNDMyMzQ0MzQ0NDMyNDMyNTQzNDM0NTY2MzUxMjM0NDM1Njc3NTY2NTQzMjIzMjMyMTAxMzQ0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NTY2NTQ0MzM0NTU0NTU1NDM1NDM2NTQ1NDU2NjU0NjIzNDU0MzU2Nzc1NjY1NDMyMTIzMzMyMTAyMzMzNDU1NDQ0MzQ1NjY1NjY2NTQ2NTQ3NjU2NTY2NTQ1NzIzNDU0MzU2Nzc1NjY1NDMyMTIzMzM0NTYwMTExMjMzMjIzMyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzQ1NTM0NTY1NDY1NDc2NTY1NTQzMjQ2MzQ1NTU0Njc4ODY3NzY1NDMyMzQzMjM0NTEwMTIzNDMyMjM0MzQ1NTM0NTY1NDY2NTc3Njc2NDMyMTQ1MzQ1NjU0Njc4ODY3NzY1NDMyMzQ0MzQ1NjExMDIzMzIxMTIzMjM0NDIzNDUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjQzNTY1Njc2NzY1NDMyMzYzNDU2NTQ2Nzg4Njc3NjU0MzIzNDQ0NTY3MTIyMDEyMzMzNDQ0NTY2NDU2NzY1NzY1ODc2NzY2NTQzNTc0NTY3NjU3ODk5Nzg4NzY1NDM0NTU1Njc4MjMzMTAxMjM0NDU1Njc3NTY3ODc2ODc2OTg3IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI4Nzc2NTQ2ODU2Nzg3Njg5ISE4OTk4NzY1NDU1NjU2NzgzMzIyMTAxMjMzNDQ1NjY0NTY3NjU3ODc4OTg5ODc2NTQ1ODQ1Njc2NTc4OTk3ODg3NjU0MzQ0NTQ1NjcyMjEzMjEwMTIyMzM0NTUzNDU2NTQ2NzY3ODc4NzY1NDM0NyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNDQ1NjY1Nzg5OTc4ODc2NTQzMzM0NDU2NzIyMTMzMjEwMTEyMjM0NDIzNDU0MzU2NTY3Njc2NjU0MzM3NDM0NTU1Njc4ODY3ODc2NTQzMzM0MzQ1NjIyMTM0MzIxMDEyMTIzMzEyMzQzMjQ1NDU2NTY1NjU0MzI3MzM0NTU1NjciKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjg4Njc4NzY1NDMyMjM0NTY3MzMyNDQzMjExMDEyMzQ0MjM0NTQzNTU0NjY1NjU2NjU0MzcyMjM0NDQ1Njc3NTY3NjU0MzIxMTIzNDU2MzQzNDU0MzIyMTAzNDU1MzQ1NDMyNDQzNTU0NTQ1NjY1NDYzMjM0NDU1Njc3NTY3NzY1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NDMyMzIzNDUzMzI0NTQzMjEyMzAxMjIxMjIzMjEzNDM0NTQ1NDU2NTQxNjQzNDU1NjY3ODg2Nzg4NzY1NDMzMjEyMzQ0NDM1NjU0MzIzNDEwMTEyMzIzMzI0NTQ1NjU2NTY3NjUyNzU0NTY2Nzc4OTk3ODk5ODc2NTQ0MzIzNCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTU1NDY3NjU0MzQ1MjEwMjM0MzQ0MzU2NTY3Njc2Nzg3NjM4NTQ1NjY3Nzg5OTc4OTk4NzY1NDQzMjM0NTU1NDY3NjU0MzQ1MjEyMDMyMTIzMzQ1NTU2Njc2Nzg3NjM4NDM0NTU2Njc4ODY3ODg3NjU0NDM0MzQ1NjMzMjQ1NDMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjIxMjMxMjMzMDEyMzMyNDU0NTY1NjU2NjU0Mjc1NDU2Njc3ODk5Nzg5OTg3NjU1NDU0NTY3NDQzNTY1NDMyMzQyMzQyMTAxMjMzNDU1NTY2NzY3NzY1Mzg1NDU2Njc3ODk5Nzg5OTg3NjY1NDQzNDU2NTU0Njc2NTQzNDUzMjMxIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIyMTAxMjMzNDU0NTY3Njc4NzY0ODQzNDU1NjY3ODg2Nzg4NzY1NTQzNTQ1Njc2NjU3ODc2NTQ1NDMzNDIzMjEwMTIyMzQzNDU2NTY3ODc0NzMyMzQ0NTU2Nzc1Njc3NjU0NDMyNDQ1Njc1NTQ2NzY1NDM0MzIzNDMzMzIxMDExMiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzIzNDU0NTY3NjM2MjEyMzM0NDU2NjQ1NjY1NDMzMjEzMzQ1NjQ0MzU2NTQzMjMyMTIzMzIzMzIxMDIzMjM0MzQzNDU2NTI1NDM0NTU2Njc4ODY3ODg3NjU1NDM1NTY3ODY2NTc4NzY1NDU0MzQ1NDQ0MzIxMjAxMjEyMzQ1NjciKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjg3NDczMjM0NDU1Njc3NTY3NzY1NDQ0MzU2Nzg5NTY2Njc4NzY1NTQ0NTY1NTU0MzIzMTAxMjMyMzQ1Njc3NTYyMTIzMzQ0NTY2NDU2NjU0MzMzMjQ1Njc4NDU1NTY3NjU0NDMzNDU1NDU1NDMyMjEwMzIxMjM0NTY2NDU1NDU2IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI2Nzc4OTk3ODk5ODc2NjU0NjY3ODk3NzY4OTg3NjU2NTQ1NjU1NTQzMjMxMjMwMTIzNDc4OTg1ODQzNDU1NjY3ODg2Nzg4NzY1NTU0Njc4OSE2Nzc3ODk4NzY2NTU2NzY2NjU0MzQyMzIxMDEyMzY3ODg2NzMyMzQ0NTU2Nzc1NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNzc2NTQ0NDM1Njc4OTU2NjY3ODc2NTU0NDU2NjU2NjU0MzMyMTIxMDEyNTY3NzU2NDMyMzM0NDU2NjQ1NjY1NTU1NTQ2Nzg5ITY3Nzc4OTg3NjY1NTY3NzY3NzY1NDQzMjMyMTAxNDU2NzY1MzIxMjIzMzQ1NTM0NTU0NDQ0NDMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU2Nzg5NTY2Njc4NzY1NTQ0NTY2NTY2NTQzNTQzNDMyMTAzNDU2NTQzMzIxMjMzNDU1MzQ0MzIxMjM0NDU0NTY3NDQ1NTY3NzY2NjU1Njc3Njc3NjU0NjU0NzY1NDMwMTIzNjEyMzMyMzI0NTY2NDU1NDMyMTIzMzQzNDU2MzM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NTY2NTU1NDQ1NjY1NjY2NTQ2NTQ3NjU1NDEwMTI1MjM0NDM0MzU2Nzc1NjY1NDMyMzQ0MzIzNDUzMjM0NTY1NDQ1NTM0NTU0NTU2NTQ2NjU3NzY2NTIxMDE0MzQzNDQ1NDY3ODg2Nzc2NTQzMzM0MjEyMzQyMTIzNDU0MzM0NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMjM0NDM0NDU0MzU1NDY2NTY1MzIxMDM0NDM0NTU2Njc4ODY3ODg3NjU1NDM1NDU2NzU1NDY3NjU0MzQ0MzM0MjIxMTIxMjIzNDM0NTY1Njc3NjA3NDQzMjM0NDU2NjQ1NTQzMjM0NTU2NTY3ODU1NjY3ODg3Nzc2Njc4ODc4ODciKSwKCQkJQ3VzdG9tIFN0cmluZygiNjU3NjU4NzY1NDEyMzQ3MCIpKTsKCQlHbG9iYWwuRWxldmF0b3JfTm9kZXMgPSBNYXBwZWQgQXJyYXkoQXJyYXkoMywgMjYpLCBHbG9iYWwuTm9kZXNbQ3VycmVudCBBcnJheSBFbGVtZW50XSk7CgkJSWYoR2xvYmFsLkdhbWVtb2RlID09IDApOwoJCQlHbG9iYWwuT2JqZWN0aXZlX1NwYXducyA9IEFycmF5KFZlY3Rvcig0MC42MTQsIDIuNzUzLCAtNTQuMjAzKSwgVmVjdG9yKDkuODUyLCAxMC43NTAsIC0zNC45NTYpLCBWZWN0b3IoNy4zNTMsIDEuNzUwLCAtOS45MzIpLAoJCQkJVmVjdG9yKDE0LjM5MiwgMS43NDgsIC0zOS40MzQpLCBWZWN0b3IoLTE3LjA1MiwgNS43NTAsIC0zOS4zMjgpLCBWZWN0b3IoLTYuMTc5LCAxLjYwNCwgLTguMjU0KSwgVmVjdG9yKDguMTM2LCAxMi45MDMsIC00NC41MTUpLAoJCQkJVmVjdG9yKDUuNzUwLCAxLjc0OCwgLTI5LjU2MykpOwoJCUVsc2UgSWYoR2xvYmFsLkdhbWVtb2RlID09IDEpOwoJCQlHbG9iYWwuT2JqZWN0aXZlX1NwYXducyA9IEFycmF5KFZlY3RvcigtNS41MjQsIDMuNjA0LCAtOS45MzgpLCBWZWN0b3IoMTQuNzkwLCAzLjYyMiwgLTIzLjQyOSksIFZlY3RvcigxMi4wNzksIDEyLjc1MCwgLTM2Ljc1NSksCgkJCQlWZWN0b3IoOC4wMDEsIDE0LjkwMywgLTQ4LjU2MyksIFZlY3RvcigwLjkwOSwgMTMuMDEwLCAtNjEuMjYxKSwgVmVjdG9yKC0xMC4wMTksIDMuNzI5LCAtNjQuNzM4KSwgVmVjdG9yKDUuNjM0LCAzLjYwNCwgLTc3LjIyOCksCgkJCQlWZWN0b3IoMjMuMzc5LCA4Ljc5NywgLTgwLjU0OCksIFZlY3Rvcig0NS4xNzUsIDQuNzUzLCAtNTMuMzg3KSwgVmVjdG9yKDIxLjE4OCwgMy42MDQsIC01My4xNjUpLCBWZWN0b3IoMTEuNTY4LCA4LjAwMywKCQkJCS01Ny40NzEpKTsKCQlFbmQ7CgkJR2xvYmFsLlBsYXllcl9TcGF3biA9IFZlY3RvcigtMC4xMzUsIDEuNjA0LCAtNzkuMTgyKTsKCQlHbG9iYWwuUGxheWVyX1NwYXduX0ZhY2luZyA9IEZvcndhcmQ7CgkJR2xvYmFsLkFiaWxpdHlfQnV5X0xvY2F0aW9uID0gVmVjdG9yKC0yNC45MzgsIDUuNzUwLCAtMzkuNTM2KTsKCQlHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdID0gRGlyZWN0aW9uIEZyb20gQW5nbGVzKDEwNC4yOTMsIDApOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gPSBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdKSwKCQkJVmVydGljYWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSkgLSA5MCk7CgkJR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSA9IENyb3NzIFByb2R1Y3QoR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSwgR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSk7CgkJR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgPSBWZWN0b3IoLTE3Ljc0NCwgMTAuMzI1LCAtMTMyLjQ3OSk7CgkJR2xvYmFsLkJ1eV9NZW51X1BvcyA9IEdsb2JhbC5CdXlfTWVudV9DYW1fUG9zIC0gOSAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gKyAxNDIgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdOwoJCUdsb2JhbC5NYXhfU3BlZWRfQm9udXMgPSAxNjA7CgkJQ3JlYXRlIEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBSaW5nLCBDb2xvcihHcmVlbiksIFZlY3RvcigxOC44MTksIDEuNjA0LCAtNzMuMTg1KSwgMS41MDAsIFZpc2libGUgVG8pOwoJCUNyZWF0ZSBFZmZlY3QoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgU3BhcmtsZXMsIENvbG9yKEdyZWVuKSwgVmVjdG9yKDE4LjgxOSwgMi42MDQsIC03My4xODUpLCAxLjUwMCwgVmlzaWJsZSBUbyk7Cgl9Cn0KCnJ1bGUoIlN1YnJvdXRpbmUgKFNldCBNYXAgS1opOiBTZXQgU3Bhd25zLCBOb2RlcywgRWRnZXMsIERpc3RhbmNlIE1hdHJpeCwgRHJvcC1vZmYgTG9jYXRpb24sIEFiaWxpdHkgQnV5IExvY2F0aW9uIikKewoJZXZlbnQKCXsKCQlTdWJyb3V0aW5lOwoJCVNldF9NYXBfS1o7Cgl9CgoJYWN0aW9ucwoJewoJCUdsb2JhbC5TcGF3bnMgPSBBcnJheShWZWN0b3IoLTQ0LjM3NCwgMTMsIC0yNC4wNjApLCBWZWN0b3IoLTE4Ljg0OCwgNy4wMTAsIC01MS4yOTgpLCBWZWN0b3IoOS41NzAsIDcsIC0zMC42MzEpLCBWZWN0b3IoMTMuMTg3LCA5LAoJCQkxLjM2NyksIFZlY3RvcigtMTYuMDA5LCA2LjAwMywgMTcuNjI4KSwgVmVjdG9yKC0xMC42MjgsIDEwLCAzNS45NTMpLCBWZWN0b3IoLTQ4LjYxMiwgOSwgLTEuNDIxKSwgVmVjdG9yKC0yOC4zMzksIDEwLCAtMjguNTU3KSwKCQkJVmVjdG9yKC0xNy41ODgsIDYsIC0zMi44NzApLCBWZWN0b3IoLTE2LjYyNywgMTAuNTAwLCAxOS45MjYpKTsKCQlHbG9iYWwuU3Bhd25zX05lYXJlc3RfTm9kZXNfYnlfSW5kZXggPSBBcnJheSg0MCwgOCwgMTMsIDE2LCA0OCwgMjQsIDM1LCA1OCwgNjIsIDg0KTsKCQlHbG9iYWwuTm9kZXMgPSBBcnJheShWZWN0b3IoLTU3Ljc0NSwgMTEsIC0yMy41NjcpLCBWZWN0b3IoLTY0LjQ5MywgMTIsIC0yMy40NjkpLCBWZWN0b3IoLTY0Ljc5MywgMTIsIC0yOC44MTMpLCBWZWN0b3IoLTU2LjYwNiwgMTEsCgkJCS0zNS41MzApLCBWZWN0b3IoLTUwLjQwOSwgMTEsIC0zNy4yMDEpLCBWZWN0b3IoLTQ4LjUyNywgMTEsIC00Mi41NjYpLCBWZWN0b3IoLTQxLjAwMiwgOSwgLTUyLjkyNCksIFZlY3RvcigtMzEuMjc0LCA3LCAtNDguNjM2KSwKCQkJVmVjdG9yKC0xNS40MzAsIDcuMDEwLCAtNTIuOTc4KSwgVmVjdG9yKC05LjE4MywgNywgLTQ4Ljk0OCksIFZlY3RvcigtMC42NzksIDksIC00Ni43MTcpLCBWZWN0b3IoNi4yNDUsIDgsIC00Mi44NTApLCBWZWN0b3IoCgkJCTE0LjA0MywgOCwgLTM1LjUwNyksIFZlY3Rvcig5LjgyNCwgNywgLTI3LjE5MSksIFZlY3RvcigxMC4yOTcsIDYsIC0xNC4yMjkpLCBWZWN0b3IoMy44NjQsIDYsIC05LjEyNSksIFZlY3RvcigxMC45NDMsIDksIDEuNTQzKSwKCQkJVmVjdG9yKDQuMzgxLCA2LCAxMS45MzgpLCBWZWN0b3IoLTIuMzkyLCA2LCA3LjM3NiksIFZlY3RvcigtNS41NTMsIDUuODQwLCAxMi4xNTkpLCBWZWN0b3IoLTEuNDQ5LCA1Ljg0MCwgMTYuNzQwKSwgVmVjdG9yKDEuOTc1LAoJCQk3LCAyMS43NTYpLCBWZWN0b3IoLTkuMzQ4LCA5Ljk3NiwgMjYuNzQ2KSwgVmVjdG9yKC0xMS4xODcsIDEwLCAzMi44ODApLCBWZWN0b3IoLTExLjEwNSwgMTAsIDM4LjkxNSksIFZlY3RvcigtNi44MjYsIDEwLAoJCQkzMy4yNjIpLCBWZWN0b3IoLTUuOTUzLCA4LCA0My45NTYpLCBWZWN0b3IoLTE1LjU4MSwgNiwgNDMuOTA1KSwgVmVjdG9yKC0xNS43NDUsIDYsIDM5LjQxNSksIFZlY3RvcigtMzEuODE1LCA0LCA0MC4wNTYpLCBWZWN0b3IoCgkJCS0zMi4zNTAsIDUuODQwLCAzMi4yMzgpLCBWZWN0b3IoLTQ0LjMzNywgNiwgMzIuNDIxKSwgVmVjdG9yKC01Mi44NTcsIDgsIDMyLjQ1MiksIFZlY3RvcigtNTEuNTM3LCA4LCAyMS4zMDEpLCBWZWN0b3IoLTU0LjI5NiwgOCwKCQkJOS42MjgpLCBWZWN0b3IoLTQ5LjgzMSwgOS4wOTQsIDEuMjExKSwgVmVjdG9yKC00OS4zOTcsIDksIC01LjkwMSksIFZlY3RvcigtNTIuNjA5LCAxMSwgLTEzLjI5OSksIFZlY3RvcigtNTcuOTAyLCAxMSwgLTEzLjkyMCksCgkJCVZlY3RvcigtNTAuNTE1LCAxMywgLTIzLjQzNCksIFZlY3RvcigtNDQuNTI2LCAxMywgLTIyLjk2MyksIFZlY3RvcigtNDQuMzMxLCAxMSwgLTEyLjUzMiksIFZlY3RvcigtMjkuNDk1LCAxMC45MDgsIC05LjA0OSksCgkJCVZlY3RvcigtMTcuOTgzLCAxMCwgLTkuNzc2KSwgVmVjdG9yKC0yMC45NDUsIDEwLCAtMC45MDgpLCBWZWN0b3IoLTI4LjQ5OCwgMTAsIDIuNTQ3KSwgVmVjdG9yKC0yNS4zMjEsIDgsIDguNzUyKSwgVmVjdG9yKAoJCQktMTguNzc2LCA1Ljg0NiwgNS45MzMpLCBWZWN0b3IoLTE2LjAwOSwgNi4wMDMsIDE3Ljk1MiksIFZlY3RvcigtMTAuMDMxLCA1Ljg0MSwgNS4wOTApLCBWZWN0b3IoLTMuMjM4LCA2LCAtOC41NTApLCBWZWN0b3IoCgkJCS0yLjE2MywgNC45MzEsIC0zMS4wMzkpLCBWZWN0b3IoMi44NDUsIDcsIC0zNi43OTgpLCBWZWN0b3IoNC42NTcsIDcsIC0yNC44NTApLCBWZWN0b3IoLTE1LjM3OCwgNC45MzcsIC00My40OTQpLCBWZWN0b3IoLTMxLjc0NiwKCQkJNywgLTQ0LjIwMiksIFZlY3RvcigtMzcuMTk0LCA3LCAtMzguMTgxKSwgVmVjdG9yKC0yOS45ODgsIDgsIC0zNi43MzYpLCBWZWN0b3IoLTM1LjU4MiwgOS45OTcsIC0yOC4yMDIpLCBWZWN0b3IoLTQyLjAzNCwgMTAsCgkJCS0zMS4zNzkpLCBWZWN0b3IoLTQyLjk4MiwgMTEsIC0zNS41MjEpLCBWZWN0b3IoLTI0LjAxNywgNi45OTksIC0zNC41NTEpLCBWZWN0b3IoLTIxLjA4MSwgNiwgLTMwLjI3MCksIFZlY3RvcigtMTIuNzU1LCA2LAoJCQktMzQuNzEwKSwgVmVjdG9yKC02LjAyNywgNiwgLTI4LjU5OSksIFZlY3RvcigtNy40NDcsIDYsIC0yMC4xNTYpLCBWZWN0b3IoLTEzLjU2NiwgOCwgLTI1LjMyNCksIFZlY3RvcigtOC42NDYsIDEwLjA0NiwgLTMwLjU5MSksCgkJCVZlY3RvcigtMTIuMjQwLCAxMC4wMTEsIC0zNC4xNjYpLCBWZWN0b3IoLTIwLjM2MCwgMTAsIC0yNy4wMjIpLCBWZWN0b3IoLTIxLjcwMiwgMTAsIC0xOC44ODgpLCBWZWN0b3IoLTM3LjYxMywgNy4wMDUsIC0yMS44ODcpLAoJCQlWZWN0b3IoLTI0LjUwOCwgNS44NDAsIC0xMS43MzcpLCBWZWN0b3IoLTEyLjMxOSwgNiwgLTEyLjk4OCksIFZlY3RvcigtMzMuMDIyLCA1Ljg0MCwgLTMuMTgyKSwgVmVjdG9yKC00MC41MDgsIDcsIC02LjY5NCksCgkJCVZlY3RvcigtNDAuNjc1LCA1Ljg0MiwgMTAuOTg1KSwgVmVjdG9yKC00OC44OTcsIDgsIDkuNzQ2KSwgVmVjdG9yKC0yNS43ODcsIDUuODQyLCAxMi40MzApLCBWZWN0b3IoLTI2LjM2OSwgNS44NDAsIDI2Ljk1NCksCgkJCVZlY3RvcigtMTYuMzk4LCA1Ljg0MCwgMjYuOTY2KSwgVmVjdG9yKC00NS45MTksIDUuOTk4LCAyNi41MDkpLCBWZWN0b3IoLTQ1LjMyNywgNiwgMjEuNTE0KSwgVmVjdG9yKC0yNi40MTQsIDEwLjAwMiwgMjEuNzI2KSwKCQkJVmVjdG9yKC0xNi4wOTcsIDExLjE1MiwgMTYuODA2KSwgVmVjdG9yKC0yMS41NDUsIDEwLjgxOSwgMTMuNTIwKSwgVmVjdG9yKC05Ljk2NiwgMTAuNDg0LCAyMS44ODgpKTsKCQlHbG9iYWwuTm9kZXNfQ291bnQgPSBDb3VudCBPZihHbG9iYWwuTm9kZXMpOwoJCUdsb2JhbC5FZGdlcyA9IEFycmF5KEFycmF5KDEsIDMsIDM4LCAzOSksIEFycmF5KDAsIDIpLCBBcnJheSgxLCAzKSwgQXJyYXkoMCwgMiwgNCwgNSksIEFycmF5KDMsIDUsIDM5LCA2MCksIEFycmF5KDMsIDQsIDYsIDU2KSwKCQkJQXJyYXkoNSwgNyksIEFycmF5KDYsIDgsIDU1LCA1NiwgNTcpLCBBcnJheSg3LCA5KSwgQXJyYXkoOCwgMTAsIDU0KSwgQXJyYXkoOSwgMTEsIDUyLCA2OCksIEFycmF5KDEwLCAxMiwgNTIpLCBBcnJheSgxMSwgMTMpLAoJCQlBcnJheSgxMiwgMTQsIDUzKSwgQXJyYXkoMTMsIDE1LCA1MCksIEFycmF5KDE0LCAxNiwgNTAsIDUxLCA1MyksIEFycmF5KDE1LCAxNyksIEFycmF5KDE2LCAxOCksIEFycmF5KDE3LCAxOSksIEFycmF5KDE4LCAyMCwgNDgsCgkJCTQ5KSwgQXJyYXkoMTksIDIxKSwgQXJyYXkoMjAsIDIyKSwgQXJyYXkoMjEsIDIzLCA4NiksIEFycmF5KDIyLCAyNCwgMjUpLCBBcnJheSgyMywgMjgpLCBBcnJheSgyMywgMjYpLCBBcnJheSgyNSwgMjcpLCBBcnJheSgyNiwKCQkJMjgpLCBBcnJheSgyNywgMjksIDgwKSwgQXJyYXkoMjgsIDMwKSwgQXJyYXkoMjksIDMxLCA3OSwgODApLCBBcnJheSgzMCwgMzIsIDgxKSwgQXJyYXkoMzEsIDMzKSwgQXJyYXkoMzIsIDM0LCA3NywgODEsIDgyKSwKCQkJQXJyYXkoMzMsIDM1KSwgQXJyYXkoMzQsIDM2LCA3NyksIEFycmF5KDM1LCAzNywgNzUpLCBBcnJheSgzNiwgMzgsIDQxKSwgQXJyYXkoMCwgMzcpLCBBcnJheSgwLCA0LCA0MCksIEFycmF5KDM5LCA0MSksIEFycmF5KDM2LAoJCQkzNywgNDAsIDQyLCA3MSwgNzUpLCBBcnJheSg0MSwgNDMsIDcxLCA3MiwgNzQpLCBBcnJheSg0MiwgNDQsIDcyKSwgQXJyYXkoNDMsIDQ1LCA3MiksIEFycmF5KDQ0LCA0NiksIEFycmF5KDQ1LCA0NywgNzgpLCBBcnJheSgKCQkJNDYsIDQ4LCA0OSwgNzgpLCBBcnJheSgxOSwgNDcpLCBBcnJheSgxOSwgNDcsIDUwLCA3OCksIEFycmF5KDE0LCAxNSwgNDksIDUxLCA2NSksIEFycmF5KDE1LCA1MCwgNTIsIDU0LCA2NCksIEFycmF5KDEwLCAxMSwgNTEsCgkJCTUzKSwgQXJyYXkoMTMsIDE1LCA1MSwgNTIsIDY0LCA2NSksIEFycmF5KDcsIDksIDUxLCA1NSwgNjEpLCBBcnJheSg3LCA1NCwgNTYsIDU3KSwgQXJyYXkoNywgNTUsIDU3LCA3MSksIEFycmF5KDcsIDU1LCA1NiwgNTgsCgkJCTYxKSwgQXJyYXkoNTcsIDU5LCA2OSwgNzEpLCBBcnJheSg1OCwgNjApLCBBcnJheSg0LCA1OSksIEFycmF5KDU0LCA1NywgNjIpLCBBcnJheSg2MSwgNjMpLCBBcnJheSg2MiwgNjQpLCBBcnJheSg1MSwgNjMsIDY1KSwKCQkJQXJyYXkoNTAsIDY0LCA2NiwgNzMpLCBBcnJheSg2NSwgNjcpLCBBcnJheSg1MSwgNjQsIDY2LCA2OCksIEFycmF5KDEwLCA1NCwgNjEsIDY3LCA2OSksIEFycmF5KDU4LCA2OCwgNzApLCBBcnJheSg2OSwgNzEsIDcyLAoJCQk3MyksIEFycmF5KDU2LCA3MCwgNzIsIDc1KSwgQXJyYXkoNzEsIDczLCA3NCksIEFycmF5KDY1LCA3MiksIEFycmF5KDcyLCA3NSwgNzYpLCBBcnJheSgzNiwgNzEsIDc0LCA3NiksIEFycmF5KDc0LCA3NSwgNzcsIDc4KSwKCQkJQXJyYXkoMzMsIDM1LCA3NiksIEFycmF5KDQ3LCA0OSwgNzYsIDc5KSwgQXJyYXkoMzAsIDc4LCA4MCwgODEpLCBBcnJheSgyOCwgMzAsIDc5KSwgQXJyYXkoMzEsIDc5LCA4MiksIEFycmF5KDMzLCA4MSwgODMpLAoJCQlBcnJheSg3OCwgNzksIDgyLCA4NCksIEFycmF5KDgzLCA4NSwgODYpLCBBcnJheSg0NywgNzgsIDg0KSwgQXJyYXkoMjIsIDg0KSk7CgkJR2xvYmFsLkRpc3RhbmNlX01hdHJpeCA9IEFycmF5KEN1c3RvbSBTdHJpbmcoCgkJCSIwMTIxMjIzNDU2Nzg5OTg3ODk5ODkhPyMkIz8hOTk4ODc2NTQzMjExMjM0NTY3ODc4Nzc2Nzg1NDM0NTQzNTY3Nzc4ODc2NTQ1NjU0NTU2Nzg3Nzg5ISExMDEyMzM0NTY3ODkhITk4OSEhOSE/IyQlJCM/ISE5OTg3NjU0MzIyMyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNDU2Nzg5ODk4ODc4OTY1NDU2NTQ2Nzg4ODk5ODc2NTY3NjU2Njc4OTg4OSE/PzIxMDEyMjM0NTY3ODk5ODc4OSE5IT8jJCUkIz8hITkhOTg3NjU0MzM0NTY3ODk5ODk4NzY3ODU0MzQ1NDM1Njc3Nzg4NzY1NDU2NjU2Nzc4OTkiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjkhPyMjMTIxMDExMjM0NTY3ODg3Njc4OTg5IT8jJCM/ITk5ODk4NzY1NDMyMjM0NTY3ODg3ODc2NTY3NDMyMzQzMjQ1NjY2Nzc2NTQzNDU1NDU2Njc4ODg5IT8/MjMyMTAxMjM0NTY3ODg3Njc4OTg5IT8jJCM/ITk5ODk4NzY1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NDMxMjM0NTY3ODc4NzY1Njc0MzIzMzIxNDU2NjY3NjU0NDM0NTU0NTY2Nzg4ODkhPz8yMzIxMTAxMjM0NTY3NzY1Njc4Nzg5IT8jPyE5ODg3ODc2NjU0NDMyMzQ1Njc4NzY3NjU0NTYzMjEyMzMyMzQ1NTU2NjU0MzIzNDQzNCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTU2Nzc3ODkhITM0MzIyMTAxMjM0NTY3NjU2Nzg3ODkhPyMjPyE5OTg5ODc3NjU1NDM0NTY3ODk4Nzg2NTQ1NjMyMjIzNDMzNDU1Njc2NTQ0MzQ1NTQ1NjY3ODg4OSE/PzQ1NDMzMjEwMTIzNDU2NTQ1Njc2Nzg5IT8/ITk4ODciKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjg3NjY1NDU1NDU2Nzg5ODc2NzU0MzQ1MjExMTIzNDIzNDQ1NjU0MzMyMzQ0MzQ1NTY3Nzc4OSEhNTY1NDQzMjEwMTIzNDU1NDU2NzY3ODkhPz8/ITk5ODk4Nzc2NTY2NTY3ODk5ODc2NzU0MzM0MjIyMjM0NTM0NTQ1NTQzNDQzIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI0NTU0NTY2Nzg4ODkhPyE2NzY1NTQzMjEwMTIzNDQzNDU2NTY3ODkhISE5ODg3ODk4ODc2Nzc2Nzg5OTg3NjU2NDMyMjMxMjMzNDU2MjM0MzQ0MzIzNDQ1NTY1Njc1Njc3ODkhPzk3ODc2NjU0MzIxMDEyMzQzNDU2NTY3ODkhISIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiITk4ODc4OTg4NzY3ODc4ODk5ODc2NTY0MzIxMjIzNDMzNDUyMzQzMzMyMTIzNDQ0NTU2NzU2Nzc4OSE/OTg5ODc3NjU0MzIxMDEyMzM0NTY1Njc4OSEhITk4ODc4OTg5ODc4OTg5OSE5ODc2NTY0MzIxMjM0NTQ0NTYzNDQzMzQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjMyMzQ1NTQ2NjY3NTY3Nzg5IT85OSE5ODg3NjU0MzIxMDEyMzQ1NjU2Nzg5ISEhOTg4Nzg5ODk4ODkhOSEhITk4NzY1NjQzMzIyNDU2NTU2NzQ1NDMzNDQzNDU2NTQ2NzY3NTY3Nzg5IT85ODk4Nzc2NTQ1NDMyMTAxMjM0NTQ1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI2Nzg5OTk4Nzc2Nzg3ODc3ODk4OTk5ODc2NTQ1MzIyMjEzNDU1Njc4NDQzMjIzNDQ1NjU0MzU2NTY0NTY2Nzg5ITg4OTg3NzY1NDU0NDMyMTAxMjM0MzQ1Njc4ODg3NjY1Njc2NzY2Nzg4OTg4NzY1NDM0MjEyMzIzNDU1Njc4NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTQzMjM0NTY2NTQzNTU0NTM0NTU2Nzg5Nzc4NzY2NTQzNDMzMzMyMTAxMjMzNDU2Nzg4ODc2NjU2NzY3NjY3ODc4ODg3NjU0MzQyMTEyMTIzNDQ1NjczNDMyMjM0NDU2NTQzNTU0NTM0NTU2Nzg5Nzg5ODc3NjU0NTQ0NDQzMjEiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjAxMjM0NTY3ODg5ODc3Njc4Nzg3Nzg5ODk5OTg3NjU0NDMyMjMyMzQ1NTY3ODQ1NDMzNDU1Njc2NTQ2NjU2NDU2Njc4ODk3OSE5ODg3NjU2NTU1NTQzMjEwMTIzNDU2Nzc4ODc3Njc4Nzg3Nzg5OSE5OTg3NjU0MzMzMzQzNDU2IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI2Nzg5NTY1NDQ1NjY3ODc2NTY2NTY0NTY2Nzg3ODY5ISE5OTg3Njc2NjY2NTQzMjEwMTIzNDU2Njc3NjY1Njc2NzY2NzghOTg4NzY1NDMyMjM0NTQ1Njc3ODkhNjc2NTQ1Njc4NzY2NTU1NDUzNDU1Njc2NzU4OTk4ODc2NTY1NSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTU0MzMzMjEwMTIzNDU1NjY1NTQ1NjU2NTU2Nzk4Nzc2NTQzMjExMjM0NDQ1NjY3ODk1NjU0MzQ1Njc2NTU0NDQzNDIzNDQ1NjU2NDkhITk5ODc2NzY2NjY1NDQ0MzIxMDEyMzQ0NTY1NjU2NzY3NjY3OCE5ODg3NjU0MzIyMzQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU1NTY3Nzg5ITY3NjU0NTY3ODc2NjU1NTQ1MzQ1NTY1NDUzIT8/ISE5ODc4Nzc3NzY1NTU0MzIxMDEyMzM0NTQ1Njc3Njc3Nzg5PyE5OTg3NjU0MzM0NTY2Njc4ODkhPzc4NzY1Njc4OTg3NzY2NjU2NDU1NjU0MzQyIT8jPz8hIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI5ODk4ODg4NzY2NjU0MzIxMDEyMjM0MzQ1NjY1Njc3ODk/ITk5ODc2NTQ0NDU2Nzc3ODg5IT8jODk4NzY3ODk5ODc3NzY2NTY0NDQ1NDMyMzE/IyQjIz8hOSE5OTk5ODc3NzY1NDMyMTAxMTIzMjM0NTY2Nzg4OSEjPyEhOTg3NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTU1Njc4ODg5OSE/IyQ5ITk4Nzg5ISE5ODg4Nzc2NzU0MzU1NDM0MiE/Iz8jPyE5ITk5OTk4Nzc4NzY1NDMyMTAyMzIxMjM0NTY3Nzc4OT8hOSE5ODc2NTY1Njc4ODg5ODkhPyM5ITk4Nzg5ITk4Nzc4NjY1NjQzMjQ1NTQ1MyMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIiQlJCQjPyE/ISEhITk4ODg3NjU0MzIxMjAxMjM0NTY3Nzg5OSE/JCM/PyE5ODc2NjY3ODk5OSEhPyMkJSE/ITk4OSE/PyE5OTk4ODc4NjU0NjY1NDUzPyMkIyQjPyE/ISEhITk4ODk4NzY1NDMyMzEwMTIzNDU2Nzg4ODkhIz8hIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI/ITk4NzY3Njc4OTk5ITkhPyMkIT8hOTg5IT8hOTg4OTc3Njc1NDM1NjY1NjQhPyM/Iz8hOSE5OTk5ODc3ODg3NjY1NDM0MjEwMTIzNDU2Nzc3ODk/ITkhOTg3NjU2NTY3ODg4OTg5IT8jOSE5ODc4OSE5ODc3ODY2NTY0MzI0NSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjY3NTkhPyE/ITk4OTg4ODg3NjY3NzY1NjY1NDUzMjEwMTIzNDU2NjY3OCE5ODk4NzY1NDU0NTY3Nzc4Nzg5IT84OTg3Njc4OTg3NjY3NTU0NTMyMTM0NTY3NjkhPyE/ITk4OTg4ODg3NjY3NzY1Njc2NTY0MzIxMDEyMzQ1NjYiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjc4ITk4OTg3NjU0NTQ1Njc3Nzg3ODkhPzg5ODc2Nzg5ODc2Njc1NTQ1MzIyMzQ1Njc3ODkhOSE5ODc4Nzc3NzY1NTY2NTQ1Njc2NzU0MzIxMDEyMzQ1NTY3OTg3ODc2NTQzNDM0NTY2Njc2Nzg5ITc4NzY1Njc4NzY1NTY0NDM0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIyMTEyMzQ1NjY4OSE5ISE5ODk4ODg4NzY2Nzc2NTY3Njc4NjU0MzIxMDEyMzQ1Njc5ODc4ODc2NTQ1NDU2Nzc3ODc4OSE/ODk4NzY3ODk4NzY2NzU1NDMzMjIxMjM0NTU3ODk4OTk4Nzg5OTk5ODc3ODg3Njc3Njc4NzY1NDMyMSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMDEyMzQ1Njg3Njc4ODc2NTY1Njc4ODg3Njc4OSE4OTk4Nzg5ODc2NTU2NDQzMjQzMzIyMzQ1NTY3ODc4ODc2Nzg4ODg3NjY3NzY1NjY1Njc3NjU0NDMyMTAxMjM0NTc2NTY3NzY1NDU0NTY3Nzc2NTY3ODk3ODg3Njc4NzY1NDQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjUzMzIxMzIzMTEyMzQ0NTY3Njc3NzY3ODg5OTg3Nzg4NzY3NzY3ODg3NjU1NDMyMTAxMjM0NjU0NTY3NzY1NjU2Nzg4NzY1Njc4ODc4OTg3ODg3NjU0NTY0MzMyNDM0MjIzNDU1NDU2NTY2NjU2Nzc4ODc2Njc3NjU2Nzc4OTk4IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI3NjY1NDMyMTAxMjM1NDM0NTY2NTQ1NDU2Nzc2NTQ1Njc3Njc4NzY3NzY1NDM0NTMyMjEzNDUzMzQ1NjYzNDU0NTU1NDU2Njc4NzY2Nzc2NTY3ODkhOTg3NjY1NTQzMjEwMTI0MzIzNDU2NTQ1NDU2Nzc1NDM0NTY2NTY3NjU2NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTQzMjM0MjEyMjM0NTQ0NTY3NzIzNDM0NDU0NTY2Nzg4Nzc4ODc2Nzg5IT8hOTg3NzY2NTQzMjEwMTMyMTIzNDU2NTY1NjY3ODU0MzQ1NjU1Njc2NTY2NTQzMjM0MzIzMzQ1NjU1Njc4ODEyMzIzMzQ1Njc3ODk5ODg5OTg3ODkiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIiE/Iz8hOTg4Nzc2NTQzMjEwMjMyMzQ1Njc2NzY3Nzg5NjU0NTY1NDY3ODc2Nzc2NTQzNDU0MzQ0NTY3NjY3ODk5MTIzMjEyMzQ1Njc4OTk4Nzg5ODc4OSE/Iz8hOTg4Nzg3NjU0MzMyMDEyMzQ1Njc2NzY3Njc4NTQzNDQzMjU2IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI3NzY3NzY1NDM0NTQzNDU1Njc3Nzg5ISEyMzQzMjM0NDU2Njc4ODc3ODg3Njc4OSE/ITk4Nzc2NzY1NDMyMjMxMDEyMzQ1NjU2NTY2Nzg1NDM0NTQzNTY3NjU2NjU0MzIzNDMyMzQ0NTY2Njc4OTkzNDU0MzQ0MzQ1NTY3NzY2NyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNzY1Njc4OSE5ODc2NjU2NTQzMjExMjIxMDEyMzQ1NDU0NTU2NzQzMjM0NTQ0NTY1NDU1NDMyMTIzMjEyMzM0NTU1Njc4ODQ1NjU0NTQzNDU1Njc2NTU2NzY1Njc4OSE5ODc2NjU2NTQ0MzIyMzMyMTAxMjM0NDU0NDU2NjQzMjMiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjQ1NTQ1NTQzNDU0MzIxMTIxMjIzMzQ1NTU2Nzg4NTY3NjU2NTQ1NjY3NzY1NTY3NzY3ODkhPyE5ODc3Njc2NTU0MzM0NDMyMTAxMjM0NTU0NTY2NTQzNDU2NjU2NTQzNDU1NDMyMTIyMzM0NDU2NjY3ODk5Njc4NzY2NTQ1NjY3IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI3NjU1Njc2NTY3ODkhOTg3NjY1NjY1NjU0NDU1NDMyMTAxMjM0NDQ1NjY1NDM0NTY3NTY1NDM0NTU0MzIxMjIzMzQzNDU1Njc4OTk3ODk4Nzc2NTY3Nzc3NjU1NjY1NDU2Nzg5ODc2NTU0NTY1NjU1NTY2NTQzMjEwMTIzMzQ1NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjY1NDU2Nzg2NzY1NDU2NjU0MzIzMzQzNDIzNDQ1Njc4ODc4OTg4ODc2NzY2NjY1NDQ1NTQzNDU2Nzg3NjU0NDM0NTQ1NDQ1Njc2NTQzMjEwMTIyMzQ1NTU2NTY3ODk2NzY1NDU2NzY1NDM0MzMyMzEyMzM0NTY3Nzc4OTg4NzYiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU2NTU1NTQzMzQ0MzIzNDU2Nzc2NTQ0MzQ1NDU0NDU2ODc2NTQzMjEwMTEyMzQ0NDU1Njc4OTU2NTQzNDU2NjU0NDQzMzIzMTIzMzQ1Njc2ODkhOTk4NzY3NjY2NjU0NDQzMjEyMzQ1NjY3NjU1NDU2NTY1NTY3OTg3NjU0MzIxIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIwMjM0NTU1NjY3ODkhNjc2NTQ1Njc3NjU1NTQ0MzQyMzQ0NTY2NzU3ODg3NzY1NDU0NDQ0MzIyMzMyMTIzNDU2NjY1NDQzNDU0NTQ0NTY4NzY2NTQzMjEyMDEyMzMzNDU1Njc4NDU0MzIzNDU2NTQ0MzMzMjMxMjMzNDU2NzU3OCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNzY2NTQzNDMzMzMyMTEyMzMyMzQ1Njc3NzY1NTQ1NjU2NTU2Nzc4Nzc2NTQzMjMxMDEyMjIzNDQ1NjczNDMyMTIzNDU1NDMyNDQzNDIzNDQ1Njc4NjY3NjU1NDMyMzIyMjMzMjEyMzQzNDU2Nzg4ODc2NjU2NzY3NjY3NzY3ODgiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjc2NTQzNDIxMDEyMTIzMzQ1NjIzMjEyMzQzNDU0NDM1NTQ1MzQ1NTY3ODk3Nzg3NjY1NDMzMjExMjIzMjM0NTQ1Njc4OTk5ODc3Njc4Nzg3Nzg4Nzg5OTg3NjU0NTMyMTAxMjM0NDQ1NjM0MzIyMzMyMzQ1NDM1NjU2NDU2Njc4IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI5ITg3ODc2NjU0MzQzMjIyMTIxMjM0NDU2Nzg5OTk4Nzc2Nzg3ODc2Nzg3ODg5ODc2NTQ1MzIxMTAyMzQ0NTY3MzMyMTEyMzM0NTQzMjQ1NTY0NTY2Nzg5ITg1NjU0NDMyMTIxMjM0NDMyMzQ1NDU2Nzg5OTk4Nzc2Nzg3NzY1NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNjU2Nzg4NzY1NDUzMjEyMzAxMjIzNDUxMjMyMzQ0MzQ0MzQ0NTQ1NjQ1NjY3ODkhODU2NTQ0MzIxMjIzNDU1NDM0NTY1Njc4OSEhITk4ODc4NzY2NTQ1NjU2Njc4ODc2NTY0MzIzNDEwMTEyMzQyMzQzNDU1NDMzMjM0NDM0NTUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjY3Nzc4OSE5NTY1NDQzMjEyMzQ1NjY1NDU2NzY3ODkhPyE5ODc3Njc2NTU0MzQ1NTY1Njc4NzY1NjU0MzQ1MjEwMTIzNDIzNDQ0NTU0MzIxMjMzMjM0NDU2NjY3ODk5NTY1NDQzMjEyMzQ1NjY1NDU2NzY3ODkhPz8hOTg4Nzg3IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI2NjU0NTY1NjY3ODk4NzY3NTQzNDUyMTEwMTIzMTIzNDU1NDMyMzIzNDQzNDU1Njc3Nzg5ISE1NjU0MzQzMjM0MzQ1NjY1Njc3Njc4OSE/ITk4Nzc2NzY1NTQzNDU0NTU2Nzg3NjU2NTU0NDUzMjIxMDEyMjM0NDQ0MzIxMjEyMyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMzIzNDQ1NjY2Nzg5OTQ1NDMyMzQzNDU0NTY3NzY3ODg3ODkhPyM/ITk4ODc4NzY2NTQ1NTM0NTY3ODg3Njc2NjU1NjQzMzIxMDEzNDU1NTU0MzIzMjM0NDM0NTU2Nzc3ODkhITM0MzIxMjM0NTY1Njc4ODc4OTk4OSE/IyQjPyEiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjk5ODk4Nzc2NTU0MjM0NTY3ODg3ODc3NjY3NTQzMzIxMDQ1NjY2NjU0MzQzNDU1NDU2Njc4ODg5IT8/Njc2NTU0MzIzMjM0NTU0MzQ1NjU2Nzg5ISEhOTg4Nzg4Nzc2NTY3Njc3ODk4NzY1NjQzMjM0MTIyMTIzNDAxMjM0NTU0IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzNDM0NTU0NTY1Njc3ODkhPzk3ODc2NjU0MzQzNDU2NjU0NTY3Njc4OSE/Pz8hOTk4OTk4ODc2Nzg3ODg5ITk4NzY3NTQzNDUyMzMyMzQ1MTAxMjM0NTU0NTQ1NDY1Njc2Nzg4OSE/IyE4OTg3NzY1NDU0NDQ1NTQzNDU2NTY3OCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiOSEhITk4ODc4OTg5ODc4OTg5OSE5ODc2NTY0MzIzNDM0NDM0NTYyMTAxMjM0NTU2NTQzNTY2NzU2Nzc4OSE/OTc4NzY2NTQzNDMzMzQ0MzIzNDU0NTY3ODk5OTg3NzY3ODc4NzY3ODc4ODk4NzY1NDUzMjEyMzIzNDQ1NjczMjEiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjAxMjM0NTU0MzI0NTU2NDU2Njc4OSE4ODk4Nzc2NTQ1NDQ0NDMyMjM0NDM0NTY3ODg4NzY2NTY3Njc2NTY3ODg3ODc2NTQzNDIxMjMzMzQ0NTU2NzQzMjEwMTIzNDQzMjEzNDQ1MzQ1NTY3ODk3ODk4Nzc2NTQ1NDM0NTQzMzQ1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1NDU2Nzg5OTk4Nzc2Nzg3ODc2Nzg4OTg5ODc2NTQ1MzIyMzQzNDU0NDU2MzQzMjEwMTIzNDQzMjQ1NTY0NTY2Nzg5ITg3ODc2NjU0MzQzMjM0NDMyMzQ1NDU2Nzg5OTk4Nzc2Nzg3ODc2Nzg3ODg5ODc2NTQ1MzIxMjMyMzQzMyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNDUyMzIxMjEwMTIzNDQzNTU1NjQ1NjY3ODkhODY3NjU1NDMyMzIxMjM0NDM0NTY1Njc4OSEhITk4ODc4ODc3NjU2NzY3Nzg5ODc2NTY0MzIyMzEyMzIyMzQxMjMyMzIxMDEyMzMzNDQ1NjU2Nzc4OSE/OTY3NjU0NTQzNDMyMzQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU1NDU2NzY3ODkhPz8hOTg4Nzg3NjY1NDU2NTY2Nzg5ODc2NzU0MzM0MjMzMjEyMzIzNDMzMzIxMDEyMjIzMzQ1NTY3Nzc4OSEhNjc3NjU1NDM0NDM0NTU0NDU2NjU2Nzg5ISE5ODc3Njc2NTU0MzQ1NjY1Njc4NzY1NjQzNDQ1IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzMzIzMjM0MzQ0MzIzMzIxMDExMTIyMzQ0NTY2Njc4OTk1NjY1NTQzMjM0NDU2NjU1Njc2NTY3ODkhOTg3NjY1NjU0NDMyMzQ2NTQ1Njc2NTQ1NDQ0NTYzMjEyMzQ1MzQ1NDM0NDMyMTAxMjIxMjMzNDU1NTY3ODg2Nzc2NjU0MyIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNDU1NjY1NDQ1NjY1Njc4OSE5ODc2NjU2NTQ1NDM0NTc2NTY3NzY1NDU0MzQ1NTQzMjM0NTY0NTQzMjM0NDMyMTAxMTIyMzM0NTU1Njc4ODc4ODc3NjU0NTU1NTU0MzM0NTU0NTY3ODk5OTg3NzY3NjU2NTQ1Njg3Njc4NzY1NDUiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjMyMzQ0NDQzNDU2NzU0MzIxMjM0NDMyMTAyMzM0NDU2NjY3ODk4NTY3Njc2NTQ1NjY3NzY1NTY2NTQ1Njc4OTg3NjU1NDU0MzQzMjM0NjU0NTY2NTQzNDM0NTY2NTQzNDU2NzU2NTQzNDU1NDMyMTIwMTEyMjM0NDQ1Njc3NDU2IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI1NjU0MzQ1NTY3NjU1NjY1NDU2Nzg5ODc2NTU0NTQzMzIxMjM1NDM0NTY1NDM0MzQ1NjY0MzIzNDU2NDU2NTQ1NTQzMjEyMzEwMTIyMzQ0NDU2Nzc1Njc2NzY1NDU2NjY2NTQ0NTU0MzQ1Njc4NzY1NDQzNDMyMzIyMzQ2NTQ1NiIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNTQzMjMyMzQ1NTU0MzQ1Njc1NjY1NDU2NTQzMjIzMTEwMTEyMzMzNDU2NjU2NzY3NzY1Njc3Nzc2NTU2NjU0NTY2Nzg4NzY1NTQzMjEyMTIzNDY1NDU2NjU0MzQzNDU2NjY1NDU2Nzg2Nzc2NTY3NjU0MzM0MjIxMDIzNDIyMzQiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjU1Njc4Nzg3NjU2NTU1NTQzMzQ0MzIzNDU2NzY1NDMzMjM0MzQzMzQ1NzY1NjU0MzIxMjEyMzQ0NDU0NTY3ODU2NTQzNDU2NTQzMzQyMjEyMDEyMjM0NTY2Nzg5ODk4NzY3NjY2NjU0NDU1NDM0NTY2NzU0MzIyMTIzMzQ0NDU2IiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSI4NzY3NjU0MzIzMjM0NTU1NjU2Nzg5Njc2NTQ1Njc2NTQ0NTMzMjMxMDExMjM0NTU4OSE5ITk4Nzg3Nzc3NjU1NjY1NDU2NjU2NDMyMTIxMjM0NTU1Njc5ODc4NzY1NDM0MzQ1NjY2NzY3ODkhNzg3NjU2Nzg3NjU1NjQ0MzQyMSIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiMDIzNDU2Njg5ITkhOTg3ODc3Nzc2NTU2NjU0NTY1Njc2NTQzMzIxMjIzNDU2Nzk4Nzg3NjU0MzQzNDU2NjY3Njc4OSE3ODc2NTY3ODc2NTU2NDQzMzIxMjAxMjM0NDc4OTg5OTg3ODc3Nzc2NTU2NjU0NTU0NTY2NjU0NDMyMjEiKSwKCQkJQ3VzdG9tIFN0cmluZygKCQkJIjIzNDU2ODc2Nzc2NTQzNDM0NTY2Njc2Nzg5ITc4NzY1Njc4NzY1NTY0NDMyMjIzMTAxMjMzNzg5ODk4NzY3NjY2NjU0NDU1NDM0NDM0NTU1NDMzMjMzMjM0NDU2ODc2NzY1NDMyMzIzNDU1NTY1Njc4OTY3NjU0NTY3NjU0NDUzIiksCgkJCUN1c3RvbSBTdHJpbmcoCgkJCSIzMjMxMTIyMTAxMjI4OSE5ITk4Nzg3Nzc3NjU1NjY1NDQzMjM0NDU1NDQzNDQzNDU1Njc5ODc3NjU0MzIzMzQ1NjY2NzY3ODkhNzg3NjU2Nzg3NjU1NjQ0MzQyMjMzMjEwMTE3ODk4OTg3Njc2NjY2NTQ0NTU0MzQ0MzQ1NTY1NCIpLAoJCQlDdXN0b20gU3RyaW5nKAoJCQkiNDM0NTQ1NDQ1Njg3NjY1NDMyMTIyMzQ1NTU2NTY3ODk2NzY1NDU2NzY1NDQ1MzMyMzEyMzMzMjEwMjkhPyE/ITk4OTg4ODg3NjY3NjU0MzIxMjMzNDU0NTQ1NTQ1NjY3OCE5ODg3NjU0MzQ0NTY3Nzc4Nzg5IT84OTg3Njc4OTgiKSwKCQkJQ3VzdG9tIFN0cmluZygiNzY2NzU1NDUzMzQ0MzIxMjAiKSk7CgkJR2xvYmFsLkVsZXZhdG9yX05vZGVzID0gRW1wdHkgQXJyYXk7CgkJSWYoR2xvYmFsLkdhbWVtb2RlID09IDApOwoJCQlHbG9iYWwuT2JqZWN0aXZlX1NwYXducyA9IEFycmF5KFZlY3RvcigtMTUuNTMyLCAxMC41MDAsIDE0LjQ0MSksIFZlY3RvcigtMjguOTAxLCA0LCA0My45NjApLCBWZWN0b3IoMy4yNTUsIDksIDMuNTk3KSwgVmVjdG9yKAoJCQkJLTE5LjEwOCwgNiwgLTI2LjM2OSksIFZlY3RvcigtMTcuMTM4LCA3LjAxMCwgLTU1LjEzNSksIFZlY3RvcigtNi4xODUsIDEwLCAtNDAuOTQ1KSwgVmVjdG9yKC0xMC41MzksIDEwLCAzOC42OTcpLCBWZWN0b3IoOS42ODAsCgkJCQk2LCAtMTguNDI4KSk7CgkJRWxzZSBJZihHbG9iYWwuR2FtZW1vZGUgPT0gMSk7CgkJCUdsb2JhbC5PYmplY3RpdmVfU3Bhd25zID0gQXJyYXkoVmVjdG9yKC0zOC41MDcsIDEzLjA3NiwgLTEwLjkyMCksIFZlY3RvcigtMjguOTc0LCA2LCA0My40NTMpLCBWZWN0b3IoLTMxLjUwMywgNy44NDAsIDI2LjczOSksCgkJCQlWZWN0b3IoLTI2LjcxOSwgMTIuMDAyLCAyMC41MzkpLCBWZWN0b3IoLTYuMjY1LCA3Ljg0MCwgMTEuMjQ5KSwgVmVjdG9yKC0yNi44MTgsIDcuODQyLCAxMy41MDUpLCBWZWN0b3IoNC4xMDIsIDksIC0yNy4xNzMpLAoJCQkJVmVjdG9yKC04LjQzOCwgMTIuMzM4LCAtMzYuOTY1KSwgVmVjdG9yKC0xOS4xODgsIDYuOTI4LCAtNDQuNjg4KSwgVmVjdG9yKC01MC44MjMsIDE1LCAtMjcuODUzKSwgVmVjdG9yKC0xMC40OTYsIDEyLjQ4NSwKCQkJCTIyLjg0NCksIFZlY3RvcigtMzUuNjk5LCA3Ljg0MiwgMS40NzkpLCBWZWN0b3IoLTIxLjU3NCwgMTIsIDAuODIxKSk7CgkJRW5kOwoJCUdsb2JhbC5QbGF5ZXJfU3Bhd24gPSBWZWN0b3IoLTM1LjE2NSwgNS44NDAsIC0xLjM0Nik7CgkJR2xvYmFsLlBsYXllcl9TcGF3bl9GYWNpbmcgPSBGb3J3YXJkOwoJCUdsb2JhbC5BYmlsaXR5X0J1eV9Mb2NhdGlvbiA9IFZlY3Rvcig3LjExMCwgOSwgMS42MzIpOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl0gPSBGb3J3YXJkOwoJCUdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gPSBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdKSwKCQkJVmVydGljYWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSkgLSA5MCk7CgkJR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSA9IENyb3NzIFByb2R1Y3QoR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSwgR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsyXSk7CgkJR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgPSA5MDAgKiBVcDsKCQlHbG9iYWwuQnV5X01lbnVfUG9zID0gR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgLSA5ICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIDE0MiAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMl07CgkJR2xvYmFsLk1heF9TcGVlZF9Cb251cyA9IDIwMDsKCX0KfQoKcnVsZSgiQWxsIFRlYW1zIEhXOiBKdW1wIFBhZCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCUFsbDsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCShDdXJyZW50IE1hcCA9PSBNYXAoSG9sbHl3b29kKSB8fCBDdXJyZW50IE1hcCA9PSBNYXAoSG9sbHl3b29kIEhhbGxvd2VlbikpID09IFRydWU7CgkJRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIFZlY3RvcigxOC44MTksIDEuNjA0LCAtNzMuMTg1KSkgPD0gMS41MDA7CgkJKFRlYW0gT2YoRXZlbnQgUGxheWVyKSA9PSBUZWFtIDIgPyBJcyBCdXR0b24gSGVsZChFdmVudCBQbGF5ZXIsIEJ1dHRvbihKdW1wKSkgJiYgIShIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgU3R1bm5lZCkKCQkJfHwgRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSkgOiAhRXZlbnQgUGxheWVyLklzX3VzaW5nX0NvbWJhdF9QYXRoZmluZGluZyAmJiAoCgkJCUV2ZW50IFBsYXllci5OYXZfSW5kZXggPT0gMjEgfHwgRXZlbnQgUGxheWVyLk5hdl9JbmRleCA9PSA1OCkgJiYgSXMgQWxpdmUoRXZlbnQgUGxheWVyKSkgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJQXBwbHkgSW1wdWxzZShFdmVudCBQbGF5ZXIsIFVwLCAxOCwgVG8gV29ybGQsIENhbmNlbCBDb250cmFyeSBNb3Rpb24gWFlaKTsKCQlQbGF5IEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBFeHBsb3Npb24gU291bmQsIENvbG9yKFdoaXRlKSwgVmVjdG9yKDE4LjgxOSwgMS42MDQsIC03My4xODUpLCAyMDApOwoJCVdhaXQoMC4yNTAsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlN1YnJvdXRpbmU6IFVwZGF0ZSBDb21iYXRhbnRzIikKewoJZXZlbnQKCXsKCQlTdWJyb3V0aW5lOwoJCVVwZGF0ZV9Db21iYXRhbnRzOwoJfQoKCWFjdGlvbnMKCXsKCQlHbG9iYWwuQ29tYmF0YW50cyA9IEZpbHRlcmVkIEFycmF5KEFsbCBQbGF5ZXJzKFRlYW0gMiksIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jc19Db21iYXRhbnQpOwoJCUdsb2JhbC5Db21iYXRhbnRzX0NvdW50ID0gQ291bnQgT2YoR2xvYmFsLkNvbWJhdGFudHMpOwoJfQp9CgpydWxlKCJTdWJyb3V0aW5lOiBTY2FsZSBEYW1hZ2UiKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJU2NhbGVfRGFtYWdlOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMCk7CgkJCVNldCBEYW1hZ2UgRGVhbHQoQWxsIFBsYXllcnMoVGVhbSAxKSwgKEdsb2JhbC5NdXRhdG9yc19hY3RpdmF0ZWQgPyAxLjEwMCA6IDEpICogKEdsb2JhbC5NdXRfRU1QX1JvdW5kcyA/IDIgOiAxKSAqICgxMDAgKyA0NTAgKiAoKAoJCQkJR2xvYmFsLldhdmUgLSAxICsgMiAqIE1heCgwLCBHbG9iYWwuV2F2ZSAtIDEzKSkgLyAzOSkpICogKDAuMTUwICsgMC4xNTAgKiBHbG9iYWwuQ29tYmF0YW50c19Db3VudCkpOwoJCUVsc2U7CgkJCVNldCBEYW1hZ2UgRGVhbHQoQWxsIFBsYXllcnMoVGVhbSAxKSwgKEdsb2JhbC5NdXRhdG9yc19hY3RpdmF0ZWQgPyAxLjEwMCA6IDEpICogKEdsb2JhbC5NdXRfRU1QX1JvdW5kcyA/IDIgOiAxKSAqICgxMDAgKyA0NTAgKiAoKAoJCQkJR2xvYmFsLldhdmUgLSAxICsgMiAqIE1heCgwLCBHbG9iYWwuV2F2ZSAtIDkpKSAvIDI2KSkgKiAoMC4xNTAgKyAwLjE1MCAqIEdsb2JhbC5Db21iYXRhbnRzX0NvdW50KSk7CgkJRW5kOwoJfQp9CgpydWxlKCJTdWJyb3V0aW5lOiBEZWNsYXJlIFZpY3RvcnkiKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJRGVjbGFyZV9WaWN0b3J5OwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCURlY2xhcmUgVGVhbSBWaWN0b3J5KFRlYW0gMik7Cgl9Cn0KCnJ1bGUoIkdsb2JhbCAoRmlyc3QgV2F2ZSk6IENyZWF0ZSBNdXRhdG9yIFN0YXJ0IEhVRCwgU2NhbGUgVmFsdWVzLCBTZXQgTGV2ZWwiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBHbG9iYWw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUdsb2JhbC5XYXZlID09IDA7CgkJSXMgVHJ1ZSBGb3IgQW55KEdsb2JhbC5Db21iYXRhbnRzLCBJcyBCdXR0b24gSGVsZChDdXJyZW50IEFycmF5IEVsZW1lbnQsIEJ1dHRvbihJbnRlcmFjdCkpICYmIERpc3RhbmNlIEJldHdlZW4oCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudCwgR2xvYmFsLkFiaWxpdHlfQnV5X0xvY2F0aW9uKSA+IDIpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCURlc3Ryb3kgSFVEIFRleHQoR2xvYmFsLkdhbWVfU3RhcnRfSFVEKTsKCQlFbmFibGUgQnVpbHQtSW4gR2FtZSBNb2RlIE11c2ljOwoJCVNldCBUZWFtIFNjb3JlKFRlYW0gMiwgMSk7CgkJR2xvYmFsLldhdmUgPSAxOwoJCVNldCBVbHRpbWF0ZSBDaGFyZ2UoR2xvYmFsLkNvbWJhdGFudHMsIDApOwoJCUNhbGwgU3Vicm91dGluZShTY2FsZV9EYW1hZ2UpOwoJCVBsYXllcnMgSW4gU2xvdCgwLCBUZWFtIDEpLkxldmVsID0gMTsKCQlQbGF5ZXJzIEluIFNsb3QoMSwgVGVhbSAxKS5MZXZlbCA9IDE7CgkJUGxheWVycyBJbiBTbG90KDIsIFRlYW0gMSkuTGV2ZWwgPSAxOwoJCVBsYXllcnMgSW4gU2xvdCgzLCBUZWFtIDEpLkxldmVsID0gMTsKCQlQbGF5ZXJzIEluIFNsb3QoNCwgVGVhbSAxKS5MZXZlbCA9IDE7CgkJUGxheWVycyBJbiBTbG90KDUsIFRlYW0gMSkuTGV2ZWwgPSAxOwoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAwKTsKCQkJR2xvYmFsLkhSX1dhdmVfU3RhcnQgPSBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nID0gMTI7CgkJCVdhaXQoMTAsIElnbm9yZSBDb25kaXRpb24pOwoJCQlDcmVhdGUgRHVtbXkgQm90KEhlcm8oQW5hKSwgVGVhbSAyLCA1LCAxMDAgKiBVcCwgRm9yd2FyZCk7CgkJRWxzZTsKCQkJR2xvYmFsLlNwYXduc19yZW1haW5pbmcgPSBUcnVlOwoJCQlHbG9iYWwuSVZfSFZUX1NwYXduX1Nsb3RfU2l4ID0gVHJ1ZTsKCQkJUGxheWVycyBJbiBTbG90KDYsIFRlYW0gMSkuTGV2ZWwgPSA1OwoJCUVuZDsKCX0KfQoKcnVsZSgiSFIgR2xvYmFsIChOZXh0IFdhdmUpOiBSZXZpdmUgUGxheWVycywgU2NhbGUgVmFsdWVzLCBTZXQgTGV2ZWwsIFNldCBNdXRhdG9ycyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEdsb2JhbDsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLkdhbWVtb2RlID09IDA7CgkJR2xvYmFsLldhdmUgPiAwOwoJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nIDw9IDA7CgkJR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyA8PSAwOwoJCU51bWJlciBPZiBMaXZpbmcgUGxheWVycyhUZWFtIDEpID09IDA7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKEdsb2JhbC5XYXZlID09IDEpOwoJCQlHbG9iYWwuTXV0YXRvcl9BY3RpdmF0aW9uX2xvY2tlZCA9IFRydWU7CgkJCURlc3Ryb3kgSFVEIFRleHQoR2xvYmFsLk11dGF0b3JfU3RhcnRfSFVEKTsKCQlFbHNlIElmKEdsb2JhbC5XYXZlID49IDIyKTsKCQkJU3RhcnQgUnVsZShEZWNsYXJlX1ZpY3RvcnksIERvIE5vdGhpbmcpOwoJCUVuZDsKCQlGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuRG93bmVkX3NpbmNlICsgMC4xMDAgPCBUb3RhbCBUaW1lIEVsYXBzZWQpLkRvd25lZF9zaW5jZSA9IDA7CgkJQmlnIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiV2F2ZSBjbGVhcmVkISIpKTsKCQlHbG9iYWwuTW9uZXkgKz0gKEdsb2JhbC5NdXRhdG9yc19hY3RpdmF0ZWQgPyAyIDogMSkgKiAoKEdsb2JhbC5NdXRfUmVpbmZvcmNlbWVudHMgPyAyMCA6IDM1KSArIDEwICogR2xvYmFsLldhdmUpOwoJCUNhbGwgU3Vicm91dGluZShTZXRfUmFuZG9tX1BlcmtzKTsKCQlJZihHbG9iYWwuTXV0YXRvcnNfYWN0aXZhdGVkICYmIEdsb2JhbC5XYXZlICUgMyA9PSAxKTsKCQkJQ2FsbCBTdWJyb3V0aW5lKE1VVF9BZGRfTXV0YXRvcik7CgkJRW5kOwoJCURpc2FibGUgQnVpbHQtSW4gR2FtZSBNb2RlIE11c2ljOwoJCVNldCBNYXRjaCBUaW1lKEdsb2JhbC5XYXZlID49IDEwID8gMTUgOiAxMCk7CgkJV2FpdChHbG9iYWwuV2F2ZSA+PSAxMCA/IDE1IDogMTAsIElnbm9yZSBDb25kaXRpb24pOwoJCUVuYWJsZSBCdWlsdC1JbiBHYW1lIE1vZGUgTXVzaWM7CgkJTW9kaWZ5IFRlYW0gU2NvcmUoVGVhbSAyLCAxKTsKCQlHbG9iYWwuV2F2ZSArPSAxOwoJCUdsb2JhbC5IUl9XYXZlX1N0YXJ0ID0gVG90YWwgVGltZSBFbGFwc2VkOwoJCUlmKEdsb2JhbC5XYXZlID09IDUgfHwgKEdsb2JhbC5XYXZlID49IDEwICYmIEdsb2JhbC5XYXZlICUgMyA9PSAxKSk7CgkJCUJpZyBNZXNzYWdlKEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoIkJvc3MgV2F2ZSIpKTsKCQkJR2xvYmFsLlNwYXduc19yZW1haW5pbmcgPSAoR2xvYmFsLk11dF9SZWluZm9yY2VtZW50cyA/IDMgOiAwKSArIE1pbigyNSwgMiAqIEdsb2JhbC5XYXZlIC0gMTApOwoJCQlHbG9iYWwuQm9zc19TcGF3bnNfcmVtYWluaW5nID0gR2xvYmFsLldhdmUgPT0gNSB8fCBHbG9iYWwuV2F2ZSA9PSAxNiA/IDIgOiAxOwoJCUVsc2U7CgkJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nID0gKEdsb2JhbC5NdXRfUmVpbmZvcmNlbWVudHMgPyAzIDogMCkgKyBNaW4oMzUsIDIgKiBHbG9iYWwuV2F2ZSArIDEwKTsKCQlFbmQ7CgkJR2xvYmFsLkNhbGxlZF9JbmNvbWluZyA9IEZhbHNlOwoJCUdsb2JhbC5NdXRfTGFzdF9TdGFuZF9hY3RpdmUgPSBGYWxzZTsKCQlDYWxsIFN1YnJvdXRpbmUoU2NhbGVfRGFtYWdlKTsKCQlJZihHbG9iYWwuV2F2ZSA9PSAyKTsKCQkJUGxheWVycyBJbiBTbG90KDMsIFRlYW0gMSkuTGV2ZWwgPSAyOwoJCQlQbGF5ZXJzIEluIFNsb3QoNCwgVGVhbSAxKS5MZXZlbCA9IDI7CgkJRWxzZSBJZihHbG9iYWwuV2F2ZSA9PSA0KTsKCQkJUGxheWVycyBJbiBTbG90KDUsIFRlYW0gMSkuTGV2ZWwgPSAzOwoJCUVsc2UgSWYoR2xvYmFsLldhdmUgPT0gNik7CgkJCVBsYXllcnMgSW4gU2xvdCgyLCBUZWFtIDEpLkxldmVsID0gMjsKCQlFbHNlIElmKEdsb2JhbC5XYXZlID09IDgpOwoJCQlQbGF5ZXJzIEluIFNsb3QoNCwgVGVhbSAxKS5MZXZlbCA9IDM7CgkJRWxzZSBJZihHbG9iYWwuV2F2ZSA9PSAxMSk7CgkJCVBsYXllcnMgSW4gU2xvdCgxLCBUZWFtIDEpLkxldmVsID0gMjsKCQlFbHNlIElmKEdsb2JhbC5XYXZlID09IDE0KTsKCQkJUGxheWVycyBJbiBTbG90KDMsIFRlYW0gMSkuTGV2ZWwgPSAzOwoJCUVsc2UgSWYoR2xvYmFsLldhdmUgPT0gMTcpOwoJCQlQbGF5ZXJzIEluIFNsb3QoMCwgVGVhbSAxKS5MZXZlbCA9IDI7CgkJRWxzZSBJZihHbG9iYWwuV2F2ZSA9PSAyMSk7CgkJCVBsYXllcnMgSW4gU2xvdCgzLCBUZWFtIDEpLkxldmVsID0gNDsKCQlFbmQ7Cgl9Cn0KCnJ1bGUoIklWIEhWVCBHbG9iYWwgKE5leHQgV2F2ZSk6IFJldml2ZSBQbGF5ZXJzLCBTY2FsZSBWYWx1ZXMsIFNldCBMZXZlbCwgU2V0IE11dGF0b3JzIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gR2xvYmFsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuR2FtZW1vZGUgPT0gVHJ1ZTsKCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMzsKCQlOdW1iZXIgT2YgTGl2aW5nIFBsYXllcnMoVGVhbSAxKSA9PSAwOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihHbG9iYWwuV2F2ZSA9PSAxKTsKCQkJR2xvYmFsLk11dGF0b3JfQWN0aXZhdGlvbl9sb2NrZWQgPSBUcnVlOwoJCQlEZXN0cm95IEhVRCBUZXh0KEdsb2JhbC5NdXRhdG9yX1N0YXJ0X0hVRCk7CgkJRWxzZSBJZihHbG9iYWwuV2F2ZSA9PSA5KTsKCQkJU3RvcCBEYW1hZ2UgTW9kaWZpY2F0aW9uKEdsb2JhbC5JVl9IVlRfRGFtYWdlX01vZHNbMF0pOwoJCQlTdG9wIERhbWFnZSBNb2RpZmljYXRpb24oR2xvYmFsLklWX0hWVF9EYW1hZ2VfTW9kc1sxXSk7CgkJRWxzZSBJZihHbG9iYWwuV2F2ZSA+PSAxNSk7CgkJCVN0YXJ0IFJ1bGUoRGVjbGFyZV9WaWN0b3J5LCBEbyBOb3RoaW5nKTsKCQlFbmQ7CgkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID0gMDsKCQlGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuRG93bmVkX3NpbmNlICsgMC4xMDAgPCBUb3RhbCBUaW1lIEVsYXBzZWQpLkRvd25lZF9zaW5jZSA9IDA7CgkJQmlnIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiV2F2ZSBjbGVhcmVkISIpKTsKCQlHbG9iYWwuTW9uZXkgKz0gKEdsb2JhbC5NdXRhdG9yc19hY3RpdmF0ZWQgPyAyIDogMSkgKiAoKEdsb2JhbC5XYXZlID49IDEwID8gMzAgOiAyMCkgKyAzMCAqIEdsb2JhbC5XYXZlKTsKCQlDYWxsIFN1YnJvdXRpbmUoU2V0X1JhbmRvbV9QZXJrcyk7CgkJSWYoR2xvYmFsLk11dGF0b3JzX2FjdGl2YXRlZCAmJiBHbG9iYWwuV2F2ZSAlIDIgPT0gMSk7CgkJCUNhbGwgU3Vicm91dGluZShNVVRfQWRkX011dGF0b3IpOwoJCUVuZDsKCQlEaXNhYmxlIEJ1aWx0LUluIEdhbWUgTW9kZSBNdXNpYzsKCQlTZXQgTWF0Y2ggVGltZShHbG9iYWwuV2F2ZSA+PSA1ID8gMTUgOiAxMCk7CgkJV2FpdChHbG9iYWwuV2F2ZSA+PSA1ID8gMTUgOiAxMCwgSWdub3JlIENvbmRpdGlvbik7CgkJRW5hYmxlIEJ1aWx0LUluIEdhbWUgTW9kZSBNdXNpYzsKCQlNb2RpZnkgVGVhbSBTY29yZShUZWFtIDIsIDEpOwoJCUdsb2JhbC5XYXZlICs9IDE7CgkJR2xvYmFsLlNwYXduc19yZW1haW5pbmcgPSBUcnVlOwoJCUdsb2JhbC5JVl9IVlRfU3Bhd25fU2xvdF9TaXggPSBUcnVlOwoJCUdsb2JhbC5DYWxsZWRfSW5jb21pbmcgPSBGYWxzZTsKCQlHbG9iYWwuTXV0X0xhc3RfU3RhbmRfYWN0aXZlID0gRmFsc2U7CgkJQ2FsbCBTdWJyb3V0aW5lKFNjYWxlX0RhbWFnZSk7CgkJSWYoR2xvYmFsLldhdmUgPT0gMik7CgkJCVBsYXllcnMgSW4gU2xvdCgzLCBUZWFtIDEpLkxldmVsID0gMjsKCQkJUGxheWVycyBJbiBTbG90KDQsIFRlYW0gMSkuTGV2ZWwgPSAyOwoJCUVsc2UgSWYoR2xvYmFsLldhdmUgPT0gNCk7CgkJCVBsYXllcnMgSW4gU2xvdCg1LCBUZWFtIDEpLkxldmVsID0gMzsKCQlFbHNlIElmKEdsb2JhbC5XYXZlID09IDUpOwoJCQlQbGF5ZXJzIEluIFNsb3QoMiwgVGVhbSAxKS5MZXZlbCA9IDI7CgkJRWxzZSBJZihHbG9iYWwuV2F2ZSA9PSA3KTsKCQkJUGxheWVycyBJbiBTbG90KDQsIFRlYW0gMSkuTGV2ZWwgPSAzOwoJCUVsc2UgSWYoR2xvYmFsLldhdmUgPT0gOSk7CgkJCVBsYXllcnMgSW4gU2xvdCgxLCBUZWFtIDEpLkxldmVsID0gMjsKCQlFbHNlIElmKEdsb2JhbC5XYXZlID09IDExKTsKCQkJUGxheWVycyBJbiBTbG90KDMsIFRlYW0gMSkuTGV2ZWwgPSAzOwoJCUVsc2UgSWYoR2xvYmFsLldhdmUgPT0gMTMpOwoJCQlQbGF5ZXJzIEluIFNsb3QoMCwgVGVhbSAxKS5MZXZlbCA9IDI7CgkJRW5kOwoJfQp9CgpydWxlKCJJViBIVlQgR2xvYmFsOiBBbGxvdyBTcGF3bnMiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBHbG9iYWw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUdsb2JhbC5HYW1lbW9kZSA9PSBUcnVlOwoJCShHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMSB8fCBHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMikgPT0gVHJ1ZTsKCQlHbG9iYWwuU3Bhd25zX3JlbWFpbmluZyA9PSBGYWxzZTsKCQlOdW1iZXIgT2YgTGl2aW5nIFBsYXllcnMoVGVhbSAxKSA8PSA1ICsgR2xvYmFsLk11dF9SZWluZm9yY2VtZW50czsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgyMCAtIDIgKiBHbG9iYWwuQ29tYmF0YW50c19Db3VudCwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nID0gVHJ1ZTsKCX0KfQoKcnVsZSgiSVYgSFZUIEdsb2JhbDogQWxsb3cgU3Bhd25zIChBbGwgRW5lbWllcyBEZWFkKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEdsb2JhbDsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLkdhbWVtb2RlID09IFRydWU7CgkJKEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAxIHx8IEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAyKSA9PSBUcnVlOwoJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nID09IEZhbHNlOwoJCU51bWJlciBPZiBMaXZpbmcgUGxheWVycyhUZWFtIDEpIDw9IDEgKyBHbG9iYWwuTXV0X1JlaW5mb3JjZW1lbnRzOwoJfQoKCWFjdGlvbnMKCXsKCQlHbG9iYWwuU3Bhd25zX3JlbWFpbmluZyA9IFRydWU7Cgl9Cn0KCnJ1bGUoIklWIEhWVCBHbG9iYWw6IERpc2FsbG93IFNwYXducyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEdsb2JhbDsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLkdhbWVtb2RlID09IFRydWU7CgkJKEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAxIHx8IEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAyKSA9PSBUcnVlOwoJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nID09IFRydWU7CgkJTnVtYmVyIE9mIExpdmluZyBQbGF5ZXJzKFRlYW0gMSkgPT0gNzsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLlNwYXduc19yZW1haW5pbmcgPSBGYWxzZTsKCX0KfQoKcnVsZSgiR2xvYmFsOiBDb21tdW5pY2F0ZSBQcmVzcyB0aGUgQXR0YWNrLCBTZXQgTGFzdCBTdGFuZCBhY3RpdmUiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBHbG9iYWw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCShHbG9iYWwuR2FtZW1vZGUgPyBHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMyA6IEdsb2JhbC5TcGF3bnNfcmVtYWluaW5nIDw9IDAgJiYgR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyA8PSAwKQoJCQk9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihHbG9iYWwuTXV0X0xhc3RfU3RhbmQpOwoJCQlHbG9iYWwuTXV0X0xhc3RfU3RhbmRfYWN0aXZlID0gVHJ1ZTsKCQlFbmQ7CgkJQWJvcnQgSWYoR2xvYmFsLkdhbWVtb2RlID09IDAgJiYgR2xvYmFsLldhdmUgPT0gNSk7CgkJQ29tbXVuaWNhdGUoUmFuZG9tIFZhbHVlIEluIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzKSwgUHJlc3MgdGhlIEF0dGFjayk7Cgl9Cn0KCnJ1bGUoIkdsb2JhbDogRGVmZWF0IikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gR2xvYmFsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuV2F2ZSA+IDA7CgkJSXMgVHJ1ZSBGb3IgQWxsKEdsb2JhbC5Db21iYXRhbnRzLCBDdXJyZW50IEFycmF5IEVsZW1lbnQuRG93bmVkX3NpbmNlKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIEFib3J0IFdoZW4gRmFsc2UpOwoJCURlY2xhcmUgVGVhbSBWaWN0b3J5KFRlYW0gMSk7Cgl9Cn0KCnJ1bGUoIk1VVCBHbG9iYWw6IEFjdGl2YXRlIE11dGF0b3JzIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gR2xvYmFsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuTXV0YXRvcl9BY3RpdmF0aW9uX2xvY2tlZCA9PSBGYWxzZTsKCQlJcyBCdXR0b24gSGVsZChIb3N0IFBsYXllciwgQnV0dG9uKEludGVyYWN0KSkgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgyLCBBYm9ydCBXaGVuIEZhbHNlKTsKCQlBYm9ydCBJZiBDb25kaXRpb24gSXMgRmFsc2U7CgkJQmlnIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiTXV0YXRvcnMgYWN0aXZhdGVkISIpKTsKCQlEZXN0cm95IEhVRCBUZXh0KEdsb2JhbC5NdXRhdG9yX1N0YXJ0X0hVRCk7CgkJR2xvYmFsLk11dGF0b3JfQWN0aXZhdGlvbl9sb2NrZWQgPSBUcnVlOwoJCUdsb2JhbC5NdXRhdG9yc19hY3RpdmF0ZWQgPSBUcnVlOwoJCUdsb2JhbC5Nb25leSAqPSAyOwoJCUNhbGwgU3Vicm91dGluZShTY2FsZV9EYW1hZ2UpOwoJfQp9CgpydWxlKCJNVVQgU3Vicm91dGluZTogQWRkIE11dGF0b3IiKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJTVVUX0FkZF9NdXRhdG9yOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihHbG9iYWwuV2F2ZSA9PSAoR2xvYmFsLkdhbWVtb2RlID8gOSA6IDEzKSk7CgkJCUJpZyBNZXNzYWdlKEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoIkdhbWVjaGFuZ2luZyBNdXRhdG9yIGFkZGVkISIpKTsKCQkJR2xvYmFsLlRlbXAgPSBSYW5kb20gSW50ZWdlcigwLCAzKTsKCQkJSWYoR2xvYmFsLlRlbXAgPT0gMCk7CgkJCQlHbG9iYWwuR011dF9TdG9ybV9SYWdpbmcgPSBUcnVlOwoJCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoCgkJCQkJIlN0b3JtIFJhZ2luZzogU29tZSBlbmVtaWVzIGFyZSBlbnJhZ2VkLCBraWxsaW5nIHRoZW0gc3ByZWFkcyB0aGUgcmFnZSIpLCBSaWdodCwgLTQ5LjUwMCAtIENvdW50IE9mKEdsb2JhbC5CYWRfTXV0YXRvcnMpLAoJCQkJCUNvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihPcmFuZ2UpLCBWaXNpYmxlIFRvLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJU3RhcnQgRGFtYWdlIE1vZGlmaWNhdGlvbihHbG9iYWwuQ29tYmF0YW50cywgRmlsdGVyZWQgQXJyYXkoQWxsIFBsYXllcnMoVGVhbSAxKSwgQ3VycmVudCBBcnJheSBFbGVtZW50LkdNdXRfVmFyKSwgMTUwLAoJCQkJCVJlY2VpdmVycyBhbmQgRGFtYWdlcnMpOwoJCQlFbHNlIElmKEdsb2JhbC5UZW1wID09IDEpOwoJCQkJR2xvYmFsLkdNdXRfQ2xvc2VfUXVhcnRlcnMgPSBUcnVlOwoJCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoCgkJCQkJIkNsb3NlIFF1YXJ0ZXJzOiBFbmVtaWVzIGNhbiBvbmx5IGJlIGtpbGxlZCBpZiBhIHBsYXllciBpcyBuZWFyYnkiKSwgUmlnaHQsIC00OS41MDAgLSBDb3VudCBPZihHbG9iYWwuQmFkX011dGF0b3JzKSwgQ29sb3IoCgkJCQkJV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKE9yYW5nZSksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlGb3IgR2xvYmFsIFZhcmlhYmxlKFRlbXAsIDAsIEdsb2JhbC5HYW1lbW9kZSA/IDcgOiA2LCAxKTsKCQkJCQlDcmVhdGUgRWZmZWN0KEV2YWx1YXRlIE9uY2UoUGxheWVycyBJbiBTbG90KEdsb2JhbC5UZW1wLCBUZWFtIDEpKS5HTXV0X1ZhciA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwgU3BhcmtsZXMsIENvbG9yKAoJCQkJCQlZZWxsb3cpLCBQbGF5ZXJzIEluIFNsb3QoR2xvYmFsLlRlbXAsIFRlYW0gMSksIDEsIFZpc2libGUgVG8pOwoJCQkJRW5kOwoJCQlFbHNlIElmKEdsb2JhbC5UZW1wID09IDIpOwoJCQkJR2xvYmFsLkdNdXRfS2VlcF95b3VyX0Rpc3RhbmNlID0gVHJ1ZTsKCQkJCUNyZWF0ZSBIVUQgVGV4dChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBOdWxsLCBOdWxsLCBDdXN0b20gU3RyaW5nKAoJCQkJCSJLZWVwIHlvdXIgRGlzdGFuY2U6IEVuZW1pZXMgdGFrZSA0MCUgbGVzcyBkYW1hZ2UgZnJvbSBuZWFyYnkgcGxheWVycyIpLCBSaWdodCwgLTQ5LjUwMCAtIENvdW50IE9mKEdsb2JhbC5CYWRfTXV0YXRvcnMpLCBDb2xvcigKCQkJCQlXaGl0ZSksIENvbG9yKFdoaXRlKSwgQ29sb3IoT3JhbmdlKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJCUZvciBHbG9iYWwgVmFyaWFibGUoVGVtcCwgMCwgR2xvYmFsLkdhbWVtb2RlID8gNyA6IDYsIDEpOwoJCQkJCVN0YXJ0IERhbWFnZSBNb2RpZmljYXRpb24oRXZhbHVhdGUgT25jZShQbGF5ZXJzIEluIFNsb3QoR2xvYmFsLlRlbXAsIFRlYW0gMSkpLCBFdmFsdWF0ZSBPbmNlKFBsYXllcnMgSW4gU2xvdChHbG9iYWwuVGVtcCwgVGVhbSAxKSkKCQkJCQkJLkdNdXRfVmFyLCA2MCwgUmVjZWl2ZXJzIGFuZCBEYW1hZ2Vycyk7CgkJCQkJQ3JlYXRlIEVmZmVjdChFdmFsdWF0ZSBPbmNlKFBsYXllcnMgSW4gU2xvdChHbG9iYWwuVGVtcCwgVGVhbSAxKSkuR011dF9WYXIsIFNwYXJrbGVzLCBDb2xvcihXaGl0ZSksIFBsYXllcnMgSW4gU2xvdChHbG9iYWwuVGVtcCwKCQkJCQkJVGVhbSAxKSwgMSwgVmlzaWJsZSBUbyk7CgkJCQlFbmQ7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gMyk7CgkJCQlHbG9iYWwuR011dF9Gb3J0aWZpZWQgPSBUcnVlOwoJCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoCgkJCQkJIkZvcnRpZmllZDogRW5lbWllcyByZXNpc3Qgc3R1bnMsIGtub2NrYmFja3MsIGFuZCBnYWluIGV4dHJhIGFybW9yIiksIFJpZ2h0LCAtNDkuNTAwIC0gQ291bnQgT2YoR2xvYmFsLkJhZF9NdXRhdG9ycyksIENvbG9yKAoJCQkJCVdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihPcmFuZ2UpLCBWaXNpYmxlIFRvLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJQWRkIEhlYWx0aCBQb29sIFRvIFBsYXllcihBbGwgUGxheWVycyhUZWFtIDEpLCBBcm1vciwgNzUgKiAoMC4yMDAgKyAwLjIwMCAqIEdsb2JhbC5Db21iYXRhbnRzX0NvdW50KSwgVHJ1ZSwgVHJ1ZSk7CgkJCUVuZDsKCQlFbHNlIElmKEdsb2JhbC5CYWRfTXV0YXRvcnMgIT0gRW1wdHkgQXJyYXkpOwoJCQlCaWcgTWVzc2FnZShBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBDdXN0b20gU3RyaW5nKCJOZXcgTXV0YXRvciBhZGRlZCEiKSk7CgkJCUdsb2JhbC5UZW1wID0gUmFuZG9tIFZhbHVlIEluIEFycmF5KEdsb2JhbC5CYWRfTXV0YXRvcnMpOwoJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEJhZF9NdXRhdG9ycywgUmVtb3ZlIEZyb20gQXJyYXkgQnkgVmFsdWUsIEdsb2JhbC5UZW1wKTsKCQkJSWYoR2xvYmFsLlRlbXAgPT0gMCk7CgkJCQlHbG9iYWwuTXV0X0FtcGVkID0gVHJ1ZTsKCQkJCUNyZWF0ZSBIVUQgVGV4dChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBOdWxsLCBOdWxsLCBDdXN0b20gU3RyaW5nKCJBbXBlZDogRW5lbWllcyBtb3ZlIGFuZCB0dXJuIGZhc3RlciIpLCBSaWdodCwgLTUwIC0gQ291bnQgT2YoCgkJCQkJR2xvYmFsLkJhZF9NdXRhdG9ycyksIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihHcmVlbiksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gMSk7CgkJCQlHbG9iYWwuTXV0X0V4dGVuZGVkX0Fyc2VuYWwgPSBUcnVlOwoJCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoIkV4dGVuZGVkIEFyc2VuYWw6IEVuZW1pZXMgY2FuIHVzZSBhZGRpdGlvbmFsIGFiaWxpdGllcyIpLCBSaWdodCwKCQkJCQktNTAgLSBDb3VudCBPZihHbG9iYWwuQmFkX011dGF0b3JzKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKEdyZWVuKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSAyKTsKCQkJCUNyZWF0ZSBIVUQgVGV4dChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBOdWxsLCBOdWxsLCBDdXN0b20gU3RyaW5nKCJGcmVuenk6IEVuZW1pZXMgYmVsb3cgNTAlIGhlYWx0aCBkZWFsIDMwJSBtb3JlIGRhbWFnZSIpLCBSaWdodCwKCQkJCQktNTAgLSBDb3VudCBPZihHbG9iYWwuQmFkX011dGF0b3JzKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKEdyZWVuKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJCVN0YXJ0IERhbWFnZSBNb2RpZmljYXRpb24oR2xvYmFsLkNvbWJhdGFudHMsIEZpbHRlcmVkIEFycmF5KEFsbCBQbGF5ZXJzKFRlYW0gMSksIE5vcm1hbGl6ZWQgSGVhbHRoKEN1cnJlbnQgQXJyYXkgRWxlbWVudCkKCQkJCQk8PSAwLjUwMCksIDEzMCwgUmVjZWl2ZXJzIGFuZCBEYW1hZ2Vycyk7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gMyk7CgkJCQlHbG9iYWwuTXV0X1RoZV9DYXZhbHJ5ID0gVHJ1ZTsKCQkJCUNyZWF0ZSBIVUQgVGV4dChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBOdWxsLCBOdWxsLCBDdXN0b20gU3RyaW5nKCJUaGUgQ2F2YWxyeTogVHJhY2VyJ3Mgc3Bhd24gcmF0ZSBpcyBpbmNyZWFzZWQiKSwgUmlnaHQsCgkJCQkJLTUwIC0gQ291bnQgT2YoR2xvYmFsLkJhZF9NdXRhdG9ycyksIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihHcmVlbiksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gNCk7CgkJCQlHbG9iYWwuTXV0X1JlZ2VuZXJhdGlvbiA9IFRydWU7CgkJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygiUmVnZW5lcmF0aW9uOiBFbmVtaWVzIHNsb3dseSByZWdlbmVyYXRlIGhlYWx0aCIpLCBSaWdodCwKCQkJCQktNTAgLSBDb3VudCBPZihHbG9iYWwuQmFkX011dGF0b3JzKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKEdyZWVuKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSA1KTsKCQkJCUdsb2JhbC5NdXRfQ29tYmF0X01lZGljID0gVHJ1ZTsKCQkJCUNyZWF0ZSBIVUQgVGV4dChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBOdWxsLCBOdWxsLCBDdXN0b20gU3RyaW5nKCJDb21iYXQgTWVkaWM6IEJhcHRpc3RlJ3MgcmV2aXZlIGNvb2xkb3duIGlzIGhhbHZlZCIpLCBSaWdodCwKCQkJCQktNTAgLSBDb3VudCBPZihHbG9iYWwuQmFkX011dGF0b3JzKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKEdyZWVuKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSA2KTsKCQkJCUdsb2JhbC5NdXRfRU1QX1JvdW5kcyA9IFRydWU7CgkJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygKCQkJCQkiRU1QIFJvdW5kczogRW5lbWllcyBkZWFsIGRvdWJsZSBkYW1hZ2UgdG8gYmFycmllcnMgYW5kIG9iamVjdHMiKSwgUmlnaHQsIC01MCAtIENvdW50IE9mKEdsb2JhbC5CYWRfTXV0YXRvcnMpLCBDb2xvcihXaGl0ZSksCgkJCQkJQ29sb3IoV2hpdGUpLCBDb2xvcihHcmVlbiksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlTdGFydCBEYW1hZ2UgTW9kaWZpY2F0aW9uKEdsb2JhbC5Db21iYXRhbnRzLCBBbGwgUGxheWVycyhUZWFtIDEpLCA1MCwgUmVjZWl2ZXJzIGFuZCBEYW1hZ2Vycyk7CgkJCQlDYWxsIFN1YnJvdXRpbmUoU2NhbGVfRGFtYWdlKTsKCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSA3KTsKCQkJCUdsb2JhbC5NdXRfRGVhdGhfR3VhcmQgPSBUcnVlOwoJCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoCgkJCQkJIkRlYXRoIEd1YXJkOiBSZXZpdmluZyBzcGVlZCBpcyBoYWx2ZWQgd2hpbGUgZW5lbWllcyBhcmUgaW5zaWRlIHRoZSByaW5nIiksIFJpZ2h0LCAtNTAgLSBDb3VudCBPZihHbG9iYWwuQmFkX011dGF0b3JzKSwgQ29sb3IoCgkJCQkJV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKEdyZWVuKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSA4KTsKCQkJCUdsb2JhbC5NdXRfRGVlcF9Xb3VuZHMgPSBUcnVlOwoJCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoIkRlZXAgV291bmRzOiBIZWFsdGggcmVnZW5lcmF0aW9uIGRlbGF5IGlzIGRvdWJsZWQiKSwgUmlnaHQsCgkJCQkJLTUwIC0gQ291bnQgT2YoR2xvYmFsLkJhZF9NdXRhdG9ycyksIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihHcmVlbiksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gOSk7CgkJCQlHbG9iYWwuTXV0X0h1cnRfTWVfTW9yZSA9IFRydWU7CgkJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygKCQkJCQkiSHVydCBtZSBNb3JlOiBEb3duZWQgcGxheWVycyBlbWl0IGRhbWFnaW5nIHNtb2tlIGZvciAxMCBzZWNvbmRzIiksIFJpZ2h0LCAtNTAgLSBDb3VudCBPZihHbG9iYWwuQmFkX011dGF0b3JzKSwgQ29sb3IoV2hpdGUpLAoJCQkJCUNvbG9yKFdoaXRlKSwgQ29sb3IoR3JlZW4pLCBWaXNpYmxlIFRvLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQlFbHNlIElmKEdsb2JhbC5UZW1wID09IDEwKTsKCQkJCUdsb2JhbC5NdXRfTGFzdF9TdGFuZCA9IFRydWU7CgkJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygKCQkJCQkiTGFzdCBTdGFuZDogRmluYWwgZW5lbWllcyBnYWluIGRhbWFnZSByZXNpc3RhbmNlIGFuZCB1bnJlc3RyaWN0ZWQgYWJpbGl0aWVzIiksIFJpZ2h0LCAtNTAgLSBDb3VudCBPZihHbG9iYWwuQmFkX011dGF0b3JzKSwKCQkJCQlDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwgQ29sb3IoR3JlZW4pLCBWaXNpYmxlIFRvLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJSWYoR2xvYmFsLkdhbWVtb2RlID09IDEpOwoJCQkJCVN0YXJ0IERhbWFnZSBNb2RpZmljYXRpb24oQWxsIFBsYXllcnMoVGVhbSAxKSwgR2xvYmFsLkNvbWJhdGFudHMsIEdsb2JhbC5NdXRfTGFzdF9TdGFuZF9hY3RpdmUgPyA4MCA6IDEwMCwKCQkJCQkJUmVjZWl2ZXJzIERhbWFnZXJzIGFuZCBEYW1hZ2UgUGVyY2VudCk7CgkJCQlFbHNlOwoJCQkJCVN0YXJ0IERhbWFnZSBNb2RpZmljYXRpb24oQWxsIFBsYXllcnMoVGVhbSAxKSwgR2xvYmFsLkNvbWJhdGFudHMsIEdsb2JhbC5NdXRfTGFzdF9TdGFuZF9hY3RpdmUgPyA3MCA6IDEwMCwKCQkJCQkJUmVjZWl2ZXJzIERhbWFnZXJzIGFuZCBEYW1hZ2UgUGVyY2VudCk7CgkJCQlFbmQ7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gMTEpOwoJCQkJR2xvYmFsLk11dF9BZHZhbmNlZF9NZWRraXQgPSBUcnVlOwoJCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoIkFkdmFuY2VkIE1lZGtpdDogQmFwdGlzdGUgY2FuIHJldml2ZSBib3NzZXMiKSwgUmlnaHQsCgkJCQkJLTUwIC0gQ291bnQgT2YoR2xvYmFsLkJhZF9NdXRhdG9ycyksIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihHcmVlbiksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gMTIpOwoJCQkJR2xvYmFsLk11dF9SZWluZm9yY2VtZW50cyA9IFRydWU7CgkJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygiUmVpbmZvcmNlbWVudHM6IEVuZW15IHNwYXduIHJhdGUgaXMgaW5jcmVhc2VkIiksIFJpZ2h0LAoJCQkJCS01MCAtIENvdW50IE9mKEdsb2JhbC5CYWRfTXV0YXRvcnMpLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwgQ29sb3IoR3JlZW4pLCBWaXNpYmxlIFRvLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQlFbHNlIElmKEdsb2JhbC5UZW1wID09IDEzKTsKCQkJCUdsb2JhbC5NdXRfTXV0YXRpb24gPSBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygKCQkJCQkiTXV0YXRpb246IEVuZW1pZXMgaGF2ZSBhIGNoYW5jZSB0byBzcGF3biB3aXRoIGluY3JlYXNlZCBzdHJlbmd0aCBhbmQgc2l6ZSIpLCBSaWdodCwgLTUwIC0gQ291bnQgT2YoR2xvYmFsLkJhZF9NdXRhdG9ycyksCgkJCQkJQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKEdyZWVuKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJCUNyZWF0ZSBFZmZlY3QoSXMgVHJ1ZSBGb3IgQW55KEFsbCBQbGF5ZXJzKFRlYW0gMSksIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jc19tdXRhdGVkKSA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwKCQkJCQlTcGFya2xlcywgQ29sb3IoUmVkKSwgRmlyc3QgT2YoRmlsdGVyZWQgQXJyYXkoQWxsIFBsYXllcnMoVGVhbSAxKSwgQ3VycmVudCBBcnJheSBFbGVtZW50LklzX211dGF0ZWQpKSwgMSwKCQkJCQlWaXNpYmxlIFRvIFBvc2l0aW9uIGFuZCBSYWRpdXMpOwoJCQkJU3RhcnQgRGFtYWdlIE1vZGlmaWNhdGlvbihHbG9iYWwuQ29tYmF0YW50cywgRmlsdGVyZWQgQXJyYXkoQWxsIFBsYXllcnMoVGVhbSAxKSwgQ3VycmVudCBBcnJheSBFbGVtZW50LklzX211dGF0ZWQpLCAxMzAsCgkJCQkJUmVjZWl2ZXJzIGFuZCBEYW1hZ2Vycyk7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gMTQpOwoJCQkJR2xvYmFsLk11dF9Qcm9tb3Rpb24gPSBUcnVlOwoJCQkJQ3JlYXRlIEhVRCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIE51bGwsIE51bGwsIEN1c3RvbSBTdHJpbmcoCgkJCQkJIlByb21vdGlvbjogRW5lbWllcyBoYXZlIGEgY2hhbmNlIHRvIHNwYXduIGFzIGEgaGlnaGVyIHRpZXIgaGVybyIpLCBSaWdodCwgLTUwIC0gQ291bnQgT2YoR2xvYmFsLkJhZF9NdXRhdG9ycyksIENvbG9yKFdoaXRlKSwKCQkJCQlDb2xvcihXaGl0ZSksIENvbG9yKEdyZWVuKSwgVmlzaWJsZSBUbywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSAxNSk7CgkJCQlDcmVhdGUgSFVEIFRleHQoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgTnVsbCwgTnVsbCwgQ3VzdG9tIFN0cmluZygiTm8gRmx5IFpvbmU6IEVuZW1pZXMgZGVhbCAyNSUgbW9yZSBkYW1hZ2UgdG8gZmx5aW5nIHBsYXllcnMiKSwKCQkJCQlSaWdodCwgLTUwIC0gQ291bnQgT2YoR2xvYmFsLkJhZF9NdXRhdG9ycyksIENvbG9yKFdoaXRlKSwgQ29sb3IoV2hpdGUpLCBDb2xvcihHcmVlbiksIFZpc2libGUgVG8sIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlTdGFydCBEYW1hZ2UgTW9kaWZpY2F0aW9uKEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLCBDdXJyZW50IEFycmF5IEVsZW1lbnQuSXNfZmx5aW5nKSwgQWxsIFBsYXllcnMoVGVhbSAxKSwgMTI1LAoJCQkJCVJlY2VpdmVycyBhbmQgRGFtYWdlcnMpOwoJCQlFbmQ7CgkJRW5kOwoJfQp9CgpydWxlKCJTdWJyb3V0aW5lOiBTZXQgUmFuZG9tIFBlcmtzIikKewoJZXZlbnQKCXsKCQlTdWJyb3V0aW5lOwoJCVNldF9SYW5kb21fUGVya3M7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKENvdW50IE9mKEdsb2JhbC5DdXJyZW50X1BlcmtzX0hVRHMpKTsKCQkJRGVzdHJveSBJbi1Xb3JsZCBUZXh0KEdsb2JhbC5DdXJyZW50X1BlcmtzX0hVRHNbMF0pOwoJCQlEZXN0cm95IEluLVdvcmxkIFRleHQoR2xvYmFsLkN1cnJlbnRfUGVya3NfSFVEc1sxXSk7CgkJCURlc3Ryb3kgSW4tV29ybGQgVGV4dChHbG9iYWwuQ3VycmVudF9QZXJrc19IVURzWzJdKTsKCQkJRGVzdHJveSBJbi1Xb3JsZCBUZXh0KEdsb2JhbC5DdXJyZW50X1BlcmtzX0hVRHNbM10pOwoJCUVuZDsKCQlHbG9iYWwuQ3VycmVudF9QZXJrc19IVURzID0gRW1wdHkgQXJyYXk7CgkJR2xvYmFsLkN1cnJlbnRfUGVya3MgPSBBcnJheSBTbGljZShSYW5kb21pemVkIEFycmF5KFJlbW92ZSBGcm9tIEFycmF5KEFycmF5KDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSksCgkJCUdsb2JhbC5DdXJyZW50X1BlcmtzKSksIDAsIDIpOwoJCUZvciBHbG9iYWwgVmFyaWFibGUoVGVtcCwgMCwgMiwgMSk7CgkJCUlmKEdsb2JhbC5DdXJyZW50X1BlcmtzW0dsb2JhbC5UZW1wXSA9PSAwKTsKCQkJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19TaG9ja3Byb29mKSwgQ3VzdG9tIFN0cmluZygiU2hvY2twcm9vZlxu4oCBICAgNTAwJCIpLAoJCQkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAoR2xvYmFsLlRlbXAgPyAyNSA6IDIuNTAwKQoJCQkJCSogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDExMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwgRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKAoJCQkJCUdyYXkpLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShDdXJyZW50X1BlcmtzX0hVRHMsIEFwcGVuZCBUbyBBcnJheSwgTGFzdCBUZXh0IElEKTsKCQkJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiAhQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfU2hvY2twcm9vZiksIEN1c3RvbSBTdHJpbmcoIlNob2NrcHJvb2ZcbuKAgSAgIDUwMCQiKSwKCQkJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gKEdsb2JhbC5UZW1wID8gMjUgOiAyLjUwMCkKCQkJCQkqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcigKCQkJCQlHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQlFbHNlIElmKEdsb2JhbC5DdXJyZW50X1BlcmtzW0dsb2JhbC5UZW1wXSA9PSAxKTsKCQkJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19CdWxsZXRzdG9ybSksIEN1c3RvbSBTdHJpbmcoIkJ1bGxldHN0b3JtXG7igIEgICA4MDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmICFDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19CdWxsZXRzdG9ybSksIEN1c3RvbSBTdHJpbmcoIkJ1bGxldHN0b3JtXG7igIEgICA4MDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShDdXJyZW50X1BlcmtzX0hVRHMsIEFwcGVuZCBUbyBBcnJheSwgTGFzdCBUZXh0IElEKTsKCQkJRWxzZSBJZihHbG9iYWwuQ3VycmVudF9QZXJrc1tHbG9iYWwuVGVtcF0gPT0gMik7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfRGllX0hhcmQpLCBDdXN0b20gU3RyaW5nKCJEaWUgSGFyZFxu4oCBNjAwJCIpLAoJCQkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAoR2xvYmFsLlRlbXAgPyAyNSA6IDIuNTAwKQoJCQkJCSogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDExMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwgRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKAoJCQkJCUdyYXkpLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShDdXJyZW50X1BlcmtzX0hVRHMsIEFwcGVuZCBUbyBBcnJheSwgTGFzdCBUZXh0IElEKTsKCQkJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiAhQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfRGllX0hhcmQpLCBDdXN0b20gU3RyaW5nKCJEaWUgSGFyZFxu4oCBNjAwJCIpLAoJCQkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAoR2xvYmFsLlRlbXAgPyAyNSA6IDIuNTAwKQoJCQkJCSogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDExMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwgRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKAoJCQkJCUdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJCU1vZGlmeSBHbG9iYWwgVmFyaWFibGUoQ3VycmVudF9QZXJrc19IVURzLCBBcHBlbmQgVG8gQXJyYXksIExhc3QgVGV4dCBJRCk7CgkJCUVsc2UgSWYoR2xvYmFsLkN1cnJlbnRfUGVya3NbR2xvYmFsLlRlbXBdID09IDMpOwoJCQkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5QZXJrX1B1bXBpbmdfSXJvbiksIEN1c3RvbSBTdHJpbmcoIlB1bXBpbmcgSXJvblxu4oCB4oCBIDcwMCQiKSwKCQkJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gKEdsb2JhbC5UZW1wID8gMjUgOiAyLjUwMCkKCQkJCQkqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcigKCQkJCQlHcmF5KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJCU1vZGlmeSBHbG9iYWwgVmFyaWFibGUoQ3VycmVudF9QZXJrc19IVURzLCBBcHBlbmQgVG8gQXJyYXksIExhc3QgVGV4dCBJRCk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgIUN1cnJlbnQgQXJyYXkgRWxlbWVudC5QZXJrX1B1bXBpbmdfSXJvbiksIEN1c3RvbSBTdHJpbmcoIlB1bXBpbmcgSXJvblxu4oCB4oCBIDcwMCQiKSwKCQkJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gKEdsb2JhbC5UZW1wID8gMjUgOiAyLjUwMCkKCQkJCQkqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcigKCQkJCQlHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQlFbHNlIElmKEdsb2JhbC5DdXJyZW50X1BlcmtzW0dsb2JhbC5UZW1wXSA9PSA0KTsKCQkJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19UZXJyaWZ5KSwgQ3VzdG9tIFN0cmluZygiVGVycmlmeVxuIDEwMDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmICFDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19UZXJyaWZ5KSwgQ3VzdG9tIFN0cmluZygiVGVycmlmeVxuIDEwMDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShDdXJyZW50X1BlcmtzX0hVRHMsIEFwcGVuZCBUbyBBcnJheSwgTGFzdCBUZXh0IElEKTsKCQkJRWxzZSBJZihHbG9iYWwuQ3VycmVudF9QZXJrc1tHbG9iYWwuVGVtcF0gPT0gNSk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfUnVubmluZ19SaW90KSwgQ3VzdG9tIFN0cmluZygiUnVubmluZyBSaW90XG7igIHigIE3MDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmICFDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19SdW5uaW5nX1Jpb3QpLCBDdXN0b20gU3RyaW5nKCJSdW5uaW5nIFJpb3RcbuKAgeKAgTcwMCQiKSwKCQkJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gKEdsb2JhbC5UZW1wID8gMjUgOiAyLjUwMCkKCQkJCQkqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcigKCQkJCQlHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQlFbHNlIElmKEdsb2JhbC5DdXJyZW50X1BlcmtzW0dsb2JhbC5UZW1wXSA9PSA2KTsKCQkJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19VcF9Zb3VfR28pLCBDdXN0b20gU3RyaW5nKCJVcCBZb3UgR29cbuKAgTEwMDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmICFDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19VcF9Zb3VfR28pLCBDdXN0b20gU3RyaW5nKCJVcCBZb3UgR29cbuKAgTEwMDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShDdXJyZW50X1BlcmtzX0hVRHMsIEFwcGVuZCBUbyBBcnJheSwgTGFzdCBUZXh0IElEKTsKCQkJRWxzZSBJZihHbG9iYWwuQ3VycmVudF9QZXJrc1tHbG9iYWwuVGVtcF0gPT0gNyk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfU3RhYmlsaXplciksIEN1c3RvbSBTdHJpbmcoIlN0YWJpbGl6ZXJcbuKAgTgwMCQiKSwKCQkJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gKEdsb2JhbC5UZW1wID8gMjUgOiAyLjUwMCkKCQkJCQkqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcigKCQkJCQlHcmF5KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJCU1vZGlmeSBHbG9iYWwgVmFyaWFibGUoQ3VycmVudF9QZXJrc19IVURzLCBBcHBlbmQgVG8gQXJyYXksIExhc3QgVGV4dCBJRCk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgIUN1cnJlbnQgQXJyYXkgRWxlbWVudC5QZXJrX1N0YWJpbGl6ZXIpLCBDdXN0b20gU3RyaW5nKCJTdGFiaWxpemVyXG7igIE4MDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShDdXJyZW50X1BlcmtzX0hVRHMsIEFwcGVuZCBUbyBBcnJheSwgTGFzdCBUZXh0IElEKTsKCQkJRWxzZSBJZihHbG9iYWwuQ3VycmVudF9QZXJrc1tHbG9iYWwuVGVtcF0gPT0gOCk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfTmVtZXNpcyksIEN1c3RvbSBTdHJpbmcoIk5lbWVzaXNcbiAgIDgwMCQiKSwKCQkJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gKEdsb2JhbC5UZW1wID8gMjUgOiAyLjUwMCkKCQkJCQkqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcigKCQkJCQlHcmF5KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJCU1vZGlmeSBHbG9iYWwgVmFyaWFibGUoQ3VycmVudF9QZXJrc19IVURzLCBBcHBlbmQgVG8gQXJyYXksIExhc3QgVGV4dCBJRCk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgIUN1cnJlbnQgQXJyYXkgRWxlbWVudC5QZXJrX05lbWVzaXMpLCBDdXN0b20gU3RyaW5nKCJOZW1lc2lzXG4gICA4MDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JlZW4pLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShDdXJyZW50X1BlcmtzX0hVRHMsIEFwcGVuZCBUbyBBcnJheSwgTGFzdCBUZXh0IElEKTsKCQkJRWxzZSBJZihHbG9iYWwuQ3VycmVudF9QZXJrc1tHbG9iYWwuVGVtcF0gPT0gOSk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfTXlzdGVyeV9Td2FwKSwgQ3VzdG9tIFN0cmluZygiTXlzdGVyeSBTd2FwXG7igIHigIE1MDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmICFDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19NeXN0ZXJ5X1N3YXApLCBDdXN0b20gU3RyaW5nKCJNeXN0ZXJ5IFN3YXBcbuKAgeKAgTUwMCQiKSwKCQkJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gKEdsb2JhbC5UZW1wID8gMjUgOiAyLjUwMCkKCQkJCQkqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcigKCQkJCQlHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQlFbHNlIElmKEdsb2JhbC5DdXJyZW50X1BlcmtzW0dsb2JhbC5UZW1wXSA9PSAxMCk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfSGVhdnlfV2VpZ2h0KSwgQ3VzdG9tIFN0cmluZygiSGVhdnkgV2VpZ2h0XG7igIHigIE2MDAkIiksCgkJCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtIChHbG9iYWwuVGVtcCA/IDI1IDogMi41MDApCgkJCQkJKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzFdIC0gMTEyLjUwMCAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMF0sIDIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbywgQ29sb3IoCgkJCQkJR3JheSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LkluX0J1eV9NZW51X1NpbmNlICYmICFDdXJyZW50IEFycmF5IEVsZW1lbnQuUGVya19IZWF2eV9XZWlnaHQpLCBDdXN0b20gU3RyaW5nKCJIZWF2eSBXZWlnaHRcbuKAgeKAgTYwMCQiKSwKCQkJCQlHbG9iYWwuQnV5X01lbnVfUG9zIC0gKEdsb2JhbC5UZW1wID8gMjUgOiAyLjUwMCkKCQkJCQkqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0gLSAxMTIuNTAwICogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFswXSwgMi41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLCBDb2xvcigKCQkJCQlHcmVlbiksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCQlNb2RpZnkgR2xvYmFsIFZhcmlhYmxlKEN1cnJlbnRfUGVya3NfSFVEcywgQXBwZW5kIFRvIEFycmF5LCBMYXN0IFRleHQgSUQpOwoJCQlFbHNlIElmKEdsb2JhbC5DdXJyZW50X1BlcmtzW0dsb2JhbC5UZW1wXSA9PSAxMSk7CgkJCQlDcmVhdGUgSW4tV29ybGQgVGV4dChGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQuSW5fQnV5X01lbnVfU2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfU2hhcnBzaG9vdGVyKSwgQ3VzdG9tIFN0cmluZygiU2hhcnBzaG9vdGVyXG7igIHigIEgODAwJCIpLAoJCQkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAoR2xvYmFsLlRlbXAgPyAyNSA6IDIuNTAwKQoJCQkJCSogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDExMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwgRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKAoJCQkJCUdyYXkpLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQkJTW9kaWZ5IEdsb2JhbCBWYXJpYWJsZShDdXJyZW50X1BlcmtzX0hVRHMsIEFwcGVuZCBUbyBBcnJheSwgTGFzdCBUZXh0IElEKTsKCQkJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jbl9CdXlfTWVudV9TaW5jZSAmJiAhQ3VycmVudCBBcnJheSBFbGVtZW50LlBlcmtfU2hhcnBzaG9vdGVyKSwgQ3VzdG9tIFN0cmluZygiU2hhcnBzaG9vdGVyXG7igIHigIEgODAwJCIpLAoJCQkJCUdsb2JhbC5CdXlfTWVudV9Qb3MgLSAoR2xvYmFsLlRlbXAgPyAyNSA6IDIuNTAwKQoJCQkJCSogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSAtIDExMi41MDAgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdLCAyLjUwMCwgRG8gTm90IENsaXAsIFZpc2libGUgVG8sIENvbG9yKAoJCQkJCUdyZWVuKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJCU1vZGlmeSBHbG9iYWwgVmFyaWFibGUoQ3VycmVudF9QZXJrc19IVURzLCBBcHBlbmQgVG8gQXJyYXksIExhc3QgVGV4dCBJRCk7CgkJCUVuZDsKCQlFbmQ7Cgl9Cn0KCnJ1bGUoIlN1YnJvdXRpbmU6IExlYXZlIEJ1eSBNZW51IikKewoJZXZlbnQKCXsKCQlTdWJyb3V0aW5lOwoJCUxlYXZlX0J1eV9NZW51OwoJfQoKCWFjdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSW5fQnV5X01lbnVfU2luY2UgPSAwOwoJCUVuYWJsZSBNb3ZlbWVudCBDb2xsaXNpb24gV2l0aCBQbGF5ZXJzKEV2ZW50IFBsYXllcik7CgkJRW5hYmxlIEhlcm8gSFVEKEV2ZW50IFBsYXllcik7CgkJU2V0IEZhY2luZyhFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5BYl9WYXJfMywgVG8gV29ybGQpOwoJCUlmKCFFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlKTsKCQkJU3RvcCBDYW1lcmEoRXZlbnQgUGxheWVyKTsKCQlFbmQ7CgkJU2V0IEFpbSBTcGVlZChFdmVudCBQbGF5ZXIsIDEwMCk7CgkJU3RvcCBGb3JjaW5nIFRocm90dGxlKEV2ZW50IFBsYXllcik7CgkJU2V0IFByaW1hcnkgRmlyZSBFbmFibGVkKEV2ZW50IFBsYXllciwgVHJ1ZSk7CgkJU2V0IFNlY29uZGFyeSBGaXJlIEVuYWJsZWQoRXZlbnQgUGxheWVyLCBUcnVlKTsKCQlTZXQgQWJpbGl0eSAxIEVuYWJsZWQoRXZlbnQgUGxheWVyLCBUcnVlKTsKCQlTZXQgQWJpbGl0eSAyIEVuYWJsZWQoRXZlbnQgUGxheWVyLCBUcnVlKTsKCQlTZXQgTWVsZWUgRW5hYmxlZChFdmVudCBQbGF5ZXIsIFRydWUpOwoJCVNldCBKdW1wIEVuYWJsZWQoRXZlbnQgUGxheWVyLCBUcnVlKTsKCQlTZXQgQ3JvdWNoIEVuYWJsZWQoRXZlbnQgUGxheWVyLCBUcnVlKTsKCQlBbGxvdyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oVWx0aW1hdGUpKTsKCX0KfQoKcnVsZSgiVGVhbSAyOiBUZWxlcG9ydCB0byBCdXkgWm9uZSAoUmVsb2FkKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IEZhbHNlOwoJCUlzIEJ1dHRvbiBIZWxkKEV2ZW50IFBsYXllciwgQnV0dG9uKFJlbG9hZCkpID09IFRydWU7CgkJKCFHbG9iYWwuV2F2ZSB8fCBNYXRjaCBUaW1lKSA9PSBUcnVlOwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBHbG9iYWwuQWJpbGl0eV9CdXlfTG9jYXRpb24pID4gMjsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgwLjQwMCwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEdvb2QgUGlja3VwIEVmZmVjdCwgQ29sb3IoWWVsbG93KSwgUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSwgMSk7CgkJVGVsZXBvcnQoRXZlbnQgUGxheWVyLCBHbG9iYWwuQWJpbGl0eV9CdXlfTG9jYXRpb24pOwoJfQp9CgpydWxlKCJUZWFtIDI6IE9wZW4gLyBMZWF2ZSBCdXkgTWVudSwgTGFzdCBGYWNpbmcgKDMpIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJSXMgQnV0dG9uIEhlbGQoRXZlbnQgUGxheWVyLCBCdXR0b24oSW50ZXJhY3QpKSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPT0gRmFsc2U7CgkJTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA+PSAwLjUwMDsKCQlIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgU3R1bm5lZCkgPT0gRmFsc2U7CgkJRXZlbnQgUGxheWVyLlRhc2VkX3VudGlsIDwgVG90YWwgVGltZSBFbGFwc2VkOwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBHbG9iYWwuQWJpbGl0eV9CdXlfTG9jYXRpb24pIDw9IDI7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKEV2ZW50IFBsYXllci5Jbl9CdXlfTWVudV9TaW5jZSk7CgkJCUNhbGwgU3Vicm91dGluZShMZWF2ZV9CdXlfTWVudSk7CgkJRWxzZTsKCQkJQXBwbHkgSW1wdWxzZShFdmVudCBQbGF5ZXIsIC0xICogRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oVmVsb2NpdHkgT2YoRXZlbnQgUGxheWVyKSksIDApLCAwLjAwMSwKCQkJCVRvIFdvcmxkLCBDYW5jZWwgQ29udHJhcnkgTW90aW9uIFhZWik7CgkJCUV2ZW50IFBsYXllci5BYl9WYXJfMyA9IEZhY2luZyBEaXJlY3Rpb24gT2YoRXZlbnQgUGxheWVyKTsKCQkJRXZlbnQgUGxheWVyLkluX0J1eV9NZW51X1NpbmNlID0gVG90YWwgVGltZSBFbGFwc2VkOwoJCQlEaXNhYmxlIE1vdmVtZW50IENvbGxpc2lvbiBXaXRoIFBsYXllcnMoRXZlbnQgUGxheWVyKTsKCQkJRGlzYWJsZSBIZXJvIEhVRChFdmVudCBQbGF5ZXIpOwoJCQlTZXQgRmFjaW5nKEV2ZW50IFBsYXllciwgRm9yd2FyZCwgVG8gV29ybGQpOwoJCQlTdGFydCBDYW1lcmEoRXZlbnQgUGxheWVyLCBHbG9iYWwuQnV5X01lbnVfQ2FtX1BvcywgR2xvYmFsLkJ1eV9NZW51X0NhbV9Qb3MgKyBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzJdLCAwKTsKCQkJU2V0IEFpbSBTcGVlZChFdmVudCBQbGF5ZXIsIDIwMCk7CgkJCVN0YXJ0IEZvcmNpbmcgVGhyb3R0bGUoRXZlbnQgUGxheWVyLCAwLCAwLCAwLCAwLCAwLCAwKTsKCQkJU2V0IFByaW1hcnkgRmlyZSBFbmFibGVkKEV2ZW50IFBsYXllciwgRmFsc2UpOwoJCQlTZXQgU2Vjb25kYXJ5IEZpcmUgRW5hYmxlZChFdmVudCBQbGF5ZXIsIEZhbHNlKTsKCQkJU2V0IEFiaWxpdHkgMSBFbmFibGVkKEV2ZW50IFBsYXllciwgRmFsc2UpOwoJCQlTZXQgQWJpbGl0eSAyIEVuYWJsZWQoRXZlbnQgUGxheWVyLCBGYWxzZSk7CgkJCVNldCBNZWxlZSBFbmFibGVkKEV2ZW50IFBsYXllciwgRmFsc2UpOwoJCQlTZXQgSnVtcCBFbmFibGVkKEV2ZW50IFBsYXllciwgRmFsc2UpOwoJCQlTZXQgQ3JvdWNoIEVuYWJsZWQoRXZlbnQgUGxheWVyLCBGYWxzZSk7CgkJCURpc2FsbG93IEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihVbHRpbWF0ZSkpOwoJCUVuZDsKCQlXYWl0KDAuMDUwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCX0KfQoKcnVsZSgiVGVhbSAyOiBMZWF2ZSBCdXkgTWVudSB3aGVuIGRvd25lZCwgaGVhbHRoIGxvdywgc3R1bm5lZCwgdGFzZWQgb3IgbW92ZWQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSW5fQnV5X01lbnVfU2luY2UgPT0gVHJ1ZTsKCQkoRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSB8fCBOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIpIDwgMC41MDAgfHwgSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFN0dW5uZWQpCgkJCXx8IEV2ZW50IFBsYXllci5UYXNlZF91bnRpbCA+PSBUb3RhbCBUaW1lIEVsYXBzZWQgfHwgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEdsb2JhbC5BYmlsaXR5X0J1eV9Mb2NhdGlvbikgPiAyKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlDYWxsIFN1YnJvdXRpbmUoTGVhdmVfQnV5X01lbnUpOwoJfQp9CgpydWxlKCJUZWFtIDI6IEJ1eSBBYmlsaXR5IikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkluX0J1eV9NZW51X1NpbmNlID09IFRydWU7CgkJSXMgQnV0dG9uIEhlbGQoRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSkgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoRXZlbnQgUGxheWVyLkluX0J1eV9NZW51X1NpbmNlICsgMC4xMDAgPj0gVG90YWwgVGltZSBFbGFwc2VkIHx8IEFic29sdXRlIFZhbHVlKEhvcml6b250YWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikpCgkJCT4gMTM1IHx8IEFic29sdXRlIFZhbHVlKFZlcnRpY2FsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIpICsgMTEuMjUwKQoJCQk+IDQ1IHx8IEV2ZW50IFBsYXllci5UYXNlZF91bnRpbCA+PSBUb3RhbCBUaW1lIEVsYXBzZWQpOwoJCUdsb2JhbC5UZW1wID0gQXJyYXkoTWF4KDAsIE1pbig1LCBSb3VuZCBUbyBJbnRlZ2VyKChIb3Jpem9udGFsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIpICsgMTM1KSAvIDQ1LCBEb3duKSkpLCBNYXgoMCwgTWluKDMsCgkJCVJvdW5kIFRvIEludGVnZXIoKFZlcnRpY2FsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIpICsgNTYuMjUwKSAvIDIyLjUwMCwgRG93bikpKSk7CgkJSWYoR2xvYmFsLlRlbXBbMV0gPT0gMCk7CgkJCUlmKEdsb2JhbC5UZW1wWzBdIDw9IDEpOwoJCQkJQ2FsbCBTdWJyb3V0aW5lKExlYXZlX0J1eV9NZW51KTsKCQkJRWxzZSBJZihHbG9iYWwuVGVtcFswXSA+PSA0KTsKCQkJCUlmKEV2ZW50IFBsYXllci5Nb25leV9zcGVudCk7CgkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ID0gMDsKCQkJCQlFdmVudCBQbGF5ZXIuQWJfSGVhZGh1bnRlciA9IDA7CgkJCQkJRXZlbnQgUGxheWVyLkFiX1F1aWNrX0ZpeCA9IDA7CgkJCQkJRXZlbnQgUGxheWVyLkFiX0NoYXJnZWQgPSAwOwoJCQkJCUV2ZW50IFBsYXllci5BYl9IZWF2eV9JbXBhY3QgPSAwOwoJCQkJCUV2ZW50IFBsYXllci5BYl9TZWNvbmRfV2luZCA9IDA7CgkJCQkJRXZlbnQgUGxheWVyLkFiX0JpbmRpbmdfSGVhbCA9IDA7CgkJCQkJRXZlbnQgUGxheWVyLkFiX1Jlc2lsaWVuY2UgPSAwOwoJCQkJCUV2ZW50IFBsYXllci5BYl9BbWJ1c2ggPSAwOwoJCQkJCUV2ZW50IFBsYXllci5BYl9IYXN0ZSA9IDA7CgkJCQkJRXZlbnQgUGxheWVyLkFiX1ByaW9yaXR5ID0gMDsKCQkJCQlFdmVudCBQbGF5ZXIuSGVhbHRoX1BlcmNlbnQgLT0gRXZlbnQgUGxheWVyLkFiX0hlYWx0aF9Cb251czsKCQkJCQlFdmVudCBQbGF5ZXIuQWJfSGVhbHRoX0JvbnVzID0gMDsKCQkJCQlFdmVudCBQbGF5ZXIuRGFtYWdlX0RlYWx0X1BlcmNlbnQgLT0gRXZlbnQgUGxheWVyLkFiX0RhbWFnZV9Cb251czsKCQkJCQlFdmVudCBQbGF5ZXIuQWJfRGFtYWdlX0JvbnVzID0gMDsKCQkJCQlFdmVudCBQbGF5ZXIuSGVhbGluZ19EZWFsdF9QZXJjZW50IC09IEV2ZW50IFBsYXllci5BYl9IZWFsaW5nX0JvbnVzOwoJCQkJCUV2ZW50IFBsYXllci5BYl9IZWFsaW5nX0JvbnVzID0gMDsKCQkJCQlFdmVudCBQbGF5ZXIuUGVya19TaG9ja3Byb29mID0gRmFsc2U7CgkJCQkJSWYoRXZlbnQgUGxheWVyLlBlcmtfQnVsbGV0c3Rvcm0pOwoJCQkJCQlTZXQgQW1tbyhFdmVudCBQbGF5ZXIsIDAsIE1heCBBbW1vKEV2ZW50IFBsYXllciwgMCkpOwoJCQkJCQlTZXQgQW1tbyhFdmVudCBQbGF5ZXIsIDEsIE1heCBBbW1vKEV2ZW50IFBsYXllciwgMSkpOwoJCQkJCQlFdmVudCBQbGF5ZXIuUGVya19CdWxsZXRzdG9ybSA9IEZhbHNlOwoJCQkJCUVuZDsKCQkJCQlFdmVudCBQbGF5ZXIuUGVya19EaWVfSGFyZCA9IEZhbHNlOwoJCQkJCUV2ZW50IFBsYXllci5QZXJrX1B1bXBpbmdfSXJvbiA9IEZhbHNlOwoJCQkJCUV2ZW50IFBsYXllci5QZXJrX1RlcnJpZnkgPSBGYWxzZTsKCQkJCQlFdmVudCBQbGF5ZXIuUGVya19SdW5uaW5nX1Jpb3QgPSBGYWxzZTsKCQkJCQlFdmVudCBQbGF5ZXIuUGVya19VcF9Zb3VfR28gPSBGYWxzZTsKCQkJCQlFdmVudCBQbGF5ZXIuUGVya19TdGFiaWxpemVyID0gRmFsc2U7CgkJCQkJRXZlbnQgUGxheWVyLlBlcmtfTmVtZXNpcyA9IEZhbHNlOwoJCQkJCUlmKEV2ZW50IFBsYXllci5QZXJrX015c3RlcnlfU3dhcCk7CgkJCQkJCUV2ZW50IFBsYXllci5IZWFsdGhfUGVyY2VudCAtPSAyMDsKCQkJCQkJRXZlbnQgUGxheWVyLkRhbWFnZV9EZWFsdF9QZXJjZW50IC09IDIwOwoJCQkJCQlFdmVudCBQbGF5ZXIuSGVhbGluZ19EZWFsdF9QZXJjZW50IC09IDIwOwoJCQkJCQlTdG9wIEZvcmNpbmcgUGxheWVyIFRvIEJlIEhlcm8oRXZlbnQgUGxheWVyKTsKCQkJCQkJRXZlbnQgUGxheWVyLlBlcmtfTXlzdGVyeV9Td2FwID0gRmFsc2U7CgkJCQkJRW5kOwoJCQkJCUlmKEV2ZW50IFBsYXllci5QZXJrX0hlYXZ5X1dlaWdodCk7CgkJCQkJCVNldCBLbm9ja2JhY2sgRGVhbHQoRXZlbnQgUGxheWVyLCAxMDApOwoJCQkJCQlTZXQgS25vY2tiYWNrIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgMTAwKTsKCQkJCQkJRXZlbnQgUGxheWVyLlBlcmtfSGVhdnlfV2VpZ2h0ID0gRmFsc2U7CgkJCQkJRW5kOwoJCQkJCUV2ZW50IFBsYXllci5QZXJrX1NoYXJwc2hvb3RlciA9IEZhbHNlOwoJCQkJCVNldCBNYXggSGVhbHRoKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkhlYWx0aF9QZXJjZW50KTsKCQkJCQlTZXQgRGFtYWdlIERlYWx0KEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkRhbWFnZV9EZWFsdF9QZXJjZW50KTsKCQkJCQlTZXQgSGVhbGluZyBEZWFsdChFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5IZWFsaW5nX0RlYWx0X1BlcmNlbnQpOwoJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJNb25leSBSZWZ1bmRlZCIpKTsKCQkJCQlDYWxsIFN1YnJvdXRpbmUoQWZ0ZXJfQnV5aW5nX0FiaWxpdHkpOwoJCQkJRW5kOwoJCQlFbmQ7CgkJRWxzZTsKCQkJSWYoR2xvYmFsLlRlbXBbMF0gPT0gMCk7CgkJCQlJZihHbG9iYWwuVGVtcFsxXSA+PSAyKTsKCQkJCQlHbG9iYWwuVGVtcCA9IEdsb2JhbC5DdXJyZW50X1BlcmtzW0dsb2JhbC5UZW1wWzFdID09IDNdOwoJCQkJCUlmKEdsb2JhbC5UZW1wID09IDApOwoJCQkJCQlJZighRXZlbnQgUGxheWVyLlBlcmtfU2hvY2twcm9vZik7CgkJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA1MDApOwoJCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJOb3QgZW5vdWdoIG1vbmV5IikpOwoJCQkJCQkJCUFib3J0OwoJCQkJCQkJRW5kOwoJCQkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ICs9IDUwMDsKCQkJCQkJCUV2ZW50IFBsYXllci5QZXJrX1Nob2NrcHJvb2YgPSBUcnVlOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIFNob2NrcHJvb2YiKSk7CgkJCQkJCQlDYWxsIFN1YnJvdXRpbmUoQWZ0ZXJfQnV5aW5nX0FiaWxpdHkpOwoJCQkJCQlFbmQ7CgkJCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSAxKTsKCQkJCQkJSWYoIUV2ZW50IFBsYXllci5QZXJrX0J1bGxldHN0b3JtKTsKCQkJCQkJCUlmKEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCA8IDgwMCk7CgkJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQkJQWJvcnQ7CgkJCQkJCQlFbmQ7CgkJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gODAwOwoJCQkJCQkJRXZlbnQgUGxheWVyLlBlcmtfQnVsbGV0c3Rvcm0gPSBUcnVlOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIEJ1bGxldHN0b3JtIikpOwoJCQkJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJCQkJRW5kOwoJCQkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gMik7CgkJCQkJCUlmKCFFdmVudCBQbGF5ZXIuUGVya19EaWVfSGFyZCk7CgkJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA2MDApOwoJCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJOb3QgZW5vdWdoIG1vbmV5IikpOwoJCQkJCQkJCUFib3J0OwoJCQkJCQkJRW5kOwoJCQkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ICs9IDYwMDsKCQkJCQkJCUV2ZW50IFBsYXllci5QZXJrX0RpZV9IYXJkID0gVHJ1ZTsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJVbmxvY2tlZCBEaWUgSGFyZCIpKTsKCQkJCQkJCUNhbGwgU3Vicm91dGluZShBZnRlcl9CdXlpbmdfQWJpbGl0eSk7CgkJCQkJCUVuZDsKCQkJCQlFbHNlIElmKEdsb2JhbC5UZW1wID09IDMpOwoJCQkJCQlJZighRXZlbnQgUGxheWVyLlBlcmtfUHVtcGluZ19Jcm9uKTsKCQkJCQkJCUlmKEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCA8IDcwMCk7CgkJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQkJQWJvcnQ7CgkJCQkJCQlFbmQ7CgkJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gNzAwOwoJCQkJCQkJRXZlbnQgUGxheWVyLlBlcmtfUHVtcGluZ19Jcm9uID0gVHJ1ZTsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJVbmxvY2tlZCBQdW1waW5nIElyb24iKSk7CgkJCQkJCQlDYWxsIFN1YnJvdXRpbmUoQWZ0ZXJfQnV5aW5nX0FiaWxpdHkpOwoJCQkJCQlFbmQ7CgkJCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSA0KTsKCQkJCQkJSWYoIUV2ZW50IFBsYXllci5QZXJrX1RlcnJpZnkpOwoJCQkJCQkJSWYoR2xvYmFsLk1vbmV5IC0gRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50IDwgMTAwMCk7CgkJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQkJQWJvcnQ7CgkJCQkJCQlFbmQ7CgkJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gMTAwMDsKCQkJCQkJCUV2ZW50IFBsYXllci5QZXJrX1RlcnJpZnkgPSBUcnVlOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIFRlcnJpZnkiKSk7CgkJCQkJCQlDYWxsIFN1YnJvdXRpbmUoQWZ0ZXJfQnV5aW5nX0FiaWxpdHkpOwoJCQkJCQlFbmQ7CgkJCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSA1KTsKCQkJCQkJSWYoIUV2ZW50IFBsYXllci5QZXJrX1J1bm5pbmdfUmlvdCk7CgkJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA3MDApOwoJCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJOb3QgZW5vdWdoIG1vbmV5IikpOwoJCQkJCQkJCUFib3J0OwoJCQkJCQkJRW5kOwoJCQkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ICs9IDcwMDsKCQkJCQkJCUV2ZW50IFBsYXllci5QZXJrX1J1bm5pbmdfUmlvdCA9IFRydWU7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgUnVubmluZyBSaW90IikpOwoJCQkJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJCQkJRW5kOwoJCQkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gNik7CgkJCQkJCUlmKCFFdmVudCBQbGF5ZXIuUGVya19VcF9Zb3VfR28pOwoJCQkJCQkJSWYoR2xvYmFsLk1vbmV5IC0gRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50IDwgMTAwMCk7CgkJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQkJQWJvcnQ7CgkJCQkJCQlFbmQ7CgkJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gMTAwMDsKCQkJCQkJCUV2ZW50IFBsYXllci5QZXJrX1VwX1lvdV9HbyA9IFRydWU7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgVXAgWW91IEdvIikpOwoJCQkJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJCQkJRW5kOwoJCQkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gNyk7CgkJCQkJCUlmKCFFdmVudCBQbGF5ZXIuUGVya19TdGFiaWxpemVyKTsKCQkJCQkJCUlmKEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCA8IDgwMCk7CgkJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQkJQWJvcnQ7CgkJCQkJCQlFbmQ7CgkJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gODAwOwoJCQkJCQkJRXZlbnQgUGxheWVyLlBlcmtfU3RhYmlsaXplciA9IFRydWU7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgU3RhYmlsaXplciIpKTsKCQkJCQkJCUNhbGwgU3Vicm91dGluZShBZnRlcl9CdXlpbmdfQWJpbGl0eSk7CgkJCQkJCUVuZDsKCQkJCQlFbHNlIElmKEdsb2JhbC5UZW1wID09IDgpOwoJCQkJCQlJZighRXZlbnQgUGxheWVyLlBlcmtfTmVtZXNpcyk7CgkJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA4MDApOwoJCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJOb3QgZW5vdWdoIG1vbmV5IikpOwoJCQkJCQkJCUFib3J0OwoJCQkJCQkJRW5kOwoJCQkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ICs9IDgwMDsKCQkJCQkJCUV2ZW50IFBsYXllci5QZXJrX05lbWVzaXMgPSBUcnVlOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIE5lbWVzaXMiKSk7CgkJCQkJCQlDYWxsIFN1YnJvdXRpbmUoQWZ0ZXJfQnV5aW5nX0FiaWxpdHkpOwoJCQkJCQlFbmQ7CgkJCQkJRWxzZSBJZihHbG9iYWwuVGVtcCA9PSA5KTsKCQkJCQkJSWYoIUV2ZW50IFBsYXllci5QZXJrX015c3RlcnlfU3dhcCk7CgkJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA1MDApOwoJCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJOb3QgZW5vdWdoIG1vbmV5IikpOwoJCQkJCQkJCUFib3J0OwoJCQkJCQkJRW5kOwoJCQkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ICs9IDUwMDsKCQkJCQkJCUV2ZW50IFBsYXllci5IZWFsdGhfUGVyY2VudCArPSAyMDsKCQkJCQkJCUV2ZW50IFBsYXllci5EYW1hZ2VfRGVhbHRfUGVyY2VudCArPSAyMDsKCQkJCQkJCUV2ZW50IFBsYXllci5IZWFsaW5nX0RlYWx0X1BlcmNlbnQgKz0gMjA7CgkJCQkJCQlTZXQgTWF4IEhlYWx0aChFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5IZWFsdGhfUGVyY2VudCk7CgkJCQkJCQlTZXQgRGFtYWdlIERlYWx0KEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkRhbWFnZV9EZWFsdF9QZXJjZW50KTsKCQkJCQkJCVNldCBIZWFsaW5nIERlYWx0KEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkhlYWxpbmdfRGVhbHRfUGVyY2VudCk7CgkJCQkJCQlFdmVudCBQbGF5ZXIuUGVya19NeXN0ZXJ5X1N3YXAgPSBUb3RhbCBUaW1lIEVsYXBzZWQgKyBSYW5kb20gSW50ZWdlcig0NSwgNzUpOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIE15c3RlcnkgU3dhcCIpKTsKCQkJCQkJCUNhbGwgU3Vicm91dGluZShBZnRlcl9CdXlpbmdfQWJpbGl0eSk7CgkJCQkJCUVuZDsKCQkJCQlFbHNlIElmKEdsb2JhbC5UZW1wID09IDEwKTsKCQkJCQkJSWYoIUV2ZW50IFBsYXllci5QZXJrX0hlYXZ5X1dlaWdodCk7CgkJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA2MDApOwoJCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJOb3QgZW5vdWdoIG1vbmV5IikpOwoJCQkJCQkJCUFib3J0OwoJCQkJCQkJRW5kOwoJCQkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ICs9IDYwMDsKCQkJCQkJCVNldCBLbm9ja2JhY2sgRGVhbHQoRXZlbnQgUGxheWVyLCAyMDApOwoJCQkJCQkJU2V0IEtub2NrYmFjayBSZWNlaXZlZChFdmVudCBQbGF5ZXIsIDUwKTsKCQkJCQkJCUV2ZW50IFBsYXllci5QZXJrX0hlYXZ5X1dlaWdodCA9IFRydWU7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgSGVhdnkgV2VpZ2h0IikpOwoJCQkJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJCQkJRW5kOwoJCQkJCUVsc2UgSWYoR2xvYmFsLlRlbXAgPT0gMTEpOwoJCQkJCQlJZighRXZlbnQgUGxheWVyLlBlcmtfU2hhcnBzaG9vdGVyKTsKCQkJCQkJCUlmKEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCA8IDgwMCk7CgkJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQkJQWJvcnQ7CgkJCQkJCQlFbmQ7CgkJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gODAwOwoJCQkJCQkJRXZlbnQgUGxheWVyLlBlcmtfU2hhcnBzaG9vdGVyID0gVHJ1ZTsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJVbmxvY2tlZCBTaGFycHNob290ZXIiKSk7CgkJCQkJCQlDYWxsIFN1YnJvdXRpbmUoQWZ0ZXJfQnV5aW5nX0FiaWxpdHkpOwoJCQkJCQlFbmQ7CgkJCQkJRW5kOwoJCQkJRW5kOwoJCQlFbHNlIElmKEdsb2JhbC5UZW1wWzBdID09IDEpOwoJCQkJSWYoR2xvYmFsLk1vbmV5IC0gRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50IDwgNDAwKTsKCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiTm90IGVub3VnaCBtb25leSIpKTsKCQkJCQlBYm9ydDsKCQkJCUVuZDsKCQkJCUV2ZW50IFBsYXllci5Nb25leV9zcGVudCArPSA0MDA7CgkJCQlJZihHbG9iYWwuVGVtcFsxXSA9PSAxKTsKCQkJCQlFdmVudCBQbGF5ZXIuQWJfSGVhbHRoX0JvbnVzICs9IDU7CgkJCQkJRXZlbnQgUGxheWVyLkhlYWx0aF9QZXJjZW50ICs9IDU7CgkJCQkJU2V0IE1heCBIZWFsdGgoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuSGVhbHRoX1BlcmNlbnQpOwoJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJHYWluZWQgKzUlIEhlYWx0aCIpKTsKCQkJCUVsc2UgSWYoR2xvYmFsLlRlbXBbMV0gPT0gMik7CgkJCQkJRXZlbnQgUGxheWVyLkFiX0RhbWFnZV9Cb251cyArPSA1OwoJCQkJCUV2ZW50IFBsYXllci5EYW1hZ2VfRGVhbHRfUGVyY2VudCArPSA1OwoJCQkJCVNldCBEYW1hZ2UgRGVhbHQoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuRGFtYWdlX0RlYWx0X1BlcmNlbnQpOwoJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJHYWluZWQgKzUlIERhbWFnZSIpKTsKCQkJCUVsc2UgSWYoR2xvYmFsLlRlbXBbMV0gPT0gMyk7CgkJCQkJRXZlbnQgUGxheWVyLkFiX0hlYWxpbmdfQm9udXMgKz0gNTsKCQkJCQlFdmVudCBQbGF5ZXIuSGVhbGluZ19EZWFsdF9QZXJjZW50ICs9IDU7CgkJCQkJU2V0IEhlYWxpbmcgRGVhbHQoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuSGVhbGluZ19EZWFsdF9QZXJjZW50KTsKCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiR2FpbmVkICs1JSBIZWFsaW5nIikpOwoJCQkJRW5kOwoJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJRWxzZSBJZihHbG9iYWwuVGVtcFswXSA9PSAyKTsKCQkJCUlmKEdsb2JhbC5UZW1wWzFdID09IDEpOwoJCQkJCUlmKEV2ZW50IFBsYXllci5BYl9SZXNpbGllbmNlIDwgMik7CgkJCQkJCUlmKEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCA8IDgwMCk7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiTm90IGVub3VnaCBtb25leSIpKTsKCQkJCQkJCUFib3J0OwoJCQkJCQlFbmQ7CgkJCQkJCUV2ZW50IFBsYXllci5Nb25leV9zcGVudCArPSA4MDA7CgkJCQkJCUlmKCFFdmVudCBQbGF5ZXIuQWJfUmVzaWxpZW5jZSk7CgkJCQkJCQlFdmVudCBQbGF5ZXIuQWJfUmVzaWxpZW5jZSA9IDE7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgUmVzaWxpZW5jZSBJIikpOwoJCQkJCQlFbHNlOwoJCQkJCQkJRXZlbnQgUGxheWVyLkFiX1Jlc2lsaWVuY2UgPSAyOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIFJlc2lsaWVuY2UgSUkiKSk7CgkJCQkJCUVuZDsKCQkJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJCQlFbmQ7CgkJCQlFbHNlIElmKEdsb2JhbC5UZW1wWzFdID09IDIpOwoJCQkJCUlmKEV2ZW50IFBsYXllci5BYl9CaW5kaW5nX0hlYWwgPCAyKTsKCQkJCQkJSWYoR2xvYmFsLk1vbmV5IC0gRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50IDwgNzAwKTsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJOb3QgZW5vdWdoIG1vbmV5IikpOwoJCQkJCQkJQWJvcnQ7CgkJCQkJCUVuZDsKCQkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ICs9IDcwMDsKCQkJCQkJSWYoIUV2ZW50IFBsYXllci5BYl9CaW5kaW5nX0hlYWwpOwoJCQkJCQkJRXZlbnQgUGxheWVyLkFiX0JpbmRpbmdfSGVhbCA9IDE7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgQmluZGluZyBIZWFsIEkiKSk7CgkJCQkJCUVsc2U7CgkJCQkJCQlFdmVudCBQbGF5ZXIuQWJfQmluZGluZ19IZWFsID0gMjsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJVbmxvY2tlZCBCaW5kaW5nIEhlYWwgSUkiKSk7CgkJCQkJCUVuZDsKCQkJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJCQlFbmQ7CgkJCQlFbHNlIElmKEdsb2JhbC5UZW1wWzFdID09IDMpOwoJCQkJCUlmKEV2ZW50IFBsYXllci5BYl9TZWNvbmRfV2luZCA8IDIpOwoJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA5MDApOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQlBYm9ydDsKCQkJCQkJRW5kOwoJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gOTAwOwoJCQkJCQlJZighRXZlbnQgUGxheWVyLkFiX1NlY29uZF9XaW5kKTsKCQkJCQkJCUV2ZW50IFBsYXllci5BYl9TZWNvbmRfV2luZCA9IDE7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgU2Vjb25kIFdpbmQgSSIpKTsKCQkJCQkJRWxzZTsKCQkJCQkJCUV2ZW50IFBsYXllci5BYl9TZWNvbmRfV2luZCA9IDI7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgU2Vjb25kIFdpbmQgSUkiKSk7CgkJCQkJCUVuZDsKCQkJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJCQlFbmQ7CgkJCQlFbmQ7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXBbMF0gPT0gMyk7CgkJCQlJZihHbG9iYWwuVGVtcFsxXSA9PSAxKTsKCQkJCQlJZihFdmVudCBQbGF5ZXIuQWJfQ2hhcmdlZCA8IDIpOwoJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA3MDApOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQlBYm9ydDsKCQkJCQkJRW5kOwoJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gNzAwOwoJCQkJCQlJZighRXZlbnQgUGxheWVyLkFiX0NoYXJnZWQpOwoJCQkJCQkJRXZlbnQgUGxheWVyLkFiX0NoYXJnZWQgPSAxOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIENoYXJnZWQgSSIpKTsKCQkJCQkJRWxzZTsKCQkJCQkJCUV2ZW50IFBsYXllci5BYl9DaGFyZ2VkID0gMjsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJVbmxvY2tlZCBDaGFyZ2VkIElJIikpOwoJCQkJCQlFbmQ7CgkJCQkJCUNhbGwgU3Vicm91dGluZShBZnRlcl9CdXlpbmdfQWJpbGl0eSk7CgkJCQkJRW5kOwoJCQkJRWxzZSBJZihHbG9iYWwuVGVtcFsxXSA9PSAyKTsKCQkJCQlJZihFdmVudCBQbGF5ZXIuQWJfSGFzdGUgPCAyKTsKCQkJCQkJSWYoR2xvYmFsLk1vbmV5IC0gRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50IDwgNzAwKTsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJOb3QgZW5vdWdoIG1vbmV5IikpOwoJCQkJCQkJQWJvcnQ7CgkJCQkJCUVuZDsKCQkJCQkJRXZlbnQgUGxheWVyLk1vbmV5X3NwZW50ICs9IDcwMDsKCQkJCQkJSWYoIUV2ZW50IFBsYXllci5BYl9IYXN0ZSk7CgkJCQkJCQlFdmVudCBQbGF5ZXIuQWJfSGFzdGUgPSAxOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIEhhc3RlIEkiKSk7CgkJCQkJCUVsc2U7CgkJCQkJCQlFdmVudCBQbGF5ZXIuQWJfSGFzdGUgPSAyOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIEhhc3RlIElJIikpOwoJCQkJCQlFbmQ7CgkJCQkJCUNhbGwgU3Vicm91dGluZShBZnRlcl9CdXlpbmdfQWJpbGl0eSk7CgkJCQkJRW5kOwoJCQkJRWxzZSBJZihHbG9iYWwuVGVtcFsxXSA9PSAzKTsKCQkJCQlJZihFdmVudCBQbGF5ZXIuQWJfSGVhdnlfSW1wYWN0IDwgMik7CgkJCQkJCUlmKEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCA8IDEwMDApOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQlBYm9ydDsKCQkJCQkJRW5kOwoJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gMTAwMDsKCQkJCQkJSWYoIUV2ZW50IFBsYXllci5BYl9IZWF2eV9JbXBhY3QpOwoJCQkJCQkJRXZlbnQgUGxheWVyLkFiX0hlYXZ5X0ltcGFjdCA9IDE7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgSGVhdnkgSW1wYWN0IEkiKSk7CgkJCQkJCUVsc2U7CgkJCQkJCQlFdmVudCBQbGF5ZXIuQWJfSGVhdnlfSW1wYWN0ID0gMjsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJVbmxvY2tlZCBIZWF2eSBJbXBhY3QgSUkiKSk7CgkJCQkJCUVuZDsKCQkJCQkJQ2FsbCBTdWJyb3V0aW5lKEFmdGVyX0J1eWluZ19BYmlsaXR5KTsKCQkJCQlFbmQ7CgkJCQlFbmQ7CgkJCUVsc2UgSWYoR2xvYmFsLlRlbXBbMF0gPT0gNCk7CgkJCQlJZihHbG9iYWwuVGVtcFsxXSA9PSAxKTsKCQkJCQlJZihFdmVudCBQbGF5ZXIuQWJfSGVhZGh1bnRlciA8IDIpOwoJCQkJCQlJZihHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCA4MDApOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIk5vdCBlbm91Z2ggbW9uZXkiKSk7CgkJCQkJCQlBYm9ydDsKCQkJCQkJRW5kOwoJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gODAwOwoJCQkJCQlJZighRXZlbnQgUGxheWVyLkFiX0hlYWRodW50ZXIpOwoJCQkJCQkJRXZlbnQgUGxheWVyLkFiX0hlYWRodW50ZXIgPSAxOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIEhlYWRodW50ZXIgSSIpKTsKCQkJCQkJRWxzZTsKCQkJCQkJCUV2ZW50IFBsYXllci5BYl9IZWFkaHVudGVyID0gMjsKCQkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJVbmxvY2tlZCBIZWFkaHVudGVyIElJIikpOwoJCQkJCQlFbmQ7CgkJCQkJCUNhbGwgU3Vicm91dGluZShBZnRlcl9CdXlpbmdfQWJpbGl0eSk7CgkJCQkJRW5kOwoJCQkJRWxzZSBJZihHbG9iYWwuVGVtcFsxXSA9PSAyKTsKCQkJCQlJZihFdmVudCBQbGF5ZXIuQWJfQW1idXNoIDwgMik7CgkJCQkJCUlmKEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCA8IDgwMCk7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiTm90IGVub3VnaCBtb25leSIpKTsKCQkJCQkJCUFib3J0OwoJCQkJCQlFbmQ7CgkJCQkJCUV2ZW50IFBsYXllci5Nb25leV9zcGVudCArPSA4MDA7CgkJCQkJCUlmKCFFdmVudCBQbGF5ZXIuQWJfQW1idXNoKTsKCQkJCQkJCUV2ZW50IFBsYXllci5BYl9BbWJ1c2ggPSAxOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIEFtYnVzaCBJIikpOwoJCQkJCQlFbHNlOwoJCQkJCQkJRXZlbnQgUGxheWVyLkFiX0FtYnVzaCA9IDI7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgQW1idXNoIElJIikpOwoJCQkJCQlFbmQ7CgkJCQkJCUNhbGwgU3Vicm91dGluZShBZnRlcl9CdXlpbmdfQWJpbGl0eSk7CgkJCQkJRW5kOwoJCQkJRWxzZSBJZihHbG9iYWwuVGVtcFsxXSA9PSAzKTsKCQkJCQlJZihFdmVudCBQbGF5ZXIuQWJfUXVpY2tfRml4IDwgMik7CgkJCQkJCUlmKEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCA8IDcwMCk7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiTm90IGVub3VnaCBtb25leSIpKTsKCQkJCQkJCUFib3J0OwoJCQkJCQlFbmQ7CgkJCQkJCUV2ZW50IFBsYXllci5Nb25leV9zcGVudCArPSA3MDA7CgkJCQkJCUlmKCFFdmVudCBQbGF5ZXIuQWJfUXVpY2tfRml4KTsKCQkJCQkJCUV2ZW50IFBsYXllci5BYl9RdWlja19GaXggPSAxOwoJCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIFF1aWNrIEZpeCBJIikpOwoJCQkJCQlFbHNlOwoJCQkJCQkJRXZlbnQgUGxheWVyLkFiX1F1aWNrX0ZpeCA9IDI7CgkJCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgUXVpY2sgRml4IElJIikpOwoJCQkJCQlFbmQ7CgkJCQkJCUNhbGwgU3Vicm91dGluZShBZnRlcl9CdXlpbmdfQWJpbGl0eSk7CgkJCQkJRW5kOwoJCQkJRW5kOwoJCQlFbHNlIElmKEdsb2JhbC5UZW1wWzBdID09IDUpOwoJCQkJSWYoIUV2ZW50IFBsYXllci5BYl9Qcmlvcml0eSAmJiBHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgPCAxMjAwKTsKCQkJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiTm90IGVub3VnaCBtb25leSIpKTsKCQkJCQlBYm9ydDsKCQkJCUVuZDsKCQkJCUlmKEdsb2JhbC5UZW1wWzFdID09IDEpOwoJCQkJCUlmKCFFdmVudCBQbGF5ZXIuQWJfUHJpb3JpdHkpOwoJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gMTIwMDsKCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIFByaW9yaXR5IEEiKSk7CgkJCQkJRWxzZSBJZihFdmVudCBQbGF5ZXIuQWJfUHJpb3JpdHkgPT0gMSk7CgkJCQkJCUFib3J0OwoJCQkJCUVsc2U7CgkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJTd2FwcGVkIHRvIFByaW9yaXR5IEEiKSk7CgkJCQkJRW5kOwoJCQkJCUV2ZW50IFBsYXllci5BYl9Qcmlvcml0eSA9IDE7CgkJCQlFbHNlIElmKEdsb2JhbC5UZW1wWzFdID09IDIpOwoJCQkJCUlmKCFFdmVudCBQbGF5ZXIuQWJfUHJpb3JpdHkpOwoJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gMTIwMDsKCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIFByaW9yaXR5IEIiKSk7CgkJCQkJRWxzZSBJZihFdmVudCBQbGF5ZXIuQWJfUHJpb3JpdHkgPT0gMik7CgkJCQkJCUFib3J0OwoJCQkJCUVsc2U7CgkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJTd2FwcGVkIHRvIFByaW9yaXR5IEIiKSk7CgkJCQkJRW5kOwoJCQkJCUV2ZW50IFBsYXllci5BYl9Qcmlvcml0eSA9IDI7CgkJCQlFbHNlIElmKEdsb2JhbC5UZW1wWzFdID09IDMpOwoJCQkJCUlmKCFFdmVudCBQbGF5ZXIuQWJfUHJpb3JpdHkpOwoJCQkJCQlFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQgKz0gMTIwMDsKCQkJCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoIlVubG9ja2VkIFByaW9yaXR5IEMiKSk7CgkJCQkJRWxzZSBJZihFdmVudCBQbGF5ZXIuQWJfUHJpb3JpdHkgPT0gMyk7CgkJCQkJCUFib3J0OwoJCQkJCUVsc2U7CgkJCQkJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJTd2FwcGVkIHRvIFByaW9yaXR5IEMiKSk7CgkJCQkJRW5kOwoJCQkJCUV2ZW50IFBsYXllci5BYl9Qcmlvcml0eSA9IDM7CgkJCQlFbmQ7CgkJCQlDYWxsIFN1YnJvdXRpbmUoQWZ0ZXJfQnV5aW5nX0FiaWxpdHkpOwoJCQlFbmQ7CgkJRW5kOwoJfQp9CgpydWxlKCJTdWJyb3V0aW5lOiBBZnRlciBCdXlpbmcgQWJpbGl0eSIpCnsKCWV2ZW50Cgl7CgkJU3Vicm91dGluZTsKCQlBZnRlcl9CdXlpbmdfQWJpbGl0eTsKCX0KCglhY3Rpb25zCgl7CgkJUGxheSBFZmZlY3QoRXZlbnQgUGxheWVyLCBCdWZmIEV4cGxvc2lvbiBTb3VuZCwgQ29sb3IoV2hpdGUpLCBHbG9iYWwuQnV5X01lbnVfQ2FtX1BvcywgMjAwKTsKCQlFdmVudCBQbGF5ZXIuQWJfU3RyaW5nID0gU3RyaW5nIFNsaWNlKEN1c3RvbSBTdHJpbmcoInswfXsxfXsyfSIsIEN1c3RvbSBTdHJpbmcoInswfXsxfXsyfSIsIEN1c3RvbSBTdHJpbmcoInswfXsxfXsyfSIsIEFycmF5KAoJCQlTdHJpbmcoIiIpLCBDdXN0b20gU3RyaW5nKCJcblByaW9yaXR5IEEiKSwgQ3VzdG9tIFN0cmluZygiXG5Qcmlvcml0eSBCIiksIEN1c3RvbSBTdHJpbmcoIlxuUHJpb3JpdHkgQyIpKQoJCQlbRXZlbnQgUGxheWVyLkFiX1ByaW9yaXR5XSwgQXJyYXkoU3RyaW5nKCIiKSwgQ3VzdG9tIFN0cmluZygiXG5IZWFkaHVudGVyIEkiKSwgQ3VzdG9tIFN0cmluZygiXG5IZWFkaHVudGVyIElJIikpCgkJCVtFdmVudCBQbGF5ZXIuQWJfSGVhZGh1bnRlcl0sIEFycmF5KFN0cmluZygiIiksIEN1c3RvbSBTdHJpbmcoIlxuQW1idXNoIEkiKSwgQ3VzdG9tIFN0cmluZygiXG5BbWJ1c2ggSUkiKSkKCQkJW0V2ZW50IFBsYXllci5BYl9BbWJ1c2hdKSwgQ3VzdG9tIFN0cmluZygiezB9ezF9ezJ9IiwgQXJyYXkoU3RyaW5nKCIiKSwgQ3VzdG9tIFN0cmluZygiXG5RdWljayBGaXggSSIpLCBDdXN0b20gU3RyaW5nKAoJCQkiXG5RdWljayBGaXggSUkiKSlbRXZlbnQgUGxheWVyLkFiX1F1aWNrX0ZpeF0sIEFycmF5KFN0cmluZygiIiksIEN1c3RvbSBTdHJpbmcoIlxuQ2hhcmdlZCBJIiksIEN1c3RvbSBTdHJpbmcoIlxuQ2hhcmdlZCBJSSIpKQoJCQlbRXZlbnQgUGxheWVyLkFiX0NoYXJnZWRdLCBBcnJheShTdHJpbmcoIiIpLCBDdXN0b20gU3RyaW5nKCJcbkhhc3RlIEkiKSwgQ3VzdG9tIFN0cmluZygiXG5IYXN0ZSBJSSIpKVtFdmVudCBQbGF5ZXIuQWJfSGFzdGVdKSwKCQkJQ3VzdG9tIFN0cmluZygiezB9ezF9ezJ9IiwgQXJyYXkoU3RyaW5nKCIiKSwgQ3VzdG9tIFN0cmluZygiXG5IZWF2eSBJbXBhY3QgSSIpLCBDdXN0b20gU3RyaW5nKCJcbkhlYXZ5IEltcGFjdCBJSSIpKQoJCQlbRXZlbnQgUGxheWVyLkFiX0hlYXZ5X0ltcGFjdF0sIEFycmF5KFN0cmluZygiIiksIEN1c3RvbSBTdHJpbmcoIlxuUmVzaWxpZW5jZSBJIiksIEN1c3RvbSBTdHJpbmcoIlxuUmVzaWxpZW5jZSBJSSIpKQoJCQlbRXZlbnQgUGxheWVyLkFiX1Jlc2lsaWVuY2VdLCBBcnJheShTdHJpbmcoIiIpLCBDdXN0b20gU3RyaW5nKCJcbkJpbmRpbmcgSGVhbCBJIiksIEN1c3RvbSBTdHJpbmcoIlxuQmluZGluZyBIZWFsIElJIikpCgkJCVtFdmVudCBQbGF5ZXIuQWJfQmluZGluZ19IZWFsXSkpLCBDdXN0b20gU3RyaW5nKCJ7MH17MX17Mn0iLCBDdXN0b20gU3RyaW5nKCJ7MH17MX17Mn0iLCBBcnJheShTdHJpbmcoIiIpLCBDdXN0b20gU3RyaW5nKAoJCQkiXG5TZWNvbmQgV2luZCBJIiksIEN1c3RvbSBTdHJpbmcoIlxuU2Vjb25kIFdpbmQgSUkiKSlbRXZlbnQgUGxheWVyLkFiX1NlY29uZF9XaW5kXSwKCQkJRXZlbnQgUGxheWVyLlBlcmtfU2hvY2twcm9vZiA/IEN1c3RvbSBTdHJpbmcoIlxuU2hvY2twcm9vZiIpIDogU3RyaW5nKCIiKSwgRXZlbnQgUGxheWVyLlBlcmtfQnVsbGV0c3Rvcm0gPyBDdXN0b20gU3RyaW5nKAoJCQkiXG5CdWxsZXRzdG9ybSIpIDogU3RyaW5nKCIiKSksIEN1c3RvbSBTdHJpbmcoInswfXsxfXsyfSIsIEV2ZW50IFBsYXllci5QZXJrX0RpZV9IYXJkID8gQ3VzdG9tIFN0cmluZygiXG5EaWUgSGFyZCIpIDogU3RyaW5nKAoJCQkiIiksIEV2ZW50IFBsYXllci5QZXJrX1B1bXBpbmdfSXJvbiA/IEN1c3RvbSBTdHJpbmcoIlxuUHVtcGluZyBJcm9uIikgOiBTdHJpbmcoIiIpLCBFdmVudCBQbGF5ZXIuUGVya19UZXJyaWZ5ID8gQ3VzdG9tIFN0cmluZygKCQkJIlxuVGVycmlmeSIpIDogU3RyaW5nKCIiKSksIEN1c3RvbSBTdHJpbmcoInswfXsxfXsyfSIsIEV2ZW50IFBsYXllci5QZXJrX1J1bm5pbmdfUmlvdCA/IEN1c3RvbSBTdHJpbmcoIlxuUnVubmluZyBSaW90IikKCQkJOiBTdHJpbmcoIiIpLCBFdmVudCBQbGF5ZXIuUGVya19VcF9Zb3VfR28gPyBDdXN0b20gU3RyaW5nKCJcblVwIFlvdSBHbyIpIDogU3RyaW5nKCIiKSwKCQkJRXZlbnQgUGxheWVyLlBlcmtfU3RhYmlsaXplciA/IEN1c3RvbSBTdHJpbmcoIlxuU3RhYmlsaXplciIpIDogU3RyaW5nKCIiKSkpLCBDdXN0b20gU3RyaW5nKCJ7MH17MX17Mn0iLCBDdXN0b20gU3RyaW5nKAoJCQkiezB9ezF9ezJ9IiwgRXZlbnQgUGxheWVyLlBlcmtfTmVtZXNpcyA/IEN1c3RvbSBTdHJpbmcoIlxuTmVtZXNpcyIpIDogU3RyaW5nKCIiKSwKCQkJRXZlbnQgUGxheWVyLlBlcmtfTXlzdGVyeV9Td2FwID8gQ3VzdG9tIFN0cmluZygiXG5NeXN0ZXJ5IFN3YXAiKSA6IFN0cmluZygiIiksIEV2ZW50IFBsYXllci5QZXJrX0hlYXZ5X1dlaWdodCA/IEN1c3RvbSBTdHJpbmcoCgkJCSJcbkhlYXZ5IFdlaWdodCIpIDogU3RyaW5nKCIiKSksIEN1c3RvbSBTdHJpbmcoInswfXsxfXsyfSIsIEV2ZW50IFBsYXllci5QZXJrX1NoYXJwc2hvb3RlciA/IEN1c3RvbSBTdHJpbmcoIlxuU2hhcnBzaG9vdGVyIikKCQkJOiBTdHJpbmcoIiIpLCBFdmVudCBQbGF5ZXIuQWJfSGVhbHRoX0JvbnVzID8gQ3VzdG9tIFN0cmluZygiXG4rezB9JSBIZWFsdGgiLCBFdmVudCBQbGF5ZXIuQWJfSGVhbHRoX0JvbnVzKSA6IFN0cmluZygiIiksCgkJCUV2ZW50IFBsYXllci5BYl9EYW1hZ2VfQm9udXMgPyBDdXN0b20gU3RyaW5nKCJcbit7MH0lIERhbWFnZSIsIEV2ZW50IFBsYXllci5BYl9EYW1hZ2VfQm9udXMpIDogU3RyaW5nKCIiKSksCgkJCUV2ZW50IFBsYXllci5BYl9IZWFsaW5nX0JvbnVzID8gQ3VzdG9tIFN0cmluZygiXG4rezB9JSBIZWFsaW5nIiwgRXZlbnQgUGxheWVyLkFiX0hlYWxpbmdfQm9udXMpIDogU3RyaW5nKCIiKSkpLCAxLCA1MTEpOwoJCVdhaXQoMC4xMDAsIElnbm9yZSBDb25kaXRpb24pOwoJfQp9CgpydWxlKCJBbGwgVGVhbXM6IFBsYXllciBsZWZ0IE1hdGNoIikKewoJZXZlbnQKCXsKCQlQbGF5ZXIgTGVmdCBNYXRjaDsKCQlBbGw7CgkJQWxsOwoJfQoKCWFjdGlvbnMKCXsKCQlDYWxsIFN1YnJvdXRpbmUoVXBkYXRlX0NvbWJhdGFudHMpOwoJCUNhbGwgU3Vicm91dGluZShTY2FsZV9EYW1hZ2UpOwoJfQp9CgpydWxlKCJTdWJyb3V0aW5lOiBOZWFyZXN0IFdhbGthYmxlIFBvc2l0aW9uIFRlbGVwb3J0IikKewoJZXZlbnQKCXsKCQlTdWJyb3V0aW5lOwoJCU5XUF9UZWxlcG9ydDsKCX0KCglhY3Rpb25zCgl7CgkJSWYoR2xvYmFsLlRlbXAgPT0gRW1wdHkgQXJyYXkpOwoJCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIEZpcnN0IE9mKFNvcnRlZCBBcnJheShHbG9iYWwuTm9kZXMsIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBDdXJyZW50IEFycmF5IEVsZW1lbnQpKSkpOwoJCUVsc2U7CgkJCVRlbGVwb3J0KEV2ZW50IFBsYXllciwgR2xvYmFsLlRlbXApOwoJCUVuZDsKCX0KfQoKcnVsZSgiVGVhbSAyOiBTZXQgQWxsb3dlZCBIZXJvZXMiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWFjdGlvbnMKCXsKCQlBYm9ydCBJZihTbG90IE9mKEV2ZW50IFBsYXllcikgPj0gNSk7CgkJU2V0IFBsYXllciBBbGxvd2VkIEhlcm9lcyhFdmVudCBQbGF5ZXIsIEdsb2JhbC5HYW1lbW9kZSB8fCBHbG9iYWwuVXBncmFkZV9Db3VudGVyID49IDI1ID8gQWxsIEhlcm9lcyA6IEFycmF5IFNsaWNlKAoJCQlHbG9iYWwuSFJfSG9zdGFnZV9IZXJvX0FycmF5LCAwLCBHbG9iYWwuVXBncmFkZV9Db3VudGVyICsgNykpOwoJfQp9CgpydWxlKCJUZWFtIDIgKFNwYXduKTogVGVsZXBvcnQsIFNldCBJcyBDb21iYXRhbnQsIEhlYWxpbmcsIFNjYWxlIERhbWFnZSwgQ3JlYXRlIEhVRHMsIEVmZmVjdHMgYW5kIE9iamVjdGl2ZSBEZXNjcmlwdGlvbiIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUhhcyBTcGF3bmVkKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoU2xvdCBPZihFdmVudCBQbGF5ZXIpID49IDUpOwoJCVNtYWxsIE1lc3NhZ2UoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJI4oCLZeKAi2HigIt04oCLIOKAi1PigIt04oCLcuKAi2XigItl4oCLdOKAizrigIsg4oCLU+KAi3XigIty4oCLduKAi2nigIt24oCLYeKAi2zigIsg4oCLMi41LjHigIsg4oCLYuKAi3nigIsg4oCLU+KAi2jigItp4oCLbuKAi2figItl4oCLbiIpKTsKCQlFdmVudCBQbGF5ZXIuSXNfQ29tYmF0YW50ID0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuU3BlY3RhdGVkX1BsYXllciA9IEV2ZW50IFBsYXllcjsKCQlFdmVudCBQbGF5ZXIuQWJfU3RyaW5nID0gU3RyaW5nKCIiKTsKCQlFdmVudCBQbGF5ZXIuSGVhbHRoX1BlcmNlbnQgPSAxMDA7CgkJRXZlbnQgUGxheWVyLkRhbWFnZV9EZWFsdF9QZXJjZW50ID0gMTAwOwoJCUV2ZW50IFBsYXllci5IZWFsaW5nX0RlYWx0X1BlcmNlbnQgPSAxMDA7CgkJRXZlbnQgUGxheWVyLk1vdmVfU3BlZWRfUGVyY2VudCA9IDEwMDsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMCk7CgkJCVNldCBIZWFsaW5nIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgMTAwICsgMiAqIEdsb2JhbC5VcGdyYWRlX0NvdW50ZXIpOwoJCUVsc2U7CgkJCVNldCBIZWFsaW5nIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgMTAwICsgMiAqIFJvdW5kIFRvIEludGVnZXIoR2xvYmFsLlVwZ3JhZGVfQ291bnRlciAqIDcgLyAzLCBEb3duKSk7CgkJRW5kOwoJCUNhbGwgU3Vicm91dGluZShVcGRhdGVfQ29tYmF0YW50cyk7CgkJQ2FsbCBTdWJyb3V0aW5lKFNjYWxlX0RhbWFnZSk7CgkJQ3JlYXRlIEVmZmVjdChFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID8gQWxsIFBsYXllcnMoQWxsIFRlYW1zKSA6IEVtcHR5IEFycmF5LCBSaW5nLCBDb2xvcihZZWxsb3cpLCBFdmVudCBQbGF5ZXIsIDMsIFZpc2libGUgVG8pOwoJCUNyZWF0ZSBJY29uKEV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPyBSZW1vdmUgRnJvbSBBcnJheShBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBFdmVudCBQbGF5ZXIpIDogRW1wdHkgQXJyYXksIEV2ZW50IFBsYXllciwgU2t1bGwsCgkJCVZpc2libGUgVG8sIENvbG9yKFllbGxvdyksIFRydWUpOwoJCUNyZWF0ZSBIVUQgVGV4dChFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlICYmIEV2ZW50IFBsYXllci5SZXZpdmVfVGltZXIgIT0gMTAwMDAgPyBBcHBlbmQgVG8gQXJyYXkoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCSFDdXJyZW50IEFycmF5IEVsZW1lbnQuRG93bmVkX3NpbmNlICYmICEoQ3VycmVudCBBcnJheSBFbGVtZW50LklzX2ludmlzaWJsZSAlIDMpICYmIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBWZWN0b3IoCgkJCVggQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKEN1cnJlbnQgQXJyYXkgRWxlbWVudCkpLCBZIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpKSwgWiBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudCkpKSkgPD0gMyAmJiBBYnNvbHV0ZSBWYWx1ZShZIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpKSAtIFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQpKSkgPD0gMyAmJiBJcyBJbiBMaW5lIG9mIFNpZ2h0KEV2ZW50IFBsYXllciwgQ3VycmVudCBBcnJheSBFbGVtZW50LCBCYXJyaWVycyBEbyBOb3QgQmxvY2sgTE9TKSksCgkJCUV2ZW50IFBsYXllcikgOiBFbXB0eSBBcnJheSwgQ3VzdG9tIFN0cmluZygiUmV2aXZpbmcgezB9OiB7MX0iLCBFdmVudCBQbGF5ZXIsIFJvdW5kIFRvIEludGVnZXIoRXZlbnQgUGxheWVyLlJldml2ZV9UaW1lciwgVXApKSwKCQkJTnVsbCwgTnVsbCwgVG9wLCAoR2xvYmFsLkdhbWVtb2RlID8gLTYwIDogNDApICsgU2xvdCBPZihFdmVudCBQbGF5ZXIpLCBHbG9iYWwuTXV0X0RlYXRoX0d1YXJkICYmIElzIFRydWUgRm9yIEFueSgKCQkJUGxheWVycyBXaXRoaW4gUmFkaXVzKEV2ZW50IFBsYXllciwgMywgVGVhbSAxLCBPZmYpLCBJcyBBbGl2ZShDdXJyZW50IEFycmF5IEVsZW1lbnQpKSA/IENvbG9yKE9yYW5nZSkgOiBDb2xvcihTa3kgQmx1ZSksIENvbG9yKAoJCQlXaGl0ZSksIENvbG9yKFdoaXRlKSwgVmlzaWJsZSBUbyBTdHJpbmcgYW5kIENvbG9yLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBIVUQgVGV4dChBbGwgUGxheWVycyhUZWFtIDIpLCBDdXN0b20gU3RyaW5nKCJ7MH17MX17Mn0iLCBIZXJvIEljb24gU3RyaW5nKEhlcm8gT2YoRXZlbnQgUGxheWVyKSksCgkJCUV2ZW50IFBsYXllci5UYXNlZF91bnRpbCA+PSBUb3RhbCBUaW1lIEVsYXBzZWQgPyBJY29uIFN0cmluZyhCb2x0KSA6IEN1c3RvbSBTdHJpbmcoIiIpLAoJCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlICYmIEV2ZW50IFBsYXllci5SZXZpdmVfVGltZXIgIT0gMTAwMDAgPyBHbG9iYWwuUHJvZ3Jlc3NfQmFyW1JvdW5kIFRvIEludGVnZXIoMi41MDAgKiAoCgkJCTQgLSBFdmVudCBQbGF5ZXIuUmV2aXZlX1RpbWVyKSwgRG93bildIDogU3RyaW5nKCIiKSksIEN1c3RvbSBTdHJpbmcoInswfXsxfSIsIEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkFiX1ByaW9yaXR5ID8gQXJyYXkoCgkJCUN1c3RvbSBTdHJpbmcoIiAoQSkiKSwgQ3VzdG9tIFN0cmluZygiIChCKSIpLCBDdXN0b20gU3RyaW5nKCIgKEMpIikpW0V2ZW50IFBsYXllci5BYl9Qcmlvcml0eSAtIDFdIDogU3RyaW5nKCIiKSksCgkJCUN1c3RvbSBTdHJpbmcoInswfSwgezF9JCIsIEV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPyAoRXZlbnQgUGxheWVyLlJldml2ZV9UaW1lciA9PSAxMDAwMCA/IEN1c3RvbSBTdHJpbmcoIkRvd25lZCIpCgkJCTogQ3VzdG9tIFN0cmluZygiQmVpbmcgUmV2aXZlZCIpKSA6IChFdmVudCBQbGF5ZXIuSXNfY2hhbmdpbmdfSGVyb2VzID8gQ3VzdG9tIFN0cmluZygiQ2hhbmdpbmcgSGVyb2VzIikgOiBDdXN0b20gU3RyaW5nKAoJCQkiezB9IEhQIiwgUm91bmQgVG8gSW50ZWdlcihIZWFsdGgoRXZlbnQgUGxheWVyKSwgVXApKSksIEdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCksIExlZnQsIFNsb3QgT2YoRXZlbnQgUGxheWVyKSwKCQkJRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSA/IENvbG9yKFJlZCkgOiAoRXZlbnQgUGxheWVyLklzX2NoYW5naW5nX0hlcm9lcyB8fCBOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIpID49IDAuNTAwID8gQ29sb3IoCgkJCVNreSBCbHVlKSA6IENvbG9yKE9yYW5nZSkpLCBFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID8gQ29sb3IoUmVkKSA6IChFdmVudCBQbGF5ZXIuSXNfY2hhbmdpbmdfSGVyb2VzIHx8IE5vcm1hbGl6ZWQgSGVhbHRoKAoJCQlFdmVudCBQbGF5ZXIpID49IDAuNTAwID8gQ29sb3IoU2t5IEJsdWUpIDogQ29sb3IoT3JhbmdlKSksIEV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPyBDb2xvcihSZWQpIDogKAoJCQlFdmVudCBQbGF5ZXIuSXNfY2hhbmdpbmdfSGVyb2VzIHx8IE5vcm1hbGl6ZWQgSGVhbHRoKEV2ZW50IFBsYXllcikgPj0gMC41MDAgPyBDb2xvcihTa3kgQmx1ZSkgOiBDb2xvcihPcmFuZ2UpKSwKCQkJVmlzaWJsZSBUbyBTdHJpbmcgYW5kIENvbG9yLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBFZmZlY3QoCgkJCUdsb2JhbC5NdXRfSHVydF9NZV9Nb3JlICYmIEV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgJiYgRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSArIDEwID49IFRvdGFsIFRpbWUgRWxhcHNlZCA/IEFsbCBQbGF5ZXJzKAoJCQlBbGwgVGVhbXMpIDogRW1wdHkgQXJyYXksIENsb3VkLCBDb2xvcihSZWQpLCBFdmVudCBQbGF5ZXIsIDMsIFZpc2libGUgVG8pOwoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAwKTsKCQkJU2V0IE9iamVjdGl2ZSBEZXNjcmlwdGlvbihFdmVudCBQbGF5ZXIsIEN1c3RvbSBTdHJpbmcoCgkJCQkiSOKAi2XigIth4oCLdOKAiyDigItT4oCLdOKAi3LigItl4oCLZeKAi3TigIs64oCLIOKAi1PigIt14oCLcuKAi3bigItp4oCLduKAi2HigIts4oCLIOKAizIuNS4x4oCLIOKAiyjigItD4oCLUuKAizbigIs34oCLRuKAiynigIsg4oCLLeKAiyDigItT4oCLdeKAi3LigIt24oCLaeKAi3bigItl4oCLIOKAizLigIsy4oCLIOKAi1figIth4oCLduKAi2XigItzIiksIFZpc2libGUgVG8pOwoJCUVuZDsKCQlJZighR2xvYmFsLldhdmUpOwoJCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIEdsb2JhbC5QbGF5ZXJfU3Bhd24pOwoJCQlXYWl0KDAuMjAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQkJU2V0IEZhY2luZyhFdmVudCBQbGF5ZXIsIEdsb2JhbC5QbGF5ZXJfU3Bhd25fRmFjaW5nLCBUbyBXb3JsZCk7CgkJRW5kOwoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAwKTsKCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgT3V0bGluZXMoRmlsdGVyZWQgQXJyYXkoQWxsIFBsYXllcnMoVGVhbSAxKSwgQ3VycmVudCBBcnJheSBFbGVtZW50LklzX0xpdmluZ19Cb3NzKSwgRXZlbnQgUGxheWVyLCBUcnVlLCBDb2xvcigKCQkJCVllbGxvdyksIERlZmF1bHQpOwoJCUVsc2UgSWYoR2xvYmFsLkdhbWVtb2RlID09IDEpOwoJCQlTdGFydCBGb3JjaW5nIFBsYXllciBPdXRsaW5lcyhQbGF5ZXJzIEluIFNsb3QoNiwgVGVhbSAxKSwgRXZlbnQgUGxheWVyLCBUcnVlLCBDb2xvcihZZWxsb3cpLCBEZWZhdWx0KTsKCQlFbHNlIElmKEdsb2JhbC5HYW1lbW9kZSA9PSAyKTsKCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgT3V0bGluZXMoUGxheWVycyBJbiBTbG90KDYsIFRlYW0gMSksIEV2ZW50IFBsYXllciwgVHJ1ZSwgQ29sb3IoWWVsbG93KSwgQWx3YXlzKTsKCQlFbmQ7CgkJV2FpdCgxLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQkiTmVtZXNpcyBLaWxsZXIgRWZmZWN0IgoJCUNyZWF0ZSBCZWFtIEVmZmVjdChFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlICYmIEV2ZW50IFBsYXllci5OZW1lc2lzX0tpbGxlciAhPSBOdWxsID8gQWxsIFBsYXllcnMoQWxsIFRlYW1zKSA6IEVtcHR5IEFycmF5LAoJCQlCYWQgQmVhbSwgUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSwgRXZlbnQgUGxheWVyLk5lbWVzaXNfS2lsbGVyLCBDb2xvcihCbGFjayksIFZpc2libGUgVG8gUG9zaXRpb24gYW5kIFJhZGl1cyk7CgkJIkNyZWF0ZSBBYmlsaXR5IEVudGl0aWVzIGFuZCBDdXJzb3IiCgkJQ3JlYXRlIEhVRCBUZXh0KEV2ZW50IFBsYXllciwgTnVsbCwgTnVsbCwgRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIuQWJfU3RyaW5nLCBMZWZ0LCAxMCwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIENvbG9yKAoJCQlHcmVlbiksIFZpc2libGUgVG8gYW5kIFN0cmluZywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChFdmVudCBQbGF5ZXIuSW5fQnV5X01lbnVfU2luY2UgPyBFdmVudCBQbGF5ZXIgOiBFbXB0eSBBcnJheSwgQ3VzdG9tIFN0cmluZygiezB9JCIsCgkJCUdsb2JhbC5Nb25leSAtIEV2ZW50IFBsYXllci5Nb25leV9zcGVudCksIEdsb2JhbC5CdXlfTWVudV9Qb3MgKyA0NSAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0sIDMsIERvIE5vdCBDbGlwLAoJCQlWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIENvbG9yKFdoaXRlKSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSW4tV29ybGQgVGV4dChFdmVudCBQbGF5ZXIuSW5fQnV5X01lbnVfU2luY2UgPyBFdmVudCBQbGF5ZXIgOiBFbXB0eSBBcnJheSwgQ3VzdG9tIFN0cmluZygi4payIiksIFVwZGF0ZSBFdmVyeSBGcmFtZSgKCQkJR2xvYmFsLkJ1eV9NZW51X1BvcyAtICg0ICsgVmVydGljYWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikpCgkJCSogR2xvYmFsLkJ1eV9NZW51X0xlZnRfVXBfRm9yd2FyZFsxXSArIEhvcml6b250YWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikgKiBHbG9iYWwuQnV5X01lbnVfTGVmdF9VcF9Gb3J3YXJkWzBdKSwgNCwKCQkJRG8gTm90IENsaXAsIFZpc2libGUgVG8gUG9zaXRpb24gYW5kIENvbG9yLCBDdXN0b20gQ29sb3IoMjQ1ICsgMTAgKiBTaW5lIEZyb20gUmFkaWFucyg0ICogVG90YWwgVGltZSBFbGFwc2VkKSwKCQkJMjA1ICsgNTAgKiBTaW5lIEZyb20gUmFkaWFucyg0ICogVG90YWwgVGltZSBFbGFwc2VkKSwgMjAwICogU2luZSBGcm9tIFJhZGlhbnMoNCAqIFRvdGFsIFRpbWUgRWxhcHNlZCksIDI1NSksCgkJCURlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEluLVdvcmxkIFRleHQoRXZlbnQgUGxheWVyLkluX0J1eV9NZW51X1NpbmNlICYmIEFic29sdXRlIFZhbHVlKEhvcml6b250YWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikpCgkJCTw9IDEzNSAmJiBBYnNvbHV0ZSBWYWx1ZShWZXJ0aWNhbCBGYWNpbmcgQW5nbGUgT2YoRXZlbnQgUGxheWVyKSArIDExLjI1MCkgPD0gNDUgPyBFdmVudCBQbGF5ZXIgOiBFbXB0eSBBcnJheSwKCQkJVmVydGljYWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikgPCAtMzMuNzUwID8gQXJyYXkoQ3VzdG9tIFN0cmluZygiTGVhdmUgQnV5IE1lbnVcbiIpLCBDdXN0b20gU3RyaW5nKCJZb3UgaGF2ZSB7MH0kXG4iLAoJCQlHbG9iYWwuTW9uZXkgLSBFdmVudCBQbGF5ZXIuTW9uZXlfc3BlbnQpLCBDdXN0b20gU3RyaW5nKCJSZWZ1bmQgeW91ciBtb25leVxuIikpW01heCgwLCBNaW4oMiwgUm91bmQgVG8gSW50ZWdlcigoCgkJCUhvcml6b250YWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikgKyAxMzUpIC8gOTAsIERvd24pKSldIDogQXJyYXkoVmVydGljYWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikKCQkJPCAtMTEuMjUwID8gQ3VzdG9tIFN0cmluZygiVGhlIGxpbWl0ZWQgb2ZmZXIgY2hhbmdlcyBldmVyeSB3YXZlXG4iKSA6IEFycmF5KEN1c3RvbSBTdHJpbmcoCgkJCSJTaG9ja3Byb29mOiBJbnN0ZWFkIG9mIHN0dW5uaW5nIHlvdSBTb21icmEncyB0YXNlIGVmZmVjdCBiYWNrZmlyZXMgb24gaGVyIGFuZCBoYWNrcyBuZWFyYnkgZW5lbWllcyIpLCBDdXN0b20gU3RyaW5nKAoJCQkiQnVsbGV0c3Rvcm06IFlvdXIgd2VhcG9uIGNhbiBob2xkIHVubGltaXRlZCBhbW1vIiksIEN1c3RvbSBTdHJpbmcoIkRpZSBIYXJkOiBZb3VyIGhlYWx0aCByZWdlbmVyYXRpb24gZGVsYXkgaXMgaGFsdmVkIiksCgkJCUN1c3RvbSBTdHJpbmcoIlB1bXBpbmcgSXJvbjogWW91ciBxdWljayBtZWxlZSBhdHRhY2sga25vY2tzIGVuZW1pZXMgZG93blxu4oCB4oCB4oCB4oCB4oCBICBUaGlzIGFiaWxpdHkgaGFzIGEgMTUgc2Vjb25kIGNvb2xkb3duIiksCgkJCUN1c3RvbSBTdHJpbmcoIlRlcnJpZnk6IEtpbGxpbmcgYW4gZW5lbXkgaGFzIGEgY2hhbmNlIHRvIGNhdXNlIG5lYXJieSBlbmVtaWVzIHRvIHJ1biBhd2F5IGluIGZlYXIiKSwgQ3VzdG9tIFN0cmluZygKCQkJIlJ1bm5pbmcgUmlvdDogUmVnZW5lcmF0ZSBIZWFsdGggd2hpbGUgbW92aW5nIGZhc3RlciB0aGFuIDggbWV0ZXJzIHBlciBzZWNvbmQiKSwgQ3VzdG9tIFN0cmluZygKCQkJIlVwIFlvdSBHbzogWW91IGNhbiBiZSByZXZpdmVkIHR3aWNlIGFzIGZhc3QiKSwgQ3VzdG9tIFN0cmluZygiU3RhYmlsaXplcjogRGVhbCAzMCUgbW9yZSBoZWFsaW5nIHRvIGFsbGllcyBiZWxvdyA1MCUgaGVhbHRoIiksCgkJCUN1c3RvbSBTdHJpbmcoIk5lbWVzaXM6IEFmdGVyIGdvaW5nIGRvd24gYXV0b21hdGljYWxseSByZXZpdmUgeW91cnNlbGYgd2hlbiB5b3VyIGtpbGxlciBkaWVzIiksIEN1c3RvbSBTdHJpbmcoCgkJCSIgICBNeXN0ZXJ5IFN3YXA6IFBlcmlvZGljYWxseSBzd2FwIHRvIGEgcmFuZG9tIGhlcm8gYW5kIGRpc2FibGUgbWFudWFsIGhlcm8gc3dhcHBpbmdcbnswfSIsIEN1c3RvbSBTdHJpbmcoCgkJCSJJbmNyZWFzZSBoZWFsdGgsIGRhbWFnZSBhbmQgaGVhbGluZyBieSAyMCUgYW5kIGFsd2F5cyBzcGF3biB3aXRoIHlvdXIgVWx0aW1hdGUgcmVhZHkiKSksIEN1c3RvbSBTdHJpbmcoCgkJCSJIZWF2eSBXZWlnaHQ6IERvdWJsZSB0aGUgc3RyZW5ndGggb2YgeW91ciBrbm9jayBiYWNrIGVmZmVjdHNcbuKAgeKAgeKAgUhhbHZlIHRoZSBzdHJlbmd0aCBvZiByZWNlaXZlZCBrbm9jayBiYWNrIGVmZmVjdHMiKSwKCQkJQ3VzdG9tIFN0cmluZygiU2hhcnBzaG9vdGVyOiBEZWFsIDUwJSBtb3JlIGRhbWFnZSB0byBlbmVtaWVzIHRoYXQgYXJlIGZ1cnRoZXIgdGhhbiAxMCBtZXRlcnMgYXdheSIpKQoJCQlbR2xvYmFsLkN1cnJlbnRfUGVya3NbVmVydGljYWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikgPj0gMTEuMjUwXV0sIEFycmF5KEN1c3RvbSBTdHJpbmcoIkluY3JlYXNlIHlvdXIgaGVhbHRoIGJ5IDUlXG4iKSwKCQkJQ3VzdG9tIFN0cmluZygiSW5jcmVhc2UgeW91ciBkYW1hZ2UgYnkgNSVcbiIpLCBDdXN0b20gU3RyaW5nKCJJbmNyZWFzZSB5b3VyIGhlYWxpbmcgYnkgNSVcbiIpKVtNYXgoMCwgTWluKDIsIFJvdW5kIFRvIEludGVnZXIoKAoJCQlWZXJ0aWNhbCBGYWNpbmcgQW5nbGUgT2YoRXZlbnQgUGxheWVyKSArIDMzLjc1MCkgLyAyMi41MDAsIERvd24pKSldLCBBcnJheShFdmVudCBQbGF5ZXIuQWJfUmVzaWxpZW5jZSA/IEN1c3RvbSBTdHJpbmcoCgkJCSJSZXNpbGllbmNlIElJOiBUYWtlIDMwJSBsZXNzIGRhbWFnZSB3aGlsZSBiZWxvdyA2MCUgaGVhbHRoXG4iKSA6IEN1c3RvbSBTdHJpbmcoCgkJCSJSZXNpbGllbmNlIEk6IFRha2UgMzAlIGxlc3MgZGFtYWdlIHdoaWxlIGJlbG93IDMwJSBoZWFsdGhcbiIpLCBFdmVudCBQbGF5ZXIuQWJfQmluZGluZ19IZWFsID8gQ3VzdG9tIFN0cmluZygKCQkJIkJpbmRpbmcgSGVhbCBJSTogSGVhbCB5b3Vyc2VsZiBmb3IgNTAlIHRoZSBhbW91bnQgd2hlbiBoZWFsaW5nIGFsbGllc1xuIikgOiBDdXN0b20gU3RyaW5nKAoJCQkiQmluZGluZyBIZWFsIEk6IEhlYWwgeW91cnNlbGYgZm9yIDI1JSB0aGUgYW1vdW50IHdoZW4gaGVhbGluZyBhbGxpZXNcbiIpLCBFdmVudCBQbGF5ZXIuQWJfU2Vjb25kX1dpbmQgPyBDdXN0b20gU3RyaW5nKAoJCQkiU2Vjb25kIFdpbmQgSUk6IDYwJSBjaGFuY2UgdG8gcmV2aXZlIHlvdXJzZWxmIGFmdGVyIGdvaW5nIGRvd25cbuKAgeKAgeKAgVRoaXMgY2Fubm90IG9jY3VyIG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDMwIHNlY29uZHMiKQoJCQk6IEN1c3RvbSBTdHJpbmcoCgkJCSJTZWNvbmQgV2luZCBJOiAzMCUgY2hhbmNlIHRvIHJldml2ZSB5b3Vyc2VsZiBhZnRlciBnb2luZyBkb3duXG7igIHigIEgICBUaGlzIGNhbm5vdCBvY2N1ciBtb3JlIHRoYW4gb25jZSBldmVyeSAzMCBzZWNvbmRzIikpW01heCgKCQkJMCwgTWluKDIsIFJvdW5kIFRvIEludGVnZXIoKFZlcnRpY2FsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIpICsgMzMuNzUwKSAvIDIyLjUwMCwgRG93bikpKV0sIEFycmF5KAoJCQlFdmVudCBQbGF5ZXIuQWJfQ2hhcmdlZCA/IEN1c3RvbSBTdHJpbmcoIkNoYXJnZWQgSUk6IFVsdGltYXRlcyBjb3N0IDQwJSBsZXNzXG4iKSA6IEN1c3RvbSBTdHJpbmcoCgkJCSJDaGFyZ2VkIEk6IFVsdGltYXRlcyBjb3N0IDIwJSBsZXNzXG4iKSwgRXZlbnQgUGxheWVyLkFiX0hhc3RlID8gQ3VzdG9tIFN0cmluZygKCQkJIkhhc3RlIElJOiBBYmlsaXR5IGNvb2xkb3duIGlzIHJlZHVjZWQgYnkgNTAlXG4iKSA6IEN1c3RvbSBTdHJpbmcoIkhhc3RlIEk6IEFiaWxpdHkgY29vbGRvd24gaXMgcmVkdWNlZCBieSAyNSVcbiIpLAoJCQlFdmVudCBQbGF5ZXIuQWJfSGVhdnlfSW1wYWN0ID8gQ3VzdG9tIFN0cmluZygiSGVhdnkgSW1wYWN0IElJOiBFdmVyeSBoaXQgaGFzIGEgY2hhbmNlIHRvIHN0dW4gdGhlIGVuZW15IGZvciAyIHNlY29uZHNcbiIpCgkJCTogQ3VzdG9tIFN0cmluZygiSGVhdnkgSW1wYWN0IEk6IEV2ZXJ5IGhpdCBoYXMgYSBjaGFuY2UgdG8gc3R1biB0aGUgZW5lbXkgZm9yIDEgc2Vjb25kXG4iKSlbTWF4KDAsIE1pbigyLCBSb3VuZCBUbyBJbnRlZ2VyKCgKCQkJVmVydGljYWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikgKyAzMy43NTApIC8gMjIuNTAwLCBEb3duKSkpXSwgQXJyYXkoRXZlbnQgUGxheWVyLkFiX0hlYWRodW50ZXIgPyBDdXN0b20gU3RyaW5nKAoJCQkiSGVhZGh1bnRlciBJSTogQ3JpdGljYWwgaGl0cyBkZWFsIDgwJSBtb3JlIGRhbWFnZVxuIikgOiBDdXN0b20gU3RyaW5nKCJIZWFkaHVudGVyIEk6IENyaXRpY2FsIGhpdHMgZGVhbCA0MCUgbW9yZSBkYW1hZ2VcbiIpLAoJCQlFdmVudCBQbGF5ZXIuQWJfQW1idXNoID8gQ3VzdG9tIFN0cmluZygiQW1idXNoIElJOiBEZWFsIDYwJSBtb3JlIGRhbWFnZSB3aGVuIGF0dGFja2luZyBlbmVtaWVzIGZyb20gYmVoaW5kIG9yIGFib3ZlXG4iKQoJCQk6IEN1c3RvbSBTdHJpbmcoIkFtYnVzaCBJOiBEZWFsIDMwJSBtb3JlIGRhbWFnZSB3aGVuIGF0dGFja2luZyBlbmVtaWVzIGZyb20gYmVoaW5kIG9yIGFib3ZlXG4iKSwKCQkJRXZlbnQgUGxheWVyLkFiX1F1aWNrX0ZpeCA/IEN1c3RvbSBTdHJpbmcoIlF1aWNrIEZpeCBJSTogRWxpbWluYXRpb25zIHJlc3RvcmUgMTAwIEhQIGFuZCBzaG9ydGx5IGluY3JlYXNlIHNwZWVkIGJ5IDQwJVxuIikKCQkJOiBDdXN0b20gU3RyaW5nKCJRdWljayBGaXggSTogRWxpbWluYXRpb25zIHJlc3RvcmUgNTAgSFAgYW5kIHNob3J0bHkgaW5jcmVhc2Ugc3BlZWQgYnkgMjAlXG4iKSlbTWF4KDAsIE1pbigyLAoJCQlSb3VuZCBUbyBJbnRlZ2VyKChWZXJ0aWNhbCBGYWNpbmcgQW5nbGUgT2YoRXZlbnQgUGxheWVyKSArIDMzLjc1MCkgLyAyMi41MDAsIERvd24pKSldLCBBcnJheShDdXN0b20gU3RyaW5nKAoJCQki4oCB4oCB4oCB4oCBUHJpb3JpdHkgQTogRW5lbWllcyBhcmUgbW9yZSBsaWtlbHkgdG8gdGFyZ2V0IHlvdVxuRW5lbWllcyB0YXJnZXRpbmcgeW91IHRha2UgMTUlIG1vcmUgYW5kIGRlYWwgMTUlIGxlc3MgZGFtYWdlIiksCgkJCUN1c3RvbSBTdHJpbmcoIuKAgeKAgeKAgeKAgeKAgeKAgeKAgeKAgSAgIFByaW9yaXR5IEI6IEVuZW1pZXMgYXJlIGxlc3MgbGlrZWx5IHRvIHRhcmdldCB5b3VcbnswfSIsIEN1c3RvbSBTdHJpbmcoCgkJCSJFdmVyeSBoaXQgdG8gYW4gZW5lbXkgbm90IHRhcmdldGluZyB5b3UgaGFzIGEgY2hhbmNlIHRvIGNhdXNlIHRoZW0gdG8gcnVuIGF3YXkiKSksIEN1c3RvbSBTdHJpbmcoCgkJCSLigIHigIHigIHigIHigIHigIHigIHigIEgIFByaW9yaXR5IEM6IEVuZW1pZXMgYXJlIG11Y2ggbGVzcyBsaWtlbHkgdG8gdGFyZ2V0IHlvdVxuezB9IiwgQ3VzdG9tIFN0cmluZygKCQkJIkdhaW4gKzMwJSBkYW1hZ2UsIGhlYWxpbmcgYW5kIHNwZWVkIGlmIHlvdSBkaWQgbm90IHRha2UgZGFtYWdlIGluIHRoZSBsYXN0IDUgc2Vjb25kcyIpKSlbTWF4KDAsIE1pbigyLCBSb3VuZCBUbyBJbnRlZ2VyKCgKCQkJVmVydGljYWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllcikgKyAzMy43NTApIC8gMjIuNTAwLCBEb3duKSkpXSlbTWF4KDAsIE1pbig1LCBSb3VuZCBUbyBJbnRlZ2VyKCgKCQkJSG9yaXpvbnRhbCBGYWNpbmcgQW5nbGUgT2YoRXZlbnQgUGxheWVyKSArIDEzNSkgLyA0NSwgRG93bikpKV0sIEdsb2JhbC5CdXlfTWVudV9Qb3MgLSA1NSAqIEdsb2JhbC5CdXlfTWVudV9MZWZ0X1VwX0ZvcndhcmRbMV0sCgkJCTIuNTAwLCBEbyBOb3QgQ2xpcCwgVmlzaWJsZSBUbyBhbmQgU3RyaW5nLCBDb2xvcihXaGl0ZSksIERlZmF1bHQgVmlzaWJpbGl0eSk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMjogQWRkIEhlYWx0aCBQb29sIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX0NvbWJhdGFudCA9PSBUcnVlOwoJCUdsb2JhbC5VcGdyYWRlX0NvdW50ZXIgPiAwOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMCk7CgkJCUFkZCBIZWFsdGggUG9vbCBUbyBQbGF5ZXIoRXZlbnQgUGxheWVyLCBIZWFsdGgsIEV2ZW50IFBsYXllci5IZWFsdGhfUGVyY2VudCAvIDEwICogR2xvYmFsLlVwZ3JhZGVfQ291bnRlciwgVHJ1ZSwgVHJ1ZSk7CgkJRWxzZTsKCQkJQWRkIEhlYWx0aCBQb29sIFRvIFBsYXllcihFdmVudCBQbGF5ZXIsIEhlYWx0aCwgRXZlbnQgUGxheWVyLkhlYWx0aF9QZXJjZW50IC8gMTAgKiBSb3VuZCBUbyBJbnRlZ2VyKEdsb2JhbC5VcGdyYWRlX0NvdW50ZXIgKiA3IC8gMywKCQkJCURvd24pLCBUcnVlLCBUcnVlKTsKCQlFbmQ7Cgl9Cn0KCnJ1bGUoIlRlYW0gMjogQ2hhbmdlIEhlcm8gKEludGVyYWN0KSwgU2V0IExhc3QgUG9zaXRpb24gKDEpLCBMYXN0IEV5ZSBQb3NpdGlvbiAoMiksIExhc3QgRmFjaW5nICgzKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IEZhbHNlOwoJCUlzIEJ1dHRvbiBIZWxkKEV2ZW50IFBsYXllciwgQnV0dG9uKEludGVyYWN0KSkgPT0gVHJ1ZTsKCQlNYXRjaCBUaW1lID4gMDsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgR2xvYmFsLkFiaWxpdHlfQnV5X0xvY2F0aW9uKSA+IDI7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMC4yNTAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlJZihFdmVudCBQbGF5ZXIuUGVya19NeXN0ZXJ5X1N3YXApOwoJCQlTbWFsbCBNZXNzYWdlKEV2ZW50IFBsYXllciwgQ3VzdG9tIFN0cmluZygiTXlzdGVyeSBTd2FwIHByZXZlbnRzIHlvdSBmcm9tIGNoYW5naW5nIGhlcm9lcyIpKTsKCQkJQWJvcnQ7CgkJRW5kOwoJCUV2ZW50IFBsYXllci5Jc19jaGFuZ2luZ19IZXJvZXMgPSAxOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMSA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcik7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8yID0gRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllcik7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8zID0gRmFjaW5nIERpcmVjdGlvbiBPZihFdmVudCBQbGF5ZXIpOwoJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEdvb2QgUGlja3VwIEVmZmVjdCwgQ29sb3IoWWVsbG93KSwgRXZlbnQgUGxheWVyLkFiX1Zhcl8xLCAxKTsKCQlTdGFydCBDYW1lcmEoRXZlbnQgUGxheWVyLCBSYXkgQ2FzdCBIaXQgUG9zaXRpb24oRXZlbnQgUGxheWVyLkFiX1Zhcl8yLCBFdmVudCBQbGF5ZXIuQWJfVmFyXzIgLSA4LjI1MCAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcygKCQkJSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihFdmVudCBQbGF5ZXIuQWJfVmFyXzMpLCAyMCksIE51bGwsIE51bGwsIEZhbHNlKSArIDAuMjUwICogRGlyZWN0aW9uIEZyb20gQW5nbGVzKAoJCQlIb3Jpem9udGFsIEFuZ2xlIEZyb20gRGlyZWN0aW9uKEV2ZW50IFBsYXllci5BYl9WYXJfMyksIDIwKSwgRXZlbnQgUGxheWVyLkFiX1Zhcl8yLCAwKTsKCQlDbGVhciBTdGF0dXMoRXZlbnQgUGxheWVyLCBVbmtpbGxhYmxlKTsKCQlLaWxsKEV2ZW50IFBsYXllciwgTnVsbCk7CgkJIkxvd2VyIHZhbHVlcyBtaWdodCBjYXVzZSB0aGUgcGxheWVyIHRvIGZhbGwgdGhyb3VnaCB0aGUgbWFwIHdoZW4gcmVzcGF3bmluZyIKCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIDEwMCAqIERvd24pOwoJCVdhaXQoMC4xMDAsIElnbm9yZSBDb25kaXRpb24pOwoJCUV2ZW50IFBsYXllci5Jc19jaGFuZ2luZ19IZXJvZXMgPSAyOwoJCVdhaXQgVW50aWwoSXMgQWxpdmUoRXZlbnQgUGxheWVyKSwgOTk5OTkpOwoJCVN0b3AgQ2FtZXJhKEV2ZW50IFBsYXllcik7CgkJVGVsZXBvcnQoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuQWJfVmFyXzEpOwoJCVdhaXQoMC4xMDAsIElnbm9yZSBDb25kaXRpb24pOwoJCVNldCBGYWNpbmcoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuQWJfVmFyXzMsIFRvIFdvcmxkKTsKCQlFdmVudCBQbGF5ZXIuSXNfY2hhbmdpbmdfSGVyb2VzID0gMDsKCX0KfQoKcnVsZSgiVGVhbSAyOiBUb29rIERhbWFnZSwgU2V0IExhc3QgRGFtYWdlIFRha2VuIikKewoJZXZlbnQKCXsKCQlQbGF5ZXIgVG9vayBEYW1hZ2U7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkxhc3RfRGFtYWdlX3Rha2VuID0gVG90YWwgVGltZSBFbGFwc2VkOwoJfQp9CgpydWxlKCJUZWFtIDIgKERlYXRoKTogU3RhcnQgQ2FtZXJhLCBQbGF5IFNvdW5kcywgU2V0IGlzIERvd25lZCwgUmV2aXZlIFRpbWVyLCBLbm9ja2VkIGRvd24sIFBoYXNlZCBvdXQsIERlYXRoIENhbSBUYXJnZXQiKQp7CglldmVudAoJewoJCVBsYXllciBEaWVkOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19jaGFuZ2luZ19IZXJvZXMgIT0gMTsKCQlTbG90IE9mKEV2ZW50IFBsYXllcikgPCA1OwoJfQoKCWFjdGlvbnMKCXsKCQlJZighRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSk7CgkJCURpc2FibGUgTWVzc2FnZXMoRXZlbnQgUGxheWVyKTsKCQkJU21hbGwgTWVzc2FnZShBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBDdXN0b20gU3RyaW5nKCJ7MH0gd2FzIGRvd25lZCEiLCBFdmVudCBQbGF5ZXIpKTsKCQkJRXZlbnQgUGxheWVyLkRlYXRoX0NhbV9UYXJnZXQgPSBFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyKSArIDEwMDAgKiBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBGYWNpbmcgQW5nbGUgT2YoRXZlbnQgUGxheWVyKSwKCQkJCTApOwoJCQlTdGFydCBDYW1lcmEoRXZlbnQgUGxheWVyLCBSYXkgQ2FzdCBIaXQgUG9zaXRpb24oRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllci5TcGVjdGF0ZWRfUGxheWVyKSwgRXllIFBvc2l0aW9uKAoJCQkJRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIpIC0gKEV2ZW50IFBsYXllci5EZWF0aF9DYW1fVGFyZ2V0ID8gNi4yNTAgKiBEaXJlY3Rpb24gVG93YXJkcyhFeWUgUG9zaXRpb24oCgkJCQlFdmVudCBQbGF5ZXIuU3BlY3RhdGVkX1BsYXllciksIEV2ZW50IFBsYXllci5EZWF0aF9DYW1fVGFyZ2V0KSA6IDguMjUwICogRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgRmFjaW5nIEFuZ2xlIE9mKAoJCQkJRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIpLCAyMCkpLCBOdWxsLCBOdWxsLCBGYWxzZSkgKyAwLjI1MCAqIChFdmVudCBQbGF5ZXIuRGVhdGhfQ2FtX1RhcmdldCA/IERpcmVjdGlvbiBUb3dhcmRzKAoJCQkJRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllci5TcGVjdGF0ZWRfUGxheWVyKSwgRXZlbnQgUGxheWVyLkRlYXRoX0NhbV9UYXJnZXQpIDogRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgRmFjaW5nIEFuZ2xlIE9mKAoJCQkJRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIpLCAyMCkpLCBFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIpLCBFdmVudCBQbGF5ZXIuRGVhdGhfQ2FtX1RhcmdldCA/IDEwIDogMjApOwoJCQlGb3IgR2xvYmFsIFZhcmlhYmxlKFRlbXAsIDAsIDEwLCAxKTsKCQkJCVBsYXkgRWZmZWN0KFBsYXllcnMgSW4gU2xvdChHbG9iYWwuVGVtcCAlIDUsIFRlYW0gMiksIFJpbmcgRXhwbG9zaW9uIFNvdW5kLCBDb2xvcihXaGl0ZSksIFBsYXllcnMgSW4gU2xvdChHbG9iYWwuVGVtcCAlIDUsIFRlYW0gMiksCgkJCQkJMjAwKTsKCQkJRW5kOwoJCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID0gVG90YWwgVGltZSBFbGFwc2VkOwoJCQlFdmVudCBQbGF5ZXIuUmV2aXZlX1RpbWVyID0gMTAwMDA7CgkJCUlmKEV2ZW50IFBsYXllci5QZXJrX05lbWVzaXMgJiYgSXMgQWxpdmUoQXR0YWNrZXIpICYmIFRlYW0gT2YoQXR0YWNrZXIpID09IFRlYW0gMSAmJiBIZXJvIE9mKEF0dGFja2VyKSAhPSBIZXJvKFdyZWNraW5nIEJhbGwpICYmICgKCQkJCUdsb2JhbC5HYW1lbW9kZSAhPSAyIHx8IFNsb3QgT2YoQXR0YWNrZXIpICE9IDYpKTsKCQkJCUV2ZW50IFBsYXllci5OZW1lc2lzX0tpbGxlciA9IEF0dGFja2VyOwoJCQlFbHNlOwoJCQkJRXZlbnQgUGxheWVyLk5lbWVzaXNfS2lsbGVyID0gTnVsbDsKCQkJRW5kOwoJCUVuZDsKCQlJZihFdmVudCBXYXMgRW52aXJvbm1lbnQpOwoJCQlHbG9iYWwuVGVtcCA9IE5lYXJlc3QgV2Fsa2FibGUgUG9zaXRpb24oRXZlbnQgUGxheWVyKTsKCQkJQ2FsbCBTdWJyb3V0aW5lKE5XUF9UZWxlcG9ydCk7CgkJRW5kOwoJCVJlc3VycmVjdChFdmVudCBQbGF5ZXIpOwoJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFBoYXNlZCBPdXQpOwoJCVNldCBTdGF0dXMoRXZlbnQgUGxheWVyLCBOdWxsLCBJbnZpbmNpYmxlLCA5OTk5KTsKCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgS25vY2tlZCBEb3duLCA5OTk5KTsKCQlXYWl0KDAuMDUwLCBSZXN0YXJ0IFdoZW4gVHJ1ZSk7CgkJU2V0IFBsYXllciBIZWFsdGgoRXZlbnQgUGxheWVyLCAxKTsKCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgUGhhc2VkIE91dCwgOTk5OSk7CgkJSWYoQXR0YWNrZXIgIT0gRXZlbnQgUGxheWVyKTsKCQkJRXZlbnQgUGxheWVyLkRlYXRoX0NhbV9UYXJnZXQgPSBBdHRhY2tlcjsKCQkJV2FpdCg1LCBSZXN0YXJ0IFdoZW4gVHJ1ZSk7CgkJRW5kOwoJCUV2ZW50IFBsYXllci5EZWF0aF9DYW1fVGFyZ2V0ID0gTnVsbDsKCX0KfQoKcnVsZSgiVGVhbSAyOiBQbGF5ZXIgZG93bmVkIGZhbGxiYWNrIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSA9PSBUcnVlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgwLjI1MCwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCVdoaWxlKEV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgJiYgIUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSk7CgkJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFBoYXNlZCBPdXQpOwoJCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgS25vY2tlZCBEb3duLCA5OTk5KTsKCQkJV2FpdCgwLjI1MCwgSWdub3JlIENvbmRpdGlvbik7CgkJRW5kOwoJCUlmKEV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UpOwoJCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgUGhhc2VkIE91dCwgOTk5OSk7CgkJRW5kOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMjogU2VsZWN0IE5leHQgU3BlY3RhdGVkIFBsYXllciIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPT0gVHJ1ZTsKCQlJcyBCdXR0b24gSGVsZChFdmVudCBQbGF5ZXIsIEJ1dHRvbihKdW1wKSkgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSArIDAuNTAwID49IFRvdGFsIFRpbWUgRWxhcHNlZCk7CgkJRXZlbnQgUGxheWVyLkRlYXRoX0NhbV9UYXJnZXQgPSBOdWxsOwoJCUlmKEV2ZW50IFBsYXllci5OZW1lc2lzX0tpbGxlciA9PSBOdWxsKTsKCQkJRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIgPSBHbG9iYWwuQ29tYmF0YW50c1soSW5kZXggT2YgQXJyYXkgVmFsdWUoR2xvYmFsLkNvbWJhdGFudHMsIEV2ZW50IFBsYXllci5TcGVjdGF0ZWRfUGxheWVyKSArIDEpCgkJCQklIEdsb2JhbC5Db21iYXRhbnRzX0NvdW50XTsKCQlFbHNlOwoJCQlJZihFdmVudCBQbGF5ZXIuU3BlY3RhdGVkX1BsYXllciA9PSBFdmVudCBQbGF5ZXIpOwoJCQkJRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIgPSBFdmVudCBQbGF5ZXIuTmVtZXNpc19LaWxsZXI7CgkJCUVsc2U7CgkJCQlFdmVudCBQbGF5ZXIuU3BlY3RhdGVkX1BsYXllciA9IEV2ZW50IFBsYXllcjsKCQkJRW5kOwoJCUVuZDsKCQlXYWl0KDAuMjUwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCX0KfQoKcnVsZSgiVGVhbSAyOiBTcGVjdGF0ZWQgUGxheWVyIGRvZXMgbm90IGV4aXN0IGFueW1vcmUiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IFRydWU7CgkJRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIuSXNfQ29tYmF0YW50ID09IEZhbHNlOwoJCVRlYW0gT2YoRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIpICE9IFRlYW0gMTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLlNwZWN0YXRlZF9QbGF5ZXIgPSBFdmVudCBQbGF5ZXI7Cgl9Cn0KCnJ1bGUoIlRlYW0gMjogUmV2aXZlLCBDaGVjayBQbGF5ZXIgaW4gUmFkaXVzLCBVbnNldCBJcyBEb3duZWQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IFRydWU7CgkJRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSArIDEgPCBUb3RhbCBUaW1lIEVsYXBzZWQ7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKElzIFRydWUgRm9yIEFueShHbG9iYWwuQ29tYmF0YW50cywgIUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Eb3duZWRfc2luY2UgJiYgIShDdXJyZW50IEFycmF5IEVsZW1lbnQuSXNfaW52aXNpYmxlICUgMykKCQkJJiYgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIFZlY3RvcihYIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihDdXJyZW50IEFycmF5IEVsZW1lbnQpKSwgWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoCgkJCUV2ZW50IFBsYXllcikpLCBaIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihDdXJyZW50IEFycmF5IEVsZW1lbnQpKSkpIDw9IDMgJiYgQWJzb2x1dGUgVmFsdWUoWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoCgkJCUV2ZW50IFBsYXllcikpIC0gWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoQ3VycmVudCBBcnJheSBFbGVtZW50KSkpIDw9IDMgJiYgSXMgSW4gTGluZSBvZiBTaWdodChFdmVudCBQbGF5ZXIsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudCwgQmFycmllcnMgRG8gTm90IEJsb2NrIExPUykpKTsKCQkJSWYoRXZlbnQgUGxheWVyLlJldml2ZV9UaW1lciA9PSAxMDAwMCk7CgkJCQlFdmVudCBQbGF5ZXIuUmV2aXZlX1RpbWVyID0gRXZlbnQgUGxheWVyLlBlcmtfVXBfWW91X0dvID8gMiA6IDQ7CgkJCUVsc2UgSWYoR2xvYmFsLk11dF9EZWF0aF9HdWFyZCAmJiBJcyBUcnVlIEZvciBBbnkoUGxheWVycyBXaXRoaW4gUmFkaXVzKEV2ZW50IFBsYXllciwgMywgVGVhbSAxLCBPZmYpLCBJcyBBbGl2ZSgKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQpKSk7CgkJCQlFdmVudCBQbGF5ZXIuUmV2aXZlX1RpbWVyIC09IDAuMTAwOwoJCQlFbHNlOwoJCQkJRXZlbnQgUGxheWVyLlJldml2ZV9UaW1lciAtPSAwLjIwMDsKCQkJRW5kOwoJCQlJZihFdmVudCBQbGF5ZXIuUmV2aXZlX1RpbWVyIDw9IDApOwoJCQkJU21hbGwgTWVzc2FnZShBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBDdXN0b20gU3RyaW5nKCJ7MH0gaGFzIGJlZW4gcmV2aXZlZCEiLCBFdmVudCBQbGF5ZXIpKTsKCQkJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPSAwOwoJCQlFbmQ7CgkJRWxzZTsKCQkJRXZlbnQgUGxheWVyLlJldml2ZV9UaW1lciA9IDEwMDAwOwoJCUVuZDsKCQlXYWl0KDAuMjAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDI6IFRlbGVwb3J0IGlmIFBsYXllciBkaWVkIG9uIEp1bXBwYWQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IFRydWU7CgkJRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSArIDUgPCBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJRXZlbnQgUGxheWVyLklzX2ZseWluZyA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlHbG9iYWwuVGVtcCA9IE5lYXJlc3QgV2Fsa2FibGUgUG9zaXRpb24oUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSArIDUgKiBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoUmFuZG9tIEludGVnZXIoLTE3OSwgMTgwKSwgMCkpOwoJCUNhbGwgU3Vicm91dGluZShOV1BfVGVsZXBvcnQpOwoJfQp9CgpydWxlKCJUZWFtIDI6IFBsYXllciBnZXRzIHVwIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoIUV2ZW50IFBsYXllci5Jc19Db21iYXRhbnQpOwoJCUVuYWJsZSBNZXNzYWdlcyhFdmVudCBQbGF5ZXIpOwoJCVN0b3AgQ2FtZXJhKEV2ZW50IFBsYXllcik7CgkJUGxheSBFZmZlY3QoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQnVmZiBJbXBhY3QgU291bmQsIENvbG9yKFdoaXRlKSwgRXZlbnQgUGxheWVyLCAyMDApOwoJCVNldCBQbGF5ZXIgSGVhbHRoKEV2ZW50IFBsYXllciwgMTAwMDApOwoJCUV2ZW50IFBsYXllci5TcGVjdGF0ZWRfUGxheWVyID0gRXZlbnQgUGxheWVyOwoJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIEtub2NrZWQgRG93bik7CgkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgUGhhc2VkIE91dCk7CgkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgSW52aW5jaWJsZSk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMjogSGVhbCBhZnRlciAyLjUgc2VjIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkxhc3RfRGFtYWdlX3Rha2VuICsgKEV2ZW50IFBsYXllci5QZXJrX0RpZV9IYXJkID8gMC41MDAgOiAxKSAqIChHbG9iYWwuTXV0X0RlZXBfV291bmRzID8gNSA6IDIuNTAwKQoJCQk8IFRvdGFsIFRpbWUgRWxhcHNlZDsKCQlOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIpICE9IDE7CgkJSGVhbHRoKEV2ZW50IFBsYXllcikgIT0gMDsKCX0KCglhY3Rpb25zCgl7CgkJSGVhbChFdmVudCBQbGF5ZXIsIE51bGwsIDEwMCk7CgkJUGxheSBFZmZlY3QoRXZlbnQgUGxheWVyLCBCdWZmIEV4cGxvc2lvbiBTb3VuZCwgQ29sb3IoV2hpdGUpLCBFdmVudCBQbGF5ZXIsIDUwKTsKCQlXaGlsZShUcnVlKTsKCQkJV2FpdCgwLjIwMCwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQkJSGVhbChFdmVudCBQbGF5ZXIsIE51bGwsIDIwKTsKCQlFbmQ7Cgl9Cn0KCnJ1bGUoIlRlYW0gMjogUHJvdGVjdCBmcm9tIE9uZS1zaG90cyBpZiBoZWFsdGggaXMgb3ZlciA1MCUiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfQ29tYmF0YW50ID09IFRydWU7CgkJTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA+PSAwLjUwMDsKCX0KCglhY3Rpb25zCgl7CgkJU2V0IFN0YXR1cyhFdmVudCBQbGF5ZXIsIE51bGwsIFVua2lsbGFibGUsIDk5OTkpOwoJCVdhaXQgVW50aWwoTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA8IDAuNTAwLCA5OTk5OSk7CgkJV2FpdCgwLjI1MCwgUmVzdGFydCBXaGVuIFRydWUpOwoJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFVua2lsbGFibGUpOwoJfQp9CgpydWxlKCJUZWFtIDI6IFNldCAvIFVuc2V0IElzIEZseWluZyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIE9uIEdyb3VuZChFdmVudCBQbGF5ZXIpID09IEZhbHNlOwoJCUV2ZW50IFBsYXllci5Jc19Db21iYXRhbnQgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgxLjUwMCwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJRXZlbnQgUGxheWVyLklzX2ZseWluZyA9IFRydWU7CgkJV2FpdCBVbnRpbChJcyBPbiBHcm91bmQoRXZlbnQgUGxheWVyKSwgOTk5OTkpOwoJCUV2ZW50IFBsYXllci5Jc19mbHlpbmcgPSBGYWxzZTsKCX0KfQoKcnVsZSgiTVVUIFRlYW0gMiAoTXV0YXRvcik6IEh1cnQgTWUgTW9yZSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUdsb2JhbC5NdXRfSHVydF9NZV9Nb3JlID09IFRydWU7CgkJRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgKyAxMCA+PSBUb3RhbCBUaW1lIEVsYXBzZWQ7Cgl9CgoJYWN0aW9ucwoJewoJCUdsb2JhbC5UZW1wID0gRmlsdGVyZWQgQXJyYXkoUGxheWVycyBXaXRoaW4gUmFkaXVzKEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIpLCAzLCBUZWFtIDIsIFN1cmZhY2VzKSwKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LklzX0NvbWJhdGFudCAmJiAhQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSk7CgkJRGFtYWdlKEdsb2JhbC5UZW1wLCBOdWxsLCA3KTsKCQlHbG9iYWwuVGVtcC5MYXN0X0RhbWFnZV90YWtlbiA9IFRvdGFsIFRpbWUgRWxhcHNlZDsKCQlXYWl0KDAuMjUwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBBbWJ1c2giKQp7CglldmVudAoJewoJCVBsYXllciBEZWFsdCBEYW1hZ2U7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX0FtYnVzaCA9PSBUcnVlOwoJCUV2ZW50IEFiaWxpdHkgIT0gTnVsbDsKCQlIZXJvIE9mKFZpY3RpbSkgIT0gSGVybyhXcmVja2luZyBCYWxsKTsKCQkoWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSkgLSBZIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihWaWN0aW0pKSA+PSAzIHx8IEFic29sdXRlIFZhbHVlKEhvcml6b250YWwgQW5nbGUgVG93YXJkcygKCQkJVmljdGltLCBFdmVudCBQbGF5ZXIpKSA+PSA5MCkgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJRGFtYWdlKFZpY3RpbSwgRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuQWJfQW1idXNoICogMzAgLyBFdmVudCBQbGF5ZXIuRGFtYWdlX0RlYWx0X1BlcmNlbnQgKiBFdmVudCBEYW1hZ2UpOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBCaW5kaW5nIEhlYWwiKQp7CglldmVudAoJewoJCVBsYXllciBEZWFsdCBIZWFsaW5nOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BYl9CaW5kaW5nX0hlYWwgPT0gVHJ1ZTsKCQlIZWFsZWUgIT0gRXZlbnQgUGxheWVyOwoJfQoKCWFjdGlvbnMKCXsKCQlTZXQgUGxheWVyIEhlYWx0aChFdmVudCBQbGF5ZXIsIEhlYWx0aChFdmVudCBQbGF5ZXIpICsgRXZlbnQgUGxheWVyLkFiX0JpbmRpbmdfSGVhbCAqIDAuMjUwICogRXZlbnQgSGVhbGluZyk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMiAoQWJpbGl0eSk6IENoYXJnZWQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuQWJfQ2hhcmdlZCA9PSBUcnVlOwoJCVVsdGltYXRlIENoYXJnZSBQZXJjZW50KEV2ZW50IFBsYXllcikgPCBFdmVudCBQbGF5ZXIuQWJfQ2hhcmdlZCAqIDIwOwoJfQoKCWFjdGlvbnMKCXsKCQlTZXQgVWx0aW1hdGUgQ2hhcmdlKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkFiX0NoYXJnZWQgKiAyMCk7CgkJSWYoSXMgRHVwbGljYXRpbmcoRXZlbnQgUGxheWVyKSk7CgkJCVdhaXQoMC4wMTYsIElnbm9yZSBDb25kaXRpb24pOwoJCQlTZXQgVWx0aW1hdGUgQ2hhcmdlKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkFiX0NoYXJnZWQgKiAyMCk7CgkJRW5kOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBIYXN0ZSBQcmltYXJ5IEZpcmUiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuQWJfSGFzdGUgPT0gVHJ1ZTsKCQlBYmlsaXR5IENvb2xkb3duKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpID4gMC4xMDA7Cgl9CgoJYWN0aW9ucwoJewoJCVNldCBBYmlsaXR5IENvb2xkb3duKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSksICgxIC0gMC4yNTAgKiBFdmVudCBQbGF5ZXIuQWJfSGFzdGUpICogQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsCgkJCUJ1dHRvbihQcmltYXJ5IEZpcmUpKSk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMiAoQWJpbGl0eSk6IEhhc3RlIFNlY29uZGFyeSBGaXJlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX0hhc3RlID09IFRydWU7CgkJQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkpID4gMC4xMDA7Cgl9CgoJYWN0aW9ucwoJewoJCVNldCBBYmlsaXR5IENvb2xkb3duKEV2ZW50IFBsYXllciwgQnV0dG9uKFNlY29uZGFyeSBGaXJlKSwgKDEgLSAwLjI1MCAqIEV2ZW50IFBsYXllci5BYl9IYXN0ZSkgKiBBYmlsaXR5IENvb2xkb3duKEV2ZW50IFBsYXllciwKCQkJQnV0dG9uKFNlY29uZGFyeSBGaXJlKSkpOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBIYXN0ZSBBYmlsaXR5IDEiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuQWJfSGFzdGUgPT0gVHJ1ZTsKCQlBYmlsaXR5IENvb2xkb3duKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMSkpID4gMC4xMDA7Cgl9CgoJYWN0aW9ucwoJewoJCVNldCBBYmlsaXR5IENvb2xkb3duKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMSksICgxIC0gMC4yNTAgKiBFdmVudCBQbGF5ZXIuQWJfSGFzdGUpICogQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbigKCQkJQWJpbGl0eSAxKSkpOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBIYXN0ZSBBYmlsaXR5IDIiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuQWJfSGFzdGUgPT0gVHJ1ZTsKCQlBYmlsaXR5IENvb2xkb3duKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMikpID4gMC4xMDA7Cgl9CgoJYWN0aW9ucwoJewoJCVNldCBBYmlsaXR5IENvb2xkb3duKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMiksICgxIC0gMC4yNTAgKiBFdmVudCBQbGF5ZXIuQWJfSGFzdGUpICogQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbigKCQkJQWJpbGl0eSAyKSkpOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBIYXN0ZSBKdW1wIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX0hhc3RlID09IFRydWU7CgkJQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbihKdW1wKSkgPiAwLjEwMDsKCX0KCglhY3Rpb25zCgl7CgkJU2V0IEFiaWxpdHkgQ29vbGRvd24oRXZlbnQgUGxheWVyLCBCdXR0b24oSnVtcCksICgxIC0gMC4yNTAgKiBFdmVudCBQbGF5ZXIuQWJfSGFzdGUpICogQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbigKCQkJSnVtcCkpKTsKCX0KfQoKcnVsZSgiVGVhbSAyIChBYmlsaXR5KTogSGFzdGUgQ3JvdWNoIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX0hhc3RlID09IFRydWU7CgkJQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbihDcm91Y2gpKSA+IDAuMTAwOwoJfQoKCWFjdGlvbnMKCXsKCQlTZXQgQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbihDcm91Y2gpLCAoMSAtIDAuMjUwICogRXZlbnQgUGxheWVyLkFiX0hhc3RlKSAqIEFiaWxpdHkgQ29vbGRvd24oRXZlbnQgUGxheWVyLCBCdXR0b24oCgkJCUNyb3VjaCkpKTsKCX0KfQoKcnVsZSgiVGVhbSAyIChBYmlsaXR5KTogSGVhZGh1bnRlciIpCnsKCWV2ZW50Cgl7CgkJUGxheWVyIERlYWx0IERhbWFnZTsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuQWJfSGVhZGh1bnRlciA9PSBUcnVlOwoJCUV2ZW50IFdhcyBDcml0aWNhbCBIaXQgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJRGFtYWdlKFZpY3RpbSwgRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuQWJfSGVhZGh1bnRlciAqIDQwIC8gRXZlbnQgUGxheWVyLkRhbWFnZV9EZWFsdF9QZXJjZW50ICogRXZlbnQgRGFtYWdlKTsKCX0KfQoKcnVsZSgiVGVhbSAyIChBYmlsaXR5KTogUHJpb3JpdHkgQyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BYl9Qcmlvcml0eSA9PSAzOwoJCUV2ZW50IFBsYXllci5MYXN0X0RhbWFnZV90YWtlbiArIDUgPCBUb3RhbCBUaW1lIEVsYXBzZWQ7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5EYW1hZ2VfRGVhbHRfUGVyY2VudCArPSAzMDsKCQlFdmVudCBQbGF5ZXIuSGVhbGluZ19EZWFsdF9QZXJjZW50ICs9IDMwOwoJCUV2ZW50IFBsYXllci5Nb3ZlX1NwZWVkX1BlcmNlbnQgKz0gMzA7CgkJU2V0IERhbWFnZSBEZWFsdChFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5EYW1hZ2VfRGVhbHRfUGVyY2VudCk7CgkJU2V0IEhlYWxpbmcgRGVhbHQoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuSGVhbGluZ19EZWFsdF9QZXJjZW50KTsKCQlTZXQgTW92ZSBTcGVlZChFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5Nb3ZlX1NwZWVkX1BlcmNlbnQpOwoJCVdhaXQgVW50aWwoIShFdmVudCBQbGF5ZXIuQWJfUHJpb3JpdHkgPT0gMyAmJiBFdmVudCBQbGF5ZXIuTGFzdF9EYW1hZ2VfdGFrZW4gKyA1IDwgVG90YWwgVGltZSBFbGFwc2VkKSwgOTk5OTkpOwoJCUV2ZW50IFBsYXllci5EYW1hZ2VfRGVhbHRfUGVyY2VudCAtPSAzMDsKCQlFdmVudCBQbGF5ZXIuSGVhbGluZ19EZWFsdF9QZXJjZW50IC09IDMwOwoJCUV2ZW50IFBsYXllci5Nb3ZlX1NwZWVkX1BlcmNlbnQgLT0gMzA7CgkJU2V0IERhbWFnZSBEZWFsdChFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5EYW1hZ2VfRGVhbHRfUGVyY2VudCk7CgkJU2V0IEhlYWxpbmcgRGVhbHQoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuSGVhbGluZ19EZWFsdF9QZXJjZW50KTsKCQlTZXQgTW92ZSBTcGVlZChFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5Nb3ZlX1NwZWVkX1BlcmNlbnQpOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBRdWljayBGaXgiKQp7CglldmVudAoJewoJCVBsYXllciBFYXJuZWQgRWxpbWluYXRpb247CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1F1aWNrX0ZpeCA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlIZWFsKEV2ZW50IFBsYXllciwgTnVsbCwgRXZlbnQgUGxheWVyLkFiX1F1aWNrX0ZpeCAqIDUwKTsKCQlJZighRXZlbnQgUGxheWVyLkN1cnJlbnRfUXVpY2tfRml4X1NwZWVkX0JvbnVzKTsKCQkJRXZlbnQgUGxheWVyLkN1cnJlbnRfUXVpY2tfRml4X1NwZWVkX0JvbnVzID0gRXZlbnQgUGxheWVyLkFiX1F1aWNrX0ZpeCAqIDIwOwoJCQlFdmVudCBQbGF5ZXIuTW92ZV9TcGVlZF9QZXJjZW50ICs9IEV2ZW50IFBsYXllci5DdXJyZW50X1F1aWNrX0ZpeF9TcGVlZF9Cb251czsKCQkJU2V0IE1vdmUgU3BlZWQoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuTW92ZV9TcGVlZF9QZXJjZW50KTsKCQlFbmQ7CgkJV2FpdCg1LCBSZXN0YXJ0IFdoZW4gVHJ1ZSk7CgkJRXZlbnQgUGxheWVyLk1vdmVfU3BlZWRfUGVyY2VudCAtPSBFdmVudCBQbGF5ZXIuQ3VycmVudF9RdWlja19GaXhfU3BlZWRfQm9udXM7CgkJRXZlbnQgUGxheWVyLkN1cnJlbnRfUXVpY2tfRml4X1NwZWVkX0JvbnVzID0gMDsKCQlTZXQgTW92ZSBTcGVlZChFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5Nb3ZlX1NwZWVkX1BlcmNlbnQpOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBSZXNpbGllbmNlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Jlc2lsaWVuY2UgPT0gVHJ1ZTsKCQlOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIpIDwgRXZlbnQgUGxheWVyLkFiX1Jlc2lsaWVuY2UgKiAwLjMwMDsKCX0KCglhY3Rpb25zCgl7CgkJU2V0IERhbWFnZSBSZWNlaXZlZChFdmVudCBQbGF5ZXIsIDcwKTsKCQlXYWl0IFVudGlsKCEoRXZlbnQgUGxheWVyLkFiX1Jlc2lsaWVuY2UgJiYgTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA8IEV2ZW50IFBsYXllci5BYl9SZXNpbGllbmNlICogMC4zMDApLCA5OTk5OSk7CgkJU2V0IERhbWFnZSBSZWNlaXZlZChFdmVudCBQbGF5ZXIsIDEwMCk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMiAoQWJpbGl0eSk6IFNlY29uZCBXaW5kIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1NlY29uZF9XaW5kID09IFRydWU7CgkJRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgKyAxLjUwMCA8IFRvdGFsIFRpbWUgRWxhcHNlZDsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA+IEV2ZW50IFBsYXllci5BYl9TZWNvbmRfV2luZCAqIDMwKTsKCQlTbWFsbCBNZXNzYWdlKEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoInswfSByZWNlaXZlZCBhIHNlY29uZCB3aW5kISIsIEV2ZW50IFBsYXllcikpOwoJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEdvb2QgUGlja3VwIEVmZmVjdCwgQ29sb3IoR3JlZW4pLCBFdmVudCBQbGF5ZXIsIDEpOwoJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPSAwOwoJCVdhaXQoMzAsIElnbm9yZSBDb25kaXRpb24pOwoJfQp9CgpydWxlKCJUZWFtIDIgKEFiaWxpdHkpOiBTaGFycHNob290ZXIiKQp7CglldmVudAoJewoJCVBsYXllciBEZWFsdCBEYW1hZ2U7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLlBlcmtfU2hhcnBzaG9vdGVyID09IFRydWU7CgkJRXZlbnQgQWJpbGl0eSAhPSBOdWxsOwoJCUhlcm8gT2YoVmljdGltKSAhPSBIZXJvKFdyZWNraW5nIEJhbGwpOwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBWaWN0aW0pID49IDEwOwoJfQoKCWFjdGlvbnMKCXsKCQlEYW1hZ2UoVmljdGltLCBFdmVudCBQbGF5ZXIsIDUwIC8gRXZlbnQgUGxheWVyLkRhbWFnZV9EZWFsdF9QZXJjZW50ICogRXZlbnQgRGFtYWdlKTsKCX0KfQoKcnVsZSgiVGVhbSAyIChQZXJrKTogQnVsbGV0c3Rvcm0iKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuUGVya19CdWxsZXRzdG9ybSA9PSBUcnVlOwoJCShBbW1vKEV2ZW50IFBsYXllciwgMCkgPCBNYXggQW1tbyhFdmVudCBQbGF5ZXIsIDApIHx8IEFtbW8oRXZlbnQgUGxheWVyLCAxKSA8IE1heCBBbW1vKEV2ZW50IFBsYXllciwgMSkpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCVNldCBBbW1vKEV2ZW50IFBsYXllciwgMCwgMTAwMCk7CgkJU2V0IEFtbW8oRXZlbnQgUGxheWVyLCAxLCAxMDAwKTsKCX0KfQoKcnVsZSgiVGVhbSAyIChQZXJrKTogTXlzdGVyeSBTd2FwIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLlBlcmtfTXlzdGVyeV9Td2FwID09IFRydWU7CgkJRXZlbnQgUGxheWVyLlBlcmtfTXlzdGVyeV9Td2FwIDwgVG90YWwgVGltZSBFbGFwc2VkOwoJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMSwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCUV2ZW50IFBsYXllci5QZXJrX015c3RlcnlfU3dhcCA9IFRvdGFsIFRpbWUgRWxhcHNlZCArIFJhbmRvbSBJbnRlZ2VyKDQ1LCA3NSk7CgkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShSZW1vdmUgRnJvbSBBcnJheSgKCQkJR2xvYmFsLkdhbWVtb2RlIHx8IEdsb2JhbC5VcGdyYWRlX0NvdW50ZXIgPj0gMjUgPyBBbGwgSGVyb2VzIDogQXJyYXkgU2xpY2UoR2xvYmFsLkhSX0hvc3RhZ2VfSGVyb19BcnJheSwgMCwKCQkJR2xvYmFsLlVwZ3JhZGVfQ291bnRlciArIDcpLCBIZXJvIE9mKEV2ZW50IFBsYXllcikpKSk7CgkJRXZlbnQgUGxheWVyLklzX2ludmlzaWJsZSA9IDA7CgkJV2FpdCgwLjEwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJU2V0IFVsdGltYXRlIENoYXJnZShFdmVudCBQbGF5ZXIsIDEwMCk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMiAoUGVyayk6IFB1bXBpbmcgSXJvbiIpCnsKCWV2ZW50Cgl7CgkJUGxheWVyIERlYWx0IERhbWFnZTsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuUGVya19QdW1waW5nX0lyb24gPT0gVHJ1ZTsKCQlFdmVudCBBYmlsaXR5ID09IEJ1dHRvbihNZWxlZSk7CgkJSGVybyBPZihWaWN0aW0pICE9IEhlcm8oV3JlY2tpbmcgQmFsbCk7Cgl9CgoJYWN0aW9ucwoJewoJCVZpY3RpbS5QZXJrX1B1bXBpbmdfSXJvbiA9IE1heChUb3RhbCBUaW1lIEVsYXBzZWQgKyAoR2xvYmFsLkdNdXRfRm9ydGlmaWVkIHx8IFZpY3RpbS5Jc19MaXZpbmdfQm9zcyA/IDEuMjUwIDogMi41MDApLAoJCQlWaWN0aW0uUGVya19QdW1waW5nX0lyb24pOwoJCVNldCBTdGF0dXMoVmljdGltLCBOdWxsLCBLbm9ja2VkIERvd24sIEdsb2JhbC5HTXV0X0ZvcnRpZmllZCB8fCBWaWN0aW0uSXNfTGl2aW5nX0Jvc3MgPyAxLjI1MCA6IDIuNTAwKTsKCQlXYWl0KDAuNDAwLCBSZXN0YXJ0IFdoZW4gVHJ1ZSk7CgkJV2FpdCgxNC42MDAsIElnbm9yZSBDb25kaXRpb24pOwoJfQp9CgpydWxlKCJUZWFtIDIgKFBlcmspOiBSdW5uaW5nIFJpb3QiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuUGVya19SdW5uaW5nX1Jpb3QgPT0gVHJ1ZTsKCQlTcGVlZCBPZihFdmVudCBQbGF5ZXIpID49IDg7Cgl9CgoJYWN0aW9ucwoJewoJCUhlYWwoRXZlbnQgUGxheWVyLCBOdWxsLCA4KTsKCQlXYWl0KDAuMjAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDIgKFBlcmspOiBUZXJyaWZ5IikKewoJZXZlbnQKCXsKCQlQbGF5ZXIgRGVhbHQgRmluYWwgQmxvdzsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuUGVya19UZXJyaWZ5ID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCUFib3J0IElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiAyMCk7CgkJR2xvYmFsLlRlbXAgPSBGaXJzdCBPZihTb3J0ZWQgQXJyYXkoRmlsdGVyZWQgQXJyYXkoUGxheWVycyBXaXRoaW4gUmFkaXVzKEV5ZSBQb3NpdGlvbihWaWN0aW0pLCAyMCwgVGVhbSAxLCBTdXJmYWNlcyksIElzIEFsaXZlKAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQpICYmIEhlcm8gT2YoQ3VycmVudCBBcnJheSBFbGVtZW50KSAhPSBIZXJvKFdyZWNraW5nIEJhbGwpICYmICFIYXMgU3RhdHVzKEN1cnJlbnQgQXJyYXkgRWxlbWVudCwKCQkJUGhhc2VkIE91dCkpLCBEaXN0YW5jZSBCZXR3ZWVuKFZpY3RpbSwgQ3VycmVudCBBcnJheSBFbGVtZW50KSkpOwoJCUFib3J0IElmKEdsb2JhbC5UZW1wID09IDApOwoJCUdsb2JhbC5UZW1wLkZlYXJlZF91bnRpbCA9IFRvdGFsIFRpbWUgRWxhcHNlZCArIChHbG9iYWwuVGVtcC5Jc19MaXZpbmdfQm9zcyA/IDIuNTAwIDogNSk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMiBEb29tZmlzdDogTWV0ZW9yIFN0cmlrZSAoSW52aXNpYmlsaXR5IDIsIG5vdCBkZXRlY3RhYmxlKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlEb29tZmlzdDsKCX0KCgljb25kaXRpb25zCgl7CgkJSXMgVXNpbmcgVWx0aW1hdGUoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfaW52aXNpYmxlID0gMjsKCQlXYWl0IFVudGlsKCFJcyBVc2luZyBVbHRpbWF0ZShFdmVudCBQbGF5ZXIpLCA5OTk5OSk7CgkJRXZlbnQgUGxheWVyLklzX2ludmlzaWJsZSA9IDA7Cgl9Cn0KCnJ1bGUoIlRlYW0gMiBELlZhOiBGaWxsIFVsdGltYXRlIENoYXJnZSB3aGVuIGRvd25lZCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlELlZhOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IFRydWU7CgkJVWx0aW1hdGUgQ2hhcmdlIFBlcmNlbnQoRXZlbnQgUGxheWVyKSAhPSAxMDA7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMC4xMDAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCVNldCBVbHRpbWF0ZSBDaGFyZ2UoRXZlbnQgUGxheWVyLCAxMDApOwoJfQp9CgpydWxlKCJUZWFtIDIgRWNobzogKFdvcmthcm91bmQpIFBsYXllciBkaWVkIEV2ZW50IGZhaWxlZCB0byB0cmlnZ2VyIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUVjaG87Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIERlYWQoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Jc19jaGFuZ2luZ19IZXJvZXMgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMC4xMDAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCVJlc3VycmVjdChFdmVudCBQbGF5ZXIpOwoJfQp9CgpydWxlKCJUZWFtIDIgRWNobzogU3RlYWx0aCAoSW52aXNpYmlsaXR5IDEsIGRldGVjdGFibGUpIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oRWNobyk7CgkJSGVybyBCZWluZyBEdXBsaWNhdGVkKEV2ZW50IFBsYXllcikgPT0gSGVybyhTb21icmEpOwoJCUlzIFVzaW5nIEFiaWxpdHkgMShFdmVudCBQbGF5ZXIpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMC44MDAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUV2ZW50IFBsYXllci5Jc19pbnZpc2libGUgPSAxOwoJCVdhaXQgVW50aWwoIShIZXJvIEJlaW5nIER1cGxpY2F0ZWQoRXZlbnQgUGxheWVyKSA9PSBIZXJvKFNvbWJyYSkgJiYgSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikpLCA5OTk5OSk7CgkJRXZlbnQgUGxheWVyLklzX2ludmlzaWJsZSA9IDA7Cgl9Cn0KCnJ1bGUoIlRlYW0gMiBKdW5rcmF0OiBEZXRvbmF0ZSBSSVAtVGlyZSB3aGVuIGRvd25lZCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlKdW5rcmF0OwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IFRydWU7CgkJSXMgVXNpbmcgVWx0aW1hdGUoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oVWx0aW1hdGUpKTsKCQlXYWl0KDAuNTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDIgTWVyY3k6IFJldml2ZSBBYmlsaXR5IChQbGF5ZXIpIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCU1lcmN5OwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlJcyBCdXR0b24gSGVsZChFdmVudCBQbGF5ZXIsIEJ1dHRvbihBYmlsaXR5IDIpKSA9PSBUcnVlOwoJCUFiaWxpdHkgQ29vbGRvd24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAyKSkgPT0gMDsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IEZhbHNlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBIYWNrZWQpID09IEZhbHNlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllciA9IExhc3QgT2YoU29ydGVkIEFycmF5KEZpbHRlcmVkIEFycmF5KFBsYXllcnMgV2l0aGluIFJhZGl1cyhFdmVudCBQbGF5ZXIsIDEwLCBUZWFtIDIsIE9mZiksCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jc19Db21iYXRhbnQgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuRG93bmVkX3NpbmNlICsgMC4xMDAgPCBUb3RhbCBUaW1lIEVsYXBzZWQgJiYgSXMgSW4gVmlldyBBbmdsZSgKCQkJRXZlbnQgUGxheWVyLCBDdXJyZW50IEFycmF5IEVsZW1lbnQsIDQ1KSksIERvdCBQcm9kdWN0KEZhY2luZyBEaXJlY3Rpb24gT2YoRXZlbnQgUGxheWVyKSwgRGlyZWN0aW9uIFRvd2FyZHMoRXllIFBvc2l0aW9uKAoJCQlFdmVudCBQbGF5ZXIpLCBDdXJyZW50IEFycmF5IEVsZW1lbnQpKSkpOwoJCUlmKEV2ZW50IFBsYXllci5BYl9QbGF5ZXIgIT0gMCk7CgkJCVNtYWxsIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiezB9IGhhcyBiZWVuIHJlc3VycmVjdGVkIGJ5IHsxfXsyfSEiLCBFdmVudCBQbGF5ZXIuQWJfUGxheWVyLAoJCQkJSGVybyBJY29uIFN0cmluZyhIZXJvKE1lcmN5KSksIEV2ZW50IFBsYXllcikpOwoJCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyLkRvd25lZF9zaW5jZSA9IDA7CgkJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEdvb2QgUGlja3VwIEVmZmVjdCwgQ29sb3IoU2t5IEJsdWUpLCBFdmVudCBQbGF5ZXIuQWJfUGxheWVyLCAxKTsKCQkJU2V0IEFiaWxpdHkgQ29vbGRvd24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAyKSwgMzApOwoJCUVuZDsKCQlXYWl0KDAuMDUwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCX0KfQoKcnVsZSgiVGVhbSAyIE1laTogQ3J5by1GcmVlemUgKEludmlzaWJpbGl0eSAzLCBub3QgZGV0ZWN0YWJsZSwgY2FuIGNvbnRlc3QpIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCU1laTsKCX0KCgljb25kaXRpb25zCgl7CgkJSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX2ludmlzaWJsZSA9IDM7CgkJV2FpdCBVbnRpbCghSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllciksIDk5OTk5KTsKCQlFdmVudCBQbGF5ZXIuSXNfaW52aXNpYmxlID0gMDsKCX0KfQoKcnVsZSgiSVYgVGVhbSAyIE1vaXJhOiBCaW90aWMgR3Jhc3Agb24gUG9ydGFsIFNpbXVsYXRpb24iKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJTW9pcmE7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUdsb2JhbC5HYW1lbW9kZSA9PSAxOwoJCUdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAxOwoJCUlzIEZpcmluZyBTZWNvbmRhcnkoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihEaXN0YW5jZSBCZXR3ZWVuKEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIpLCBHbG9iYWwuSVZfT2JqZWN0aXZlX1Bvc2l0aW9uICsgMS4xMTAgKiBVcCkgPD0gMjAgJiYgSXMgSW4gTGluZSBvZiBTaWdodCgKCQkJRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllciksIEdsb2JhbC5JVl9PYmplY3RpdmVfUG9zaXRpb24gKyAxLjExMCAqIFVwLCBCYXJyaWVycyBEbyBOb3QgQmxvY2sgTE9TKSk7CgkJCSJJZiBGYWNpbmcgcmF5IGludGVyc2VjdHMgc3BoZXJlIgoJCQlJZihEaXN0YW5jZSBCZXR3ZWVuKEdsb2JhbC5JVl9PYmplY3RpdmVfUG9zaXRpb24gKyAxLjExMCAqIFVwLCBFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyKSArIE1heCgwLCBEb3QgUHJvZHVjdChGYWNpbmcgRGlyZWN0aW9uIE9mKAoJCQkJRXZlbnQgUGxheWVyKSwgVmVjdG9yIFRvd2FyZHMoRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllciksIEdsb2JhbC5JVl9PYmplY3RpdmVfUG9zaXRpb24gKyAxLjExMCAqIFVwKSkpICogRmFjaW5nIERpcmVjdGlvbiBPZigKCQkJCUV2ZW50IFBsYXllcikpIDw9IDAuODUwKTsKCQkJCURhbWFnZShQbGF5ZXJzIEluIFNsb3QoNiwgVGVhbSAxKSwgRXZlbnQgUGxheWVyLCA5LjYwMCk7CgkJCUVuZDsKCQlFbmQ7CgkJV2FpdCgwLjE5MiwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAyIFNvbWJyYTogU3RlYWx0aCAoSW52aXNpYmlsaXR5IDEsIGRldGVjdGFibGUpLCBlbmQgYWZ0ZXIgMzAgc2Vjb25kcyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlTb21icmE7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIFVzaW5nIEFiaWxpdHkgMShFdmVudCBQbGF5ZXIpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMC44MDAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUV2ZW50IFBsYXllci5Jc19pbnZpc2libGUgPSAxOwoJCVdhaXQgVW50aWwoIUlzIFVzaW5nIEFiaWxpdHkgMShFdmVudCBQbGF5ZXIpLCAzMCk7CgkJSWYoSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikpOwoJCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAxKSk7CgkJRW5kOwoJCUV2ZW50IFBsYXllci5Jc19pbnZpc2libGUgPSAwOwoJfQp9CgpydWxlKCJUZWFtIDIgVHJhY2VyOiBTdGFydCBIZWFsdGggUmVnZW5lcmF0aW9uIGFmdGVyIFJlY2FsbCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlUcmFjZXI7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIFVzaW5nIEFiaWxpdHkgMihFdmVudCBQbGF5ZXIpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMC44NTAsIElnbm9yZSBDb25kaXRpb24pOwoJCUV2ZW50IFBsYXllci5MYXN0X0RhbWFnZV90YWtlbiA9IDA7Cgl9Cn0KCnJ1bGUoIkdsb2JhbDogU2V0IC8gVW5zZXQgSXMgSW5mcmFzaWdodCBvbiAoUGxheWVycykiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBHbG9iYWw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUdsb2JhbC5Jc19JbmZyYXNpZ2h0X29uX1BsYXllcnMgIT0gSXMgVHJ1ZSBGb3IgQW55KEFsbCBQbGF5ZXJzKFRlYW0gMiksIChIZXJvIE9mKEN1cnJlbnQgQXJyYXkgRWxlbWVudCkgPT0gSGVybyhXaWRvd21ha2VyKQoJCQl8fCBIZXJvIEJlaW5nIER1cGxpY2F0ZWQoQ3VycmVudCBBcnJheSBFbGVtZW50KSA9PSBIZXJvKFdpZG93bWFrZXIpKSAmJiBJcyBVc2luZyBVbHRpbWF0ZShDdXJyZW50IEFycmF5IEVsZW1lbnQpKTsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLklzX0luZnJhc2lnaHRfb25fUGxheWVycyA9ICFHbG9iYWwuSXNfSW5mcmFzaWdodF9vbl9QbGF5ZXJzOwoJCVdhaXQoMC4wMTYsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIkhSIFRlYW0gMiBIb3N0YWdlOiBDcmVhdGUgRW50aXRpZXMsIFJlc2N1ZXIgKFBsYXllciksIFN0YXR1cyAoMiksIDAgPSBOQSwgMSA9IFdhaXRpbmcsIDIgPSBSZXNjdWFibGUsIFRpbWVyICgzKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlTbG90IDU7Cgl9CgoJYWN0aW9ucwoJewoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoIkhlcm8gRHJvcC1vZmYiKSwgR2xvYmFsLlBsYXllcl9TcGF3biwgMS41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvLAoJCQlDb2xvcihXaGl0ZSksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJQ3JlYXRlIEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBSaW5nLCBDb2xvcihXaGl0ZSksIEdsb2JhbC5QbGF5ZXJfU3Bhd24sIDIsIFZpc2libGUgVG8pOwoJCVNldCBTdGF0dXMoRXZlbnQgUGxheWVyLCBOdWxsLCBQaGFzZWQgT3V0LCA5OTk5KTsKCQlTdGFydCBGYWNpbmcoRXZlbnQgUGxheWVyLCBWZWN0b3IgVG93YXJkcyhFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5BYl9QbGF5ZXIpLCBFdmVudCBQbGF5ZXIuQWJfUGxheWVyID09IDAgPyAwIDogMTAwLCBUbyBXb3JsZCwKCQkJRGlyZWN0aW9uIGFuZCBUdXJuIFJhdGUpOwoJCVN0YXJ0IFRocm90dGxlIEluIERpcmVjdGlvbihFdmVudCBQbGF5ZXIsIFZlY3RvciBUb3dhcmRzKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkFiX1BsYXllciksCgkJCUV2ZW50IFBsYXllci5BYl9QbGF5ZXIgIT0gMCAmJiBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllci5BYl9QbGF5ZXIsIFZlY3RvcihYIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpKSwKCQkJWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLkFiX1BsYXllcikpLCBaIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpKSkpID49IDIsIFRvIFdvcmxkLAoJCQlSZXBsYWNlIGV4aXN0aW5nIHRocm90dGxlLCBEaXJlY3Rpb24gYW5kIE1hZ25pdHVkZSk7CgkJQ3JlYXRlIEJlYW0gRWZmZWN0KEV2ZW50IFBsYXllci5BYl9QbGF5ZXIgIT0gMCA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwgR3JhcHBsZSBCZWFtLCBFdmVudCBQbGF5ZXIsCgkJCUV2ZW50IFBsYXllci5BYl9QbGF5ZXIsIENvbG9yKFdoaXRlKSwgVmlzaWJsZSBUbyBQb3NpdGlvbiBhbmQgUmFkaXVzKTsKCQlDcmVhdGUgSFVEIFRleHQoRXZlbnQgUGxheWVyLkFiX1Zhcl8yID09IDIgPyBBbGwgUGxheWVycyhBbGwgVGVhbXMpIDogRW1wdHkgQXJyYXksIEhlcm8gSWNvbiBTdHJpbmcoSGVybyBPZihFdmVudCBQbGF5ZXIpKSwKCQkJQ3VzdG9tIFN0cmluZygiUmVzY3VlIHswfSIsIEhlcm8gT2YoRXZlbnQgUGxheWVyKSksIEN1c3RvbSBTdHJpbmcoIlVubG9ja3MgdGhlIEhlcm8gYW5kIGdyYW50cyBib251cyBoZWFsdGgiLCBIZXJvIE9mKAoJCQlFdmVudCBQbGF5ZXIpKSwgUmlnaHQsIC0yMCwgQ29sb3IoWWVsbG93KSwgQ29sb3IoWWVsbG93KSwgQ29sb3IoWWVsbG93KSwgVmlzaWJsZSBUbyBhbmQgU3RyaW5nLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBIVUQgVGV4dChFdmVudCBQbGF5ZXIuQWJfUGxheWVyLCBDdXN0b20gU3RyaW5nKCJCcmluZyB7MH0gdG8gdGhlIEhlcm8gRHJvcC1vZmYhIiwgSGVybyBPZihFdmVudCBQbGF5ZXIpKSwgTnVsbCwgTnVsbCwgVG9wLAoJCQk3MCwgQ29sb3IoWWVsbG93KSwgQ29sb3IoV2hpdGUpLCBDb2xvcihXaGl0ZSksIFZpc2libGUgVG8gYW5kIFN0cmluZywgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSFVEIFRleHQoRXZlbnQgUGxheWVyLkFiX1BsYXllciAhPSAwID8gRmlsdGVyZWQgQXJyYXkoUGxheWVycyBXaXRoaW4gUmFkaXVzKEV2ZW50IFBsYXllciwgMywgVGVhbSAyLCBTdXJmYWNlcyksCgkJCSFDdXJyZW50IEFycmF5IEVsZW1lbnQuRG93bmVkX3NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudCAhPSBFdmVudCBQbGF5ZXIuQWJfUGxheWVyKSA6IEVtcHR5IEFycmF5LCBDdXN0b20gU3RyaW5nKAoJCQkiVXNlIFwiR3JvdXAgVXBcIiB0byB0YWtlIHswfS4iLCBIZXJvIE9mKEV2ZW50IFBsYXllcikpLCBOdWxsLCBOdWxsLCBUb3AsIDcwLCBDb2xvcihZZWxsb3cpLCBDb2xvcihXaGl0ZSksIENvbG9yKFdoaXRlKSwKCQkJVmlzaWJsZSBUbyBhbmQgU3RyaW5nLCBEZWZhdWx0IFZpc2liaWxpdHkpOwoJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEV2ZW50IFBsYXllci5BYl9WYXJfMiA9PSAyICYmIEV2ZW50IFBsYXllci5BYl9QbGF5ZXIgPT0gMCA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwKCQkJQ3VzdG9tIFN0cmluZygiUmVzY3VlIHswfTogezF9IiwgSGVybyBPZihFdmVudCBQbGF5ZXIpLCBSb3VuZCBUbyBJbnRlZ2VyKEV2ZW50IFBsYXllci5BYl9WYXJfMyAtIFRvdGFsIFRpbWUgRWxhcHNlZCwgVXApKSwKCQkJRXZlbnQgUGxheWVyLCAxLjUwMCwgRG8gTm90IENsaXAsIFZpc2libGUgVG8gUG9zaXRpb24gYW5kIFN0cmluZywgQ29sb3IoWWVsbG93KSwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQlDcmVhdGUgSWNvbihFdmVudCBQbGF5ZXIuQWJfVmFyXzIgPT0gMiA/IFJlbW92ZSBGcm9tIEFycmF5KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEV2ZW50IFBsYXllci5BYl9QbGF5ZXIpIDogRW1wdHkgQXJyYXksCgkJCUV2ZW50IFBsYXllciwgRXhjbGFtYXRpb24gTWFyaywgVmlzaWJsZSBUbywgQ29sb3IoWWVsbG93KSwgVHJ1ZSk7CgkJQ3JlYXRlIEljb24oRXZlbnQgUGxheWVyLkFiX1BsYXllciwgR2xvYmFsLlBsYXllcl9TcGF3biArIDIgKiBVcCwgQXJyb3c6IERvd24sIFZpc2libGUgVG8sIENvbG9yKFllbGxvdyksIFRydWUpOwoJCVdhaXQoMC4yNTAsIElnbm9yZSBDb25kaXRpb24pOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9IDE7Cgl9Cn0KCnJ1bGUoIkhSIFRlYW0gMiBIb3N0YWdlOiBTZXQgUmVzY3VhYmxlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCVNsb3QgNTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8yID09IDE7CgkJR2xvYmFsLlVwZ3JhZGVfQ291bnRlciA8IDEuNTAwICogR2xvYmFsLldhdmUgKyAxLjUwMDsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8yID0gMjsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzMgPSBUb3RhbCBUaW1lIEVsYXBzZWQgKyA2MDsKCQlTZXQgSW52aXNpYmxlKEV2ZW50IFBsYXllciwgTm9uZSk7Cgl9Cn0KCnJ1bGUoIkhSIFRlYW0gMiBIb3N0YWdlOiBJcyBSZXNjdWFibGUgKDIpLCBDaGFuZ2UgSGVybywgU3RvcCBGb3JjaW5nIFBvc2l0aW9uLCBUZWxlcG9ydCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlTbG90IDU7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9PSAyOwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBGb3JjaW5nIFBsYXllciBUbyBCZSBIZXJvKEV2ZW50IFBsYXllciwgR2xvYmFsLkhSX0hvc3RhZ2VfSGVyb19BcnJheVtHbG9iYWwuVXBncmFkZV9Db3VudGVyICsgN10pOwoJCVN0b3AgRm9yY2luZyBQbGF5ZXIgUG9zaXRpb24oRXZlbnQgUGxheWVyKTsKCQlXYWl0KDAuMjUwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShHbG9iYWwuT2JqZWN0aXZlX1NwYXducykpOwoJfQp9CgpydWxlKCJIUiBUZWFtIDI6IE1ha2UgSG9zdGFnZSBGb2xsb3ciKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlQbGF5ZXJzIEluIFNsb3QoNSwgVGVhbSAyKS5BYl9WYXJfMiA9PSAyOwoJCVBsYXllcnMgSW4gU2xvdCg1LCBUZWFtIDIpLkFiX1BsYXllciA9PSAwOwoJCUV2ZW50IFBsYXllci5Jc19Db21iYXRhbnQgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IEZhbHNlOwoJCUV2ZW50IFBsYXllci5Jc19jaGFuZ2luZ19IZXJvZXMgPT0gRmFsc2U7CgkJRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIFBsYXllcnMgSW4gU2xvdCg1LCBUZWFtIDIpKSA8PSAzOwoJCUlzIEluIExpbmUgb2YgU2lnaHQoRXZlbnQgUGxheWVyLCBQbGF5ZXJzIEluIFNsb3QoNSwgVGVhbSAyKSwgQmFycmllcnMgRG8gTm90IEJsb2NrIExPUykgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCVBsYXllcnMgSW4gU2xvdCg1LCBUZWFtIDIpLkFiX1BsYXllciA9IEV2ZW50IFBsYXllcjsKCQlDb21tdW5pY2F0ZShFdmVudCBQbGF5ZXIsIFdpdGggWW91KTsKCX0KfQoKcnVsZSgiSFIgVGVhbSAyOiBUYWtlIEhvc3RhZ2UgZnJvbSBhbm90aGVyIFBsYXllciIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCVBsYXllcnMgSW4gU2xvdCg1LCBUZWFtIDIpLkFiX1Zhcl8yID09IDI7CgkJUGxheWVycyBJbiBTbG90KDUsIFRlYW0gMikuQWJfUGxheWVyICE9IDA7CgkJRXZlbnQgUGxheWVyLklzX0NvbWJhdGFudCA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPT0gRmFsc2U7CgkJRXZlbnQgUGxheWVyLklzX2NoYW5naW5nX0hlcm9lcyA9PSBGYWxzZTsKCQlJcyBDb21tdW5pY2F0aW5nKEV2ZW50IFBsYXllciwgR3JvdXAgVXApID09IFRydWU7CgkJRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIFBsYXllcnMgSW4gU2xvdCg1LCBUZWFtIDIpKSA8PSAzOwoJCUlzIEluIExpbmUgb2YgU2lnaHQoRXZlbnQgUGxheWVyLCBQbGF5ZXJzIEluIFNsb3QoNSwgVGVhbSAyKSwgQmFycmllcnMgRG8gTm90IEJsb2NrIExPUykgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCVBsYXllcnMgSW4gU2xvdCg1LCBUZWFtIDIpLkFiX1BsYXllciA9IEV2ZW50IFBsYXllcjsKCQlXYWl0KDEsIElnbm9yZSBDb25kaXRpb24pOwoJCUNvbW11bmljYXRlKFBsYXllcnMgSW4gU2xvdCg1LCBUZWFtIDIpLCBBY2tub3dsZWRnZSk7CgkJV2FpdCgzLjEwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiSFIgVGVhbSAyIEhvc3RhZ2U6IFN0b3AgaWYgdG9vIGZhciBhd2F5IikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCVNsb3QgNTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllciAhPSAwOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9PSAyOwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuQWJfUGxheWVyKSA+PSAxMDsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgwLjUwMCwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllciA9IDA7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8zID0gVG90YWwgVGltZSBFbGFwc2VkICsgMzA7CgkJQ29tbXVuaWNhdGUoRXZlbnQgUGxheWVyLCBOZWVkIEhlbHApOwoJfQp9CgpydWxlKCJIUiBUZWFtIDIgSG9zdGFnZTogU3RvcCBpZiBkb3duZWQgb3IgUGxheWVyIGxlZnQgb3IgY2hhbmdpbmcgaGVyb2VzIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCVNsb3QgNTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllciAhPSAwOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9PSAyOwoJCShFdmVudCBQbGF5ZXIuQWJfUGxheWVyLkRvd25lZF9zaW5jZSB8fCAhRXZlbnQgUGxheWVyLkFiX1BsYXllci5Jc19Db21iYXRhbnQgfHwgRXZlbnQgUGxheWVyLkFiX1BsYXllci5Jc19jaGFuZ2luZ19IZXJvZXMpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BYl9QbGF5ZXIgPSAwOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMyA9IFRvdGFsIFRpbWUgRWxhcHNlZCArIDMwOwoJCUNvbW11bmljYXRlKEV2ZW50IFBsYXllciwgTmVlZCBIZWxwKTsKCX0KfQoKcnVsZSgiSFIgVGVhbSAyIEhvc3RhZ2U6IFN0b3AgaWYgSG9zdGFnZSBkaWVzIikKewoJZXZlbnQKCXsKCQlQbGF5ZXIgRGllZDsKCQlUZWFtIDI7CgkJU2xvdCA1OwoJfQoKCWFjdGlvbnMKCXsKCQlHbG9iYWwuVGVtcCA9IE5lYXJlc3QgV2Fsa2FibGUgUG9zaXRpb24oRXZlbnQgUGxheWVyKTsKCQlDYWxsIFN1YnJvdXRpbmUoTldQX1RlbGVwb3J0KTsKCQlSZXN1cnJlY3QoRXZlbnQgUGxheWVyKTsKCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyID0gMDsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzMgPSBUb3RhbCBUaW1lIEVsYXBzZWQgKyAzMDsKCQlDb21tdW5pY2F0ZShFdmVudCBQbGF5ZXIsIE5lZWQgSGVscCk7Cgl9Cn0KCnJ1bGUoIkhSIFRlYW0gMiBIb3N0YWdlOiBKdW1wIGlmIHN0dWNrIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCVNsb3QgNTsKCX0KCgljb25kaXRpb25zCgl7CgkJVGhyb3R0bGUgT2YoRXZlbnQgUGxheWVyKSAhPSBWZWN0b3IoMCwgMCwgMCk7CgkJU3BlZWQgT2YoRXZlbnQgUGxheWVyKSA8PSAzOwoJfQoKCWFjdGlvbnMKCXsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oSnVtcCkpOwoJCVdhaXQoMSwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiSFIgVGVhbSAyIEhvc3RhZ2U6IEF0IEhlcm8gRHJvcC1vZmYiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDI7CgkJU2xvdCA1OwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgR2xvYmFsLlBsYXllcl9TcGF3bikgPD0gMjsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLlVwZ3JhZGVfQ291bnRlciArPSAxOwoJCVNldCBQbGF5ZXIgQWxsb3dlZCBIZXJvZXMoUmVtb3ZlIEZyb20gQXJyYXkoQWxsIFBsYXllcnMoVGVhbSAyKSwgRXZlbnQgUGxheWVyKSwKCQkJR2xvYmFsLlVwZ3JhZGVfQ291bnRlciA+PSAyNSA/IEFsbCBIZXJvZXMgOiBBcnJheSBTbGljZShHbG9iYWwuSFJfSG9zdGFnZV9IZXJvX0FycmF5LCAwLCBHbG9iYWwuVXBncmFkZV9Db3VudGVyICsgNykpOwoJCVNldCBIZWFsaW5nIFJlY2VpdmVkKEFsbCBQbGF5ZXJzKFRlYW0gMiksIDEwMCArIDIgKiBHbG9iYWwuVXBncmFkZV9Db3VudGVyKTsKCQlTdGFydCBIZWFsIE92ZXIgVGltZShBbGwgUGxheWVycyhUZWFtIDIpLCBOdWxsLCAxLCAxMDAwMCk7CgkJQmlnIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiVW5sb2NrZWQgezB9ISBHYWluZWQgYm9udXMgaGVhbHRoIiwgSGVybyBPZihFdmVudCBQbGF5ZXIpKSk7CgkJUGxheSBFZmZlY3QoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgR29vZCBQaWNrdXAgRWZmZWN0LCBDb2xvcihXaGl0ZSksIFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllciksIDEpOwoJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEV4cGxvc2lvbiBTb3VuZCwgQ29sb3IoV2hpdGUpLCBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpLCAyMDApOwoJCUNvbW11bmljYXRlKEV2ZW50IFBsYXllciwgVGhhbmtzKTsKCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyID0gMDsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzIgPSAwOwoJCVNldCBJbnZpc2libGUoRXZlbnQgUGxheWVyLCBBbGwpOwoJCUlmKEdsb2JhbC5VcGdyYWRlX0NvdW50ZXIgPCAyNSk7CgkJCVdhaXQoMTUsIElnbm9yZSBDb25kaXRpb24pOwoJCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzIgPSAxOwoJCUVsc2U7CgkJCVdhaXQoMiwgSWdub3JlIENvbmRpdGlvbik7CgkJCURlc3Ryb3kgRHVtbXkgQm90KFRlYW0gMiwgNSk7CgkJRW5kOwoJfQp9CgpydWxlKCJIUiBUZWFtIDIgSG9zdGFnZTogVGltZXIgaXMgb3ZlciIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMjsKCQlTbG90IDU7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BYl9QbGF5ZXIgPT0gMDsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzIgPT0gMjsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzMgPCBUb3RhbCBUaW1lIEVsYXBzZWQ7Cgl9CgoJYWN0aW9ucwoJewoJCUJpZyBNZXNzYWdlKEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoIkNvdWxkbid0IHJlc2N1ZSB7MH0iLCBIZXJvIE9mKEV2ZW50IFBsYXllcikpKTsKCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyID0gMDsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzIgPSAwOwoJCVNldCBJbnZpc2libGUoRXZlbnQgUGxheWVyLCBBbGwpOwoJCVdhaXQoMzAsIElnbm9yZSBDb25kaXRpb24pOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9IDE7Cgl9Cn0KCnJ1bGUoIkhSIFRlYW0gMiBIb3N0YWdlOiBTdGFydCBGb3JjaW5nIFBvc2l0aW9uIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCVNsb3QgNTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8yICE9IDI7Cgl9CgoJYWN0aW9ucwoJewoJCVN0YXJ0IEZvcmNpbmcgUGxheWVyIFBvc2l0aW9uKEV2ZW50IFBsYXllciwgMTAwICogVXAsIEZhbHNlKTsKCX0KfQoKcnVsZSgiU3Vicm91dGluZTogVGVsZXBvcnQgdG8gZnJlZSBTcGF3biIpCnsKCWV2ZW50Cgl7CgkJU3Vicm91dGluZTsKCQlUZWxlcG9ydF90b19mcmVlX1NwYXduOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMSAmJiAoU2xvdCBPZihFdmVudCBQbGF5ZXIpID09IDYgfHwgR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyA+IDApICYmIElzIERlYWQoRXZlbnQgUGxheWVyKSk7CgkJCUV2ZW50IFBsYXllci5OYXZfaXNfcmVhY2hhYmxlX05vZGUgPSBGYWxzZTsKCQkJSWYoU2xvdCBPZihFdmVudCBQbGF5ZXIpID09IDYgJiYgIUdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyk7CgkJCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIDEwMCAqIFVwKTsKCQkJRWxzZTsKCQkJCVRlbGVwb3J0KEV2ZW50IFBsYXllciwgR2xvYmFsLklWX09iamVjdGl2ZV9Qb3NpdGlvbiArIFVwKTsKCQkJRW5kOwoJCUVsc2UgSWYoCgkJCQlHbG9iYWwuR2FtZW1vZGUgPT0gMiAmJiBHbG9iYWwuSFZUX0NhbGxfUmVpbmZvcmNlbWVudHMgPj0gVG90YWwgVGltZSBFbGFwc2VkICYmIEdsb2JhbC5Cb3NzX1NwYXduc19yZW1haW5pbmcgPiAwICYmIElzIERlYWQoCgkJCQlFdmVudCBQbGF5ZXIpKTsKCQkJRXZlbnQgUGxheWVyLk5hdl9pc19yZWFjaGFibGVfTm9kZSA9IEZhbHNlOwoJCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIFBsYXllcnMgSW4gU2xvdCg2LCBUZWFtIDEpKTsKCQlFbHNlOwoJCQlHbG9iYWwuVGVtcCA9IEZpcnN0IE9mKFNvcnRlZCBBcnJheShHbG9iYWwuU3Bhd25zLCBSYW5kb20gUmVhbCgwLCAxKSArICgoUGxheWVycyBJbiBTbG90KDAsIFRlYW0gMikKCQkJCS5Jc19Db21iYXRhbnQgJiYgSXMgSW4gTGluZSBvZiBTaWdodChDdXJyZW50IEFycmF5IEVsZW1lbnQgKyBVcCwgUGxheWVycyBJbiBTbG90KDAsIFRlYW0gMiksIEJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpKSB8fCAoCgkJCQlQbGF5ZXJzIEluIFNsb3QoMSwgVGVhbSAyKS5Jc19Db21iYXRhbnQgJiYgSXMgSW4gTGluZSBvZiBTaWdodChDdXJyZW50IEFycmF5IEVsZW1lbnQgKyBVcCwgUGxheWVycyBJbiBTbG90KDEsIFRlYW0gMiksCgkJCQlCYXJyaWVycyBEbyBOb3QgQmxvY2sgTE9TKSkgfHwgKFBsYXllcnMgSW4gU2xvdCgyLCBUZWFtIDIpLklzX0NvbWJhdGFudCAmJiBJcyBJbiBMaW5lIG9mIFNpZ2h0KEN1cnJlbnQgQXJyYXkgRWxlbWVudCArIFVwLAoJCQkJUGxheWVycyBJbiBTbG90KDIsIFRlYW0gMiksIEJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpKSB8fCAoUGxheWVycyBJbiBTbG90KDMsIFRlYW0gMikuSXNfQ29tYmF0YW50ICYmIElzIEluIExpbmUgb2YgU2lnaHQoCgkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQgKyBVcCwgUGxheWVycyBJbiBTbG90KDMsIFRlYW0gMiksIEJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpKSB8fCAoUGxheWVycyBJbiBTbG90KDQsIFRlYW0gMikKCQkJCS5Jc19Db21iYXRhbnQgJiYgSXMgSW4gTGluZSBvZiBTaWdodChDdXJyZW50IEFycmF5IEVsZW1lbnQgKyBVcCwgUGxheWVycyBJbiBTbG90KDQsIFRlYW0gMiksIEJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpKQoJCQkJPyAxMDAgOiAoKFBsYXllcnMgSW4gU2xvdCgwLCBUZWFtIDIpLklzX0NvbWJhdGFudCAmJiBEaXN0YW5jZSBCZXR3ZWVuKEN1cnJlbnQgQXJyYXkgRWxlbWVudCwgUGxheWVycyBJbiBTbG90KDAsIFRlYW0gMikpIDw9IDEwKQoJCQkJfHwgKFBsYXllcnMgSW4gU2xvdCgxLCBUZWFtIDIpLklzX0NvbWJhdGFudCAmJiBEaXN0YW5jZSBCZXR3ZWVuKEN1cnJlbnQgQXJyYXkgRWxlbWVudCwgUGxheWVycyBJbiBTbG90KDEsIFRlYW0gMikpIDw9IDEwKSB8fCAoCgkJCQlQbGF5ZXJzIEluIFNsb3QoMiwgVGVhbSAyKS5Jc19Db21iYXRhbnQgJiYgRGlzdGFuY2UgQmV0d2VlbihDdXJyZW50IEFycmF5IEVsZW1lbnQsIFBsYXllcnMgSW4gU2xvdCgyLCBUZWFtIDIpKSA8PSAxMCkgfHwgKAoJCQkJUGxheWVycyBJbiBTbG90KDMsIFRlYW0gMikuSXNfQ29tYmF0YW50ICYmIERpc3RhbmNlIEJldHdlZW4oQ3VycmVudCBBcnJheSBFbGVtZW50LCBQbGF5ZXJzIEluIFNsb3QoMywgVGVhbSAyKSkgPD0gMTApIHx8ICgKCQkJCVBsYXllcnMgSW4gU2xvdCg0LCBUZWFtIDIpLklzX0NvbWJhdGFudCAmJiBEaXN0YW5jZSBCZXR3ZWVuKEN1cnJlbnQgQXJyYXkgRWxlbWVudCwgUGxheWVycyBJbiBTbG90KDQsIFRlYW0gMikpIDw9IDEwKQoJCQkJPyA1MCA6IDApKSkpOwoJCQlFdmVudCBQbGF5ZXIuTmF2X0luZGV4ID0gR2xvYmFsLlNwYXduc19OZWFyZXN0X05vZGVzX2J5X0luZGV4W0luZGV4IE9mIEFycmF5IFZhbHVlKEdsb2JhbC5TcGF3bnMsIEdsb2JhbC5UZW1wKV07CgkJCUV2ZW50IFBsYXllci5OYXYgPSBHbG9iYWwuTm9kZXNbRXZlbnQgUGxheWVyLk5hdl9JbmRleF07CgkJCUV2ZW50IFBsYXllci5OYXZfaXNfcmVhY2hhYmxlX05vZGUgPSBUcnVlOwoJCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIEdsb2JhbC5UZW1wKTsKCQlFbmQ7Cgl9Cn0KCnJ1bGUoIlN1YnJvdXRpbmU6IFJvYW0iKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJUm9hbTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLk5hdiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcikgKyAzLjUwMCAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhSYW5kb20gSW50ZWdlcigtMTc5LCAxODApLCAwKTsKCQlDYWxsIFN1YnJvdXRpbmUoRmluZF9OV1BfbmVhcl9OYXYpOwoJfQp9CgpydWxlKCJTdWJyb3V0aW5lOiBGaW5kIE5XUCBuZWFyIE5hdiAodHJ5IHRvIGZpbmQgYSByZWFjaGFibGUgd2Fsa2FibGUgcG9zaXRpb24gbmVhciB0aGUgTmF2KSIpCnsKCWV2ZW50Cgl7CgkJU3Vicm91dGluZTsKCQlGaW5kX05XUF9uZWFyX05hdjsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLlRlbXAgPSBOZWFyZXN0IFdhbGthYmxlIFBvc2l0aW9uKEV2ZW50IFBsYXllci5OYXYpOwoJCSJJZiBOV1AgaXMgdmFsaWQgYW5kIHByb2JhYmx5IHJlYWNoYWJsZSIKCQlJZihHbG9iYWwuVGVtcCAhPSBFbXB0eSBBcnJheSAmJiBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllci5OYXYsIEdsb2JhbC5UZW1wKSA8IDMpOwoJCQlFdmVudCBQbGF5ZXIuTmF2ID0gR2xvYmFsLlRlbXA7CgkJRWxzZTsKCQkJIklmIE5hdiBpcyBub3Qgd2Fsa2FibGUiCgkJCUlmKERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLk5hdiArIFVwLCBSYXkgQ2FzdCBIaXQgUG9zaXRpb24oRXZlbnQgUGxheWVyLk5hdiArIFVwLCBFdmVudCBQbGF5ZXIuTmF2ICsgMiAqIERvd24sIE51bGwsIE51bGwsCgkJCQlGYWxzZSkpID49IDMpOwoJCQkJSWYoRXZlbnQgUGxheWVyLklzX1JhbmdlZF9IZXJvIHx8IERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA8IDIpOwoJCQkJCUV2ZW50IFBsYXllci5OYXYgPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpOwoJCQkJRWxzZTsKCQkJCQlFdmVudCBQbGF5ZXIuTmF2ID0gUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLlRhcmdldCkgKyAyICogRGlyZWN0aW9uIFRvd2FyZHMoRXZlbnQgUGxheWVyLlRhcmdldCwgRXZlbnQgUGxheWVyKTsKCQkJCUVuZDsKCQkJRW5kOwoJCUVuZDsKCX0KfQoKcnVsZSgiU3Vicm91dGluZTogRmluZCBDaGFzZSBUYXJnZXQiKQp7CglldmVudAoJewoJCVN1YnJvdXRpbmU7CgkJRmluZF9DaGFzZV9UYXJnZXQ7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5UYXJnZXQgPSBGaXJzdCBPZihTb3J0ZWQgQXJyYXkoRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCSFDdXJyZW50IEFycmF5IEVsZW1lbnQuRG93bmVkX3NpbmNlICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jc19pbnZpc2libGUgPD0gKERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQpIDw9IDIuNDAwIHx8IEdsb2JhbC5Jc19JbmZyYXNpZ2h0X29uX0JvdHMpKSwgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEN1cnJlbnQgQXJyYXkgRWxlbWVudCkpKTsKCX0KfQoKcnVsZSgiVGVhbSAxOiBTdGFydCBGYWNpbmcsIFRocm90dGxlLCBTZXQgUmVzcGF3biBNYXggVGltZSwgU2V0IEhlYWxpbmcgRGVhbHQsIENyZWF0ZSBJbmZvIEhVRCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJYWN0aW9ucwoJewoJCVN0YXJ0IEZhY2luZyhFdmVudCBQbGF5ZXIsIChFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyB8fCBFdmVudCBQbGF5ZXIuSXNfV3JhaXRoIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKEhhbnpvKQoJCQk/IFZlY3RvcigwLCAwLCAwKSA6IDEuNTAwICogRGlyZWN0aW9uIFRvd2FyZHMoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuTmF2KSkgKyAoCgkJCUV2ZW50IFBsYXllci5UYXJnZXQuSXNfQ29tYmF0YW50ID8gRGlyZWN0aW9uIFRvd2FyZHMoRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllciksIEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLlRhcmdldCwgS25vY2tlZCBEb3duKQoJCQl8fCBIYXMgU3RhdHVzKEV2ZW50IFBsYXllci5UYXJnZXQsIEFzbGVlcCkgfHwgSXMgQ29tbXVuaWNhdGluZyBBbnkgRW1vdGUoRXZlbnQgUGxheWVyLlRhcmdldCkgPyBQb3NpdGlvbiBPZigKCQkJRXZlbnQgUGxheWVyLlRhcmdldCkgKyAwLjI1MCAqIFVwIDogRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllci5UYXJnZXQpICsgR2xvYmFsLkFpbV9PZmZzZXQpIDogVmVjdG9yKDAsIDAsIDApKSwgSGFzIFN0YXR1cygKCQkJRXZlbnQgUGxheWVyLCBTdHVubmVkKSA/IDAgOiAoR2xvYmFsLk11dF9BbXBlZCA/IDYwMCA6IDMwMCksIFRvIFdvcmxkLCBEaXJlY3Rpb24gYW5kIFR1cm4gUmF0ZSk7CgkJU3RhcnQgVGhyb3R0bGUgSW4gRGlyZWN0aW9uKEV2ZW50IFBsYXllciwgVmVjdG9yIFRvd2FyZHMoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuTmF2KSwgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIFZlY3RvcigKCQkJWCBDb21wb25lbnQgT2YoRXZlbnQgUGxheWVyLk5hdiksIFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcikpLCBaIENvbXBvbmVudCBPZihFdmVudCBQbGF5ZXIuTmF2KSkpID49IDAuNTAwLAoJCQlUbyBXb3JsZCwgUmVwbGFjZSBleGlzdGluZyB0aHJvdHRsZSwgRGlyZWN0aW9uIGFuZCBNYWduaXR1ZGUpOwoJCVNldCBSZXNwYXduIE1heCBUaW1lKEV2ZW50IFBsYXllciwgOTk5OSk7CgkJU2V0IEhlYWxpbmcgRGVhbHQoRXZlbnQgUGxheWVyLCAwKTsKCQlDcmVhdGUgSFVEIFRleHQoRXZlbnQgUGxheWVyLCBDdXN0b20gU3RyaW5nKCJ7MH1cbnsxfSIsIEN1c3RvbSBTdHJpbmcoIlRhcmdldDogezB9XG5UYXJnZXQgaW4gTE9TOiB7MX1cblRhcmdldCBOYXYgSW5kZXg6IHsyfSIsCgkJCUV2ZW50IFBsYXllci5UYXJnZXQsIEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TLCBFdmVudCBQbGF5ZXIuVGFyZ2V0Lk5hdl9JbmRleCksIEN1c3RvbSBTdHJpbmcoCgkJCSJUYXJnZXQgTGFzdCBOYXYgVXBkYXRlOiB7MH1cblVzaW5nIENvbWJhdCBQYXRoZmluZGluZzogezF9XG5OYXYgaXMgcmVhY2hhYmxlIE5vZGU6IHsyfSIsIEV2ZW50IFBsYXllci5UYXJnZXQuTGFzdF9OYXZfVXBkYXRlLAoJCQlFdmVudCBQbGF5ZXIuSXNfdXNpbmdfQ29tYmF0X1BhdGhmaW5kaW5nLCBFdmVudCBQbGF5ZXIuTmF2X2lzX3JlYWNoYWJsZV9Ob2RlKSksIE51bGwsIE51bGwsIExlZnQsIC0xMDAsIENvbG9yKFdoaXRlKSwgQ29sb3IoCgkJCVdoaXRlKSwgQ29sb3IoV2hpdGUpLCBWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJRXZlbnQgUGxheWVyLkFiX1N0cmluZyA9IFN0cmluZygiIik7CgkJRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgPSBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgKERlYXRoKTogRmllbGQgUmVzdXJyZWN0aW9uLCBTZXQgTmVhciBCYXB0aXN0ZSwgU2V0IENhbiByZXNwYXduIGFmdGVyLCBVbnNldCBJcyBUYXJnZXQgaW4gTE9TIikKewoJZXZlbnQKCXsKCQlQbGF5ZXIgRGllZDsKCQlUZWFtIDE7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuV2F2ZSA+IDA7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAyICYmIFNsb3QgT2YoRXZlbnQgUGxheWVyKSA9PSA2ICYmICgKCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgfHwgR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIpKTsKCQkJSWYoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEpOwoJCQkJSWYoR2xvYmFsLkhWVF9UaW1lc19TdWJkdWVkKTsKCQkJCQlCaWcgTWVzc2FnZShBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBDdXN0b20gU3RyaW5nKCJIVlQgc3ViZHVlZCEiKSk7CgkJCQlFbHNlOwoJCQkJCUJpZyBNZXNzYWdlKEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoIkhWVCBzdWJkdWVkISBHYWluZWQgYm9udXMgaGVhbHRoIikpOwoJCQkJRW5kOwoJCQkJR2xvYmFsLkhWVF9UaW1lc19TdWJkdWVkICs9IDE7CgkJCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPSAyOwoJCQkJRXZlbnQgUGxheWVyLlJldml2ZV9UaW1lciA9IDA7CgkJCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID0gMjsKCQkJCUV2ZW50IFBsYXllci5QZXJrX1B1bXBpbmdfSXJvbiA9IDEwMDAwMDsKCQkJRW5kOwoJCQlJZihFdmVudCBXYXMgRW52aXJvbm1lbnQpOwoJCQkJR2xvYmFsLlRlbXAgPSBOZWFyZXN0IFdhbGthYmxlIFBvc2l0aW9uKEV2ZW50IFBsYXllcik7CgkJCQlDYWxsIFN1YnJvdXRpbmUoTldQX1RlbGVwb3J0KTsKCQkJRW5kOwoJCQlSZXN1cnJlY3QoRXZlbnQgUGxheWVyKTsKCQkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgUGhhc2VkIE91dCk7CgkJCVNldCBTdGF0dXMoRXZlbnQgUGxheWVyLCBOdWxsLCBJbnZpbmNpYmxlLCA5OTk5KTsKCQkJU2V0IFN0YXR1cyhFdmVudCBQbGF5ZXIsIE51bGwsIEtub2NrZWQgRG93biwgOTk5OSk7CgkJCVdhaXQoMC4wNTAsIFJlc3RhcnQgV2hlbiBUcnVlKTsKCQkJU2V0IFN0YXR1cyhFdmVudCBQbGF5ZXIsIE51bGwsIFBoYXNlZCBPdXQsIDk5OTkpOwoJCQlBYm9ydDsKCQlFbmQ7CgkJSWYoIUV2ZW50IFdhcyBFbnZpcm9ubWVudCAmJiBTbG90IE9mKEV2ZW50IFBsYXllcikgIT0gNiAmJiAhRXZlbnQgUGxheWVyLklzX211dGF0ZWQgJiYgSGVybyBPZihFdmVudCBQbGF5ZXIpICE9IEhlcm8oQmFwdGlzdGUpICYmICgKCQkJR2xvYmFsLk11dF9BZHZhbmNlZF9NZWRraXQgfHwgIUV2ZW50IFBsYXllci5Jc19MaXZpbmdfQm9zcykpOwoJCQlHbG9iYWwuVGVtcCA9IFJhbmRvbSBWYWx1ZSBJbiBBcnJheShGaWx0ZXJlZCBBcnJheShQbGF5ZXJzIE9uIEhlcm8oSGVybyhCYXB0aXN0ZSksIFRlYW0gMSksIElzIEFsaXZlKEN1cnJlbnQgQXJyYXkgRWxlbWVudCkgJiYgISgKCQkJCUhhcyBTdGF0dXMoQ3VycmVudCBBcnJheSBFbGVtZW50LCBIYWNrZWQpIHx8IEhhcyBTdGF0dXMoQ3VycmVudCBBcnJheSBFbGVtZW50LCBTdHVubmVkKQoJCQkJfHwgQ3VycmVudCBBcnJheSBFbGVtZW50LkZlYXJlZF91bnRpbCA+PSBUb3RhbCBUaW1lIEVsYXBzZWQpICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5BYl9WYXJfMiArICgKCQkJCUdsb2JhbC5NdXRfQ29tYmF0X01lZGljID8gMiA6IDQpIDwgVG90YWwgVGltZSBFbGFwc2VkICYmIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBDdXJyZW50IEFycmF5IEVsZW1lbnQpCgkJCQk8PSA4ICYmIElzIEluIExpbmUgb2YgU2lnaHQoRXZlbnQgUGxheWVyLCBDdXJyZW50IEFycmF5IEVsZW1lbnQsIEJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpKSk7CgkJCUlmKEdsb2JhbC5UZW1wICE9IDApOwoJCQkJR2xvYmFsLlRlbXAuQWJfVmFyXzIgPSBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJCQlQcmVzcyBCdXR0b24oR2xvYmFsLlRlbXAsIEJ1dHRvbihBYmlsaXR5IDEpKTsKCQkJCVJlc3VycmVjdChFdmVudCBQbGF5ZXIpOwoJCQkJUGxheSBFZmZlY3QoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgR29vZCBQaWNrdXAgRWZmZWN0LCBDb2xvcihHcmVlbiksIEV2ZW50IFBsYXllciwgMSk7CgkJCQkiS25vY2tlZCBEb3duIFN0YXR1cyBpcyBub3QgYXBwbGllZCB3aGVuIHRoZSBib3QgaXMga2lsbGVkIHdoaWxlIHN0dW5uZWQgd2l0aG91dCBhIHdhaXQiCgkJCQlXYWl0KDAuMDE2LCBSZXN0YXJ0IFdoZW4gVHJ1ZSk7CgkJCQlFdmVudCBQbGF5ZXIuUGVya19QdW1waW5nX0lyb24gPSBNYXgoVG90YWwgVGltZSBFbGFwc2VkICsgMS43NTAsIEV2ZW50IFBsYXllci5QZXJrX1B1bXBpbmdfSXJvbik7CgkJCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgS25vY2tlZCBEb3duLCAxLjc1MCk7CgkJCQlBYm9ydDsKCQkJRW5kOwoJCUVuZDsKCQlJZihHbG9iYWwuR011dF9TdG9ybV9SYWdpbmcgJiYgRXZlbnQgUGxheWVyLkdNdXRfVmFyKTsKCQkJQXJyYXkgU2xpY2UoU29ydGVkIEFycmF5KEZpbHRlcmVkIEFycmF5KFBsYXllcnMgV2l0aGluIFJhZGl1cyhFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyKSwgMTAsIFRlYW0gMSwgU3VyZmFjZXMpLCBJcyBBbGl2ZSgKCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudCkgJiYgIUN1cnJlbnQgQXJyYXkgRWxlbWVudC5HTXV0X1ZhciAmJiBIZXJvIE9mKEN1cnJlbnQgQXJyYXkgRWxlbWVudCkgIT0gSGVybyhXcmVja2luZyBCYWxsKSksCgkJCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgQ3VycmVudCBBcnJheSBFbGVtZW50KSksIDAsIDIpLkdNdXRfVmFyID0gVHJ1ZTsKCQlFbmQ7CgkJRXZlbnQgUGxheWVyLk5lbWVzaXNfS2lsbGVyID0gRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Eb3duZWRfc2luY2UgJiYgQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSArIDAuMTAwIDwgVG90YWwgVGltZSBFbGFwc2VkICYmIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5OZW1lc2lzX0tpbGxlciA9PSBFdmVudCBQbGF5ZXIpOwoJCUlmKEV2ZW50IFBsYXllci5OZW1lc2lzX0tpbGxlciAhPSBFbXB0eSBBcnJheSk7CgkJCVNtYWxsIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiQSBOZW1lc2lzIHdhcyBraWxsZWQhIikpOwoJCQlFdmVudCBQbGF5ZXIuTmVtZXNpc19LaWxsZXIuRG93bmVkX3NpbmNlID0gMDsKCQkJRm9yIEdsb2JhbCBWYXJpYWJsZShUZW1wLCAwLCBDb3VudCBPZihFdmVudCBQbGF5ZXIuTmVtZXNpc19LaWxsZXIpLCAxKTsKCQkJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEdvb2QgUGlja3VwIEVmZmVjdCwgQ29sb3IoR3JlZW4pLCBFdmVudCBQbGF5ZXIuTmVtZXNpc19LaWxsZXJbR2xvYmFsLlRlbXBdLCAxKTsKCQkJRW5kOwoJCUVuZDsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMCk7CgkJCUV2ZW50IFBsYXllci5DYW5fcmVzcGF3bl9hZnRlciA9IFRvdGFsIFRpbWUgRWxhcHNlZCArIE1heCgwLCA0IC0gMC4zMDAgKiBHbG9iYWwuV2F2ZSk7CgkJCUdsb2JhbC5Nb25leSArPSAoR2xvYmFsLk11dGF0b3JzX2FjdGl2YXRlZCA/IDIgOiAxKSAqIChFdmVudCBQbGF5ZXIuTGV2ZWwgIT0gNCAmJiBFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MgPyAoSGVybyBPZigKCQkJCUV2ZW50IFBsYXllcikgPT0gSGVybyhHZW5qaSkgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oSGFuem8pID8gNTAgOiA3MCkgOiA1KTsKCQkJSWYoRXZlbnQgUGxheWVyLklzX0xpdmluZ19Cb3NzKTsKCQkJCVN0b3AgRm9yY2luZyBQbGF5ZXIgT3V0bGluZXMoRXZlbnQgUGxheWVyLCBBbGwgUGxheWVycyhBbGwgVGVhbXMpKTsKCQkJRW5kOwoJCUVuZDsKCQlFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MgPSBGYWxzZTsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA9IDA7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSAoUmVzcGF3bik6IFJlc2V0IER1bW15LCBDaGFuZ2UgSGVybywgU2V0IExhc3QgSGVybyBDaGFuZ2UiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlJcyBEZWFkKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQkoR2xvYmFsLkdhbWVtb2RlID8gKFNsb3QgT2YoRXZlbnQgUGxheWVyKQoJCQk9PSA2ID8gR2xvYmFsLklWX0hWVF9TcGF3bl9TbG90X1NpeCA6IEdsb2JhbC5TcGF3bnNfcmVtYWluaW5nIHx8IEdsb2JhbC5Cb3NzX1NwYXduc19yZW1haW5pbmcpIDogKAoJCQlHbG9iYWwuU3Bhd25zX3JlbWFpbmluZyA+IDAgfHwgKEdsb2JhbC5Cb3NzX1NwYXduc19yZW1haW5pbmcgPiAwICYmIFNsb3QgT2YoRXZlbnQgUGxheWVyKSA+PSA0KSkpID09IFRydWU7CgkJRXZlbnQgUGxheWVyLkNhbl9yZXNwYXduX2FmdGVyIDwgVG90YWwgVGltZSBFbGFwc2VkOwoJCUV2ZW50IFBsYXllci5MZXZlbCAhPSAwOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihTbG90IE9mKEV2ZW50IFBsYXllcikgIT0gNik7CgkJCVdhaXQoMC41MDAgKyAwLjIwMCAqIFNsb3QgT2YoRXZlbnQgUGxheWVyKSwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlFbmQ7CgkJSWYoRXZlbnQgUGxheWVyLklzX211dGF0ZWQpOwoJCQlTdG9wIFNjYWxpbmcgUGxheWVyKEV2ZW50IFBsYXllcik7CgkJCVN0b3AgTW9kaWZ5aW5nIEhlcm8gVm9pY2UgTGluZXMoRXZlbnQgUGxheWVyKTsKCQkJRXZlbnQgUGxheWVyLklzX211dGF0ZWQgPSBGYWxzZTsKCQkJR2xvYmFsLk11dF9NdXRhdGlvbiA9IFRvdGFsIFRpbWUgRWxhcHNlZCArIDMwOwoJCUVuZDsKCQlDYWxsIFN1YnJvdXRpbmUoVGVsZXBvcnRfdG9fZnJlZV9TcGF3bik7CgkJIlNlbGVjdCBIZXJvIgoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAwKTsKCQkJSWYoR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyA+IDAgJiYgU2xvdCBPZihFdmVudCBQbGF5ZXIpID49IDQpOwoJCQkJR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyAtPSAxOwoJCQkJSWYoR2xvYmFsLldhdmUgPT0gNSB8fCBHbG9iYWwuV2F2ZSA9PSAxNik7CgkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIFNsb3QgT2YoRXZlbnQgUGxheWVyKSA9PSA0ID8gSGVybyhHZW5qaSkgOiBIZXJvKEhhbnpvKSk7CgkJCQlFbHNlIElmKEdsb2JhbC5XYXZlID09IDEwIHx8IEdsb2JhbC5XYXZlID09IDE5KTsKCQkJCQlTdGFydCBGb3JjaW5nIFBsYXllciBUbyBCZSBIZXJvKEV2ZW50IFBsYXllciwgSGVybyhSZWluaGFyZHQpKTsKCQkJCUVsc2U7CgkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIEhlcm8oQmFzdGlvbikpOwoJCQkJRW5kOwoJCQlFbHNlOwoJCQkJR2xvYmFsLlNwYXduc19yZW1haW5pbmcgLT0gMTsKCQkJCUdsb2JhbC5UZW1wID0gR2xvYmFsLk11dF9Qcm9tb3Rpb24gJiYgUmFuZG9tIEludGVnZXIoMSwgMTAwKSA8PSAyMCAmJiBFdmVudCBQbGF5ZXIuTGV2ZWwgPCAzOwoJCQkJSWYoR2xvYmFsLk11dF9UaGVfQ2F2YWxyeSAmJiBTbG90IE9mKEV2ZW50IFBsYXllcikgPT0gMCAmJiBIZXJvIE9mKEV2ZW50IFBsYXllcikgIT0gSGVybyhUcmFjZXIpKTsKCQkJCQlTdGFydCBGb3JjaW5nIFBsYXllciBUbyBCZSBIZXJvKEV2ZW50IFBsYXllciwgSGVybyhUcmFjZXIpKTsKCQkJCUVsc2UgSWYoRXZlbnQgUGxheWVyLkxldmVsICsgR2xvYmFsLlRlbXAgPT0gMSk7CgkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShGaWx0ZXJlZCBBcnJheShBcnJheShIZXJvKE1jQ3JlZSksIEhlcm8oU29sZGllcjogNzYpLAoJCQkJCQlHbG9iYWwuV2F2ZSA+PSAzID8gSGVybyhCcmlnaXR0ZSkgOiBGYWxzZSksIEN1cnJlbnQgQXJyYXkgRWxlbWVudCkpKTsKCQkJCUVsc2UgSWYoRXZlbnQgUGxheWVyLkxldmVsICsgR2xvYmFsLlRlbXAgPT0gMik7CgkJCQkJSWYoR2xvYmFsLldhdmUgPj0gOCAmJiBHbG9iYWwuSFJfV2F2ZV9TdGFydCArIDEwMCA8IFRvdGFsIFRpbWUgRWxhcHNlZCAmJiAhSXMgSGVybyBCZWluZyBQbGF5ZWQoSGVybyhSZWFwZXIpLCBUZWFtIDEpKTsKCQkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIEhlcm8oUmVhcGVyKSk7CgkJCQkJRWxzZTsKCQkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShGaWx0ZXJlZCBBcnJheShBcnJheShIZXJvKFdpZG93bWFrZXIpLCBDb3VudCBPZigKCQkJCQkJCVBsYXllcnMgT24gSGVybyhIZXJvKEVjaG8pLCBUZWFtIDEpKSA8IDIgPyBIZXJvKEVjaG8pIDogRmFsc2UsIEdsb2JhbC5XYXZlID49IDYgPyBIZXJvKEJhcHRpc3RlKSA6IEZhbHNlLAoJCQkJCQkJR2xvYmFsLldhdmUgPj0gOCAmJiAhSXMgSGVybyBCZWluZyBQbGF5ZWQoSGVybyhTb21icmEpLCBUZWFtIDEpID8gSGVybyhTb21icmEpIDogRmFsc2UpLCBDdXJyZW50IEFycmF5IEVsZW1lbnQpKSk7CgkJCQkJRW5kOwoJCQkJRWxzZSBJZihFdmVudCBQbGF5ZXIuTGV2ZWwgKyBHbG9iYWwuVGVtcCA9PSAzKTsKCQkJCQlTdGFydCBGb3JjaW5nIFBsYXllciBUbyBCZSBIZXJvKEV2ZW50IFBsYXllciwgUmFuZG9tIFZhbHVlIEluIEFycmF5KEZpbHRlcmVkIEFycmF5KEFycmF5KEhlcm8oUm9hZGhvZyksCgkJCQkJCUdsb2JhbC5XYXZlID49IDcgJiYgQ291bnQgT2YoUGxheWVycyBPbiBIZXJvKEhlcm8oT3Jpc2EpLCBUZWFtIDEpKSA8IDIgPyBIZXJvKE9yaXNhKSA6IEZhbHNlLCBHbG9iYWwuV2F2ZSA+PSA5ID8gSGVybyhUcmFjZXIpCgkJCQkJCTogRmFsc2UsIEdsb2JhbC5XYXZlID49IDExICYmICFJcyBIZXJvIEJlaW5nIFBsYXllZChIZXJvKFNpZ21hKSwgVGVhbSAxKSA/IEhlcm8oU2lnbWEpIDogRmFsc2UpLCBDdXJyZW50IEFycmF5IEVsZW1lbnQpKSk7CgkJCQlFbHNlIElmKEV2ZW50IFBsYXllci5MZXZlbCA9PSA0KTsKCQkJCQlTdGFydCBGb3JjaW5nIFBsYXllciBUbyBCZSBIZXJvKEV2ZW50IFBsYXllciwgUmFuZG9tIFZhbHVlIEluIEFycmF5KEFycmF5KEhlcm8oR2VuamkpLCBIZXJvKEhhbnpvKSkpKTsKCQkJCUVuZDsKCQkJRW5kOwoJCUVsc2U7CgkJCUlmKFNsb3QgT2YoRXZlbnQgUGxheWVyKSA9PSA2KTsKCQkJCUdsb2JhbC5JVl9IVlRfU3Bhd25fU2xvdF9TaXggPSBGYWxzZTsKCQkJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAxKTsKCQkJCQlJZihHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMpOwoJCQkJCQlTdGFydCBGb3JjaW5nIFBsYXllciBUbyBCZSBIZXJvKEV2ZW50IFBsYXllciwgQXJyYXkoSGVybyhPcmlzYSksIEhlcm8oU2lnbWEpLCBIZXJvKEhhbnpvKSwgSGVybyhHZW5qaSksIEhlcm8oRWNobyksIEhlcm8oU29tYnJhKSwKCQkJCQkJCUhlcm8oVHJhY2VyKSwgSGVybyhSZWluaGFyZHQpLCBIZXJvKEJhc3Rpb24pLCBIZXJvKFJlYXBlciksIEhlcm8oUm9hZGhvZyksIEhlcm8oSGFuem8pLCBIZXJvKEdlbmppKSwgSGVybyhSZWluaGFyZHQpLCBIZXJvKAoJCQkJCQkJQmFzdGlvbikpW0dsb2JhbC5XYXZlIC0gMV0pOwoJCQkJCUVsc2U7CgkJCQkJCVN0YXJ0IEZvcmNpbmcgUGxheWVyIFRvIEJlIEhlcm8oRXZlbnQgUGxheWVyLCBIZXJvKFdyZWNraW5nIEJhbGwpKTsKCQkJCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID0gMTsKCQkJCQkJQmlnIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiUG9ydGFsIE9wZW5lZCEiKSk7CgkJCQkJRW5kOwoJCQkJRWxzZSBJZihHbG9iYWwuR2FtZW1vZGUgPT0gMik7CgkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIEFycmF5KEhlcm8oTWNDcmVlKSwgSGVybyhCcmlnaXR0ZSksIEhlcm8oQmFwdGlzdGUpLCBIZXJvKFdpZG93bWFrZXIpLCBIZXJvKEVjaG8pLAoJCQkJCQlIZXJvKFNvbWJyYSksIEhlcm8oVHJhY2VyKSwgSGVybyhPcmlzYSksIEhlcm8oUm9hZGhvZyksIEhlcm8oUmVhcGVyKSwgSGVybyhTaWdtYSksIEhlcm8oSGFuem8pLCBIZXJvKEdlbmppKSwgSGVybyhSZWluaGFyZHQpLAoJCQkJCQlIZXJvKEJhc3Rpb24pKVtHbG9iYWwuV2F2ZSAtIDFdKTsKCQkJCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPSAxOwoJCQkJCUdsb2JhbC5IVlRfVGltZXNfU3ViZHVlZCA9IDA7CgkJCQkJRXZlbnQgUGxheWVyLlBlcmtfUHVtcGluZ19Jcm9uID0gMDsKCQkJCQlCaWcgTWVzc2FnZShBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBDdXN0b20gU3RyaW5nKCJIaWdoIFZhbHVlIFRhcmdldCBsb2NhdGVkISIpKTsKCQkJCUVuZDsKCQkJRWxzZSBJZihHbG9iYWwuQm9zc19TcGF3bnNfcmVtYWluaW5nID4gMCk7CgkJCQlHbG9iYWwuQm9zc19TcGF3bnNfcmVtYWluaW5nIC09IDE7CgkJCQlJZihHbG9iYWwuSVZfSFZUX0Jvc3NfU3Bhd25zX2Jsb2NrZWRfdW50aWwgPj0gVG90YWwgVGltZSBFbGFwc2VkIHx8IEdsb2JhbC5XYXZlIDwgNSk7CgkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShGaWx0ZXJlZCBBcnJheShBcnJheShIZXJvKFJvYWRob2cpLCBHbG9iYWwuV2F2ZSA+PSAyID8gSGVybygKCQkJCQkJT3Jpc2EpIDogRmFsc2UsIEdsb2JhbC5XYXZlID49IDMgPyBIZXJvKFRyYWNlcikgOiBGYWxzZSwgR2xvYmFsLldhdmUgPj0gNCA/IEhlcm8oU2lnbWEpIDogRmFsc2UsIEdsb2JhbC5XYXZlID49IDcgPyBIZXJvKAoJCQkJCQlSZWFwZXIpIDogRmFsc2UpLCBDdXJyZW50IEFycmF5IEVsZW1lbnQpKSk7CgkJCQlFbHNlOwoJCQkJCUdsb2JhbC5JVl9IVlRfQm9zc19TcGF3bnNfYmxvY2tlZF91bnRpbCA9IFRvdGFsIFRpbWUgRWxhcHNlZCArIDEwOwoJCQkJCVN0YXJ0IEZvcmNpbmcgUGxheWVyIFRvIEJlIEhlcm8oRXZlbnQgUGxheWVyLCBGaXJzdCBPZihTb3J0ZWQgQXJyYXkoRmlsdGVyZWQgQXJyYXkoQXJyYXkoSGVybyhIYW56byksIEdsb2JhbC5XYXZlID49IDYgPyBIZXJvKAoJCQkJCQlHZW5qaSkgOiBGYWxzZSwgR2xvYmFsLldhdmUgPj0gMTAgPyBIZXJvKFJlaW5oYXJkdCkgOiBGYWxzZSwgR2xvYmFsLldhdmUgPj0gMTEgPyBIZXJvKEJhc3Rpb24pIDogRmFsc2UpLAoJCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQpLCBSYW5kb20gUmVhbCgwLCAwLjUwMCkgKyBDb3VudCBPZihQbGF5ZXJzIE9uIEhlcm8oQ3VycmVudCBBcnJheSBFbGVtZW50LCBUZWFtIDEpKSkpKTsKCQkJCUVuZDsKCQkJRWxzZTsKCQkJCUdsb2JhbC5UZW1wID0gR2xvYmFsLk11dF9Qcm9tb3Rpb24gJiYgUmFuZG9tIEludGVnZXIoMSwgMTAwKSA8PSAyMCAmJiBFdmVudCBQbGF5ZXIuTGV2ZWwgPCAzOwoJCQkJSWYoR2xvYmFsLk11dF9UaGVfQ2F2YWxyeSAmJiBTbG90IE9mKEV2ZW50IFBsYXllcikgPT0gMCAmJiBIZXJvIE9mKEV2ZW50IFBsYXllcikgIT0gSGVybyhUcmFjZXIpKTsKCQkJCQlTdGFydCBGb3JjaW5nIFBsYXllciBUbyBCZSBIZXJvKEV2ZW50IFBsYXllciwgSGVybyhUcmFjZXIpKTsKCQkJCUVsc2UgSWYoRXZlbnQgUGxheWVyLkxldmVsICsgR2xvYmFsLlRlbXAgPT0gMSk7CgkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShGaWx0ZXJlZCBBcnJheShBcnJheShIZXJvKE1jQ3JlZSksIEhlcm8oU29sZGllcjogNzYpLAoJCQkJCQlHbG9iYWwuV2F2ZSA+PSAzID8gSGVybyhCcmlnaXR0ZSkgOiBGYWxzZSksIEN1cnJlbnQgQXJyYXkgRWxlbWVudCkpKTsKCQkJCUVsc2UgSWYoRXZlbnQgUGxheWVyLkxldmVsICsgR2xvYmFsLlRlbXAgPT0gMik7CgkJCQkJU3RhcnQgRm9yY2luZyBQbGF5ZXIgVG8gQmUgSGVybyhFdmVudCBQbGF5ZXIsIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShGaWx0ZXJlZCBBcnJheShBcnJheShIZXJvKFdpZG93bWFrZXIpLCBDb3VudCBPZigKCQkJCQkJUGxheWVycyBPbiBIZXJvKEhlcm8oRWNobyksIFRlYW0gMSkpIDwgMiA/IEhlcm8oRWNobykgOiBGYWxzZSwgR2xvYmFsLldhdmUgPj0gNSA/IEhlcm8oQmFwdGlzdGUpIDogRmFsc2UsCgkJCQkJCUdsb2JhbC5XYXZlID49IDcgJiYgIUlzIEhlcm8gQmVpbmcgUGxheWVkKEhlcm8oU29tYnJhKSwgVGVhbSAxKSA/IEhlcm8oU29tYnJhKSA6IEZhbHNlLAoJCQkJCQlHbG9iYWwuV2F2ZSA+PSAxMSAmJiAhSXMgSGVybyBCZWluZyBQbGF5ZWQoSGVybyhSZWFwZXIpLCBUZWFtIDEpID8gSGVybyhSZWFwZXIpIDogRmFsc2UpLCBDdXJyZW50IEFycmF5IEVsZW1lbnQpKSk7CgkJCQlFbHNlIElmKEV2ZW50IFBsYXllci5MZXZlbCArIEdsb2JhbC5UZW1wID09IDMpOwoJCQkJCVN0YXJ0IEZvcmNpbmcgUGxheWVyIFRvIEJlIEhlcm8oRXZlbnQgUGxheWVyLCBSYW5kb20gVmFsdWUgSW4gQXJyYXkoRmlsdGVyZWQgQXJyYXkoQXJyYXkoSGVybyhSb2FkaG9nKSwKCQkJCQkJR2xvYmFsLldhdmUgPj0gNiAmJiBDb3VudCBPZihQbGF5ZXJzIE9uIEhlcm8oSGVybyhPcmlzYSksIFRlYW0gMSkpIDwgMiA/IEhlcm8oT3Jpc2EpIDogRmFsc2UsIEdsb2JhbC5XYXZlID49IDggPyBIZXJvKFRyYWNlcikKCQkJCQkJOiBGYWxzZSwgR2xvYmFsLldhdmUgPj0gOSAmJiAhSXMgSGVybyBCZWluZyBQbGF5ZWQoSGVybyhTaWdtYSksIFRlYW0gMSkgPyBIZXJvKFNpZ21hKSA6IEZhbHNlKSwgQ3VycmVudCBBcnJheSBFbGVtZW50KSkpOwoJCQkJRW5kOwoJCQlFbmQ7CgkJRW5kOwoJCSJTZWxlY3RlZCBIZXJvIGlzIHRoZSBzYW1lIGFzIGN1cnJlbnQgSGVybyIKCQlJZihJcyBEZWFkKEV2ZW50IFBsYXllcikpOwoJCQlSZXN1cnJlY3QoRXZlbnQgUGxheWVyKTsKCQkJU2V0IEFtbW8oRXZlbnQgUGxheWVyLCAwLCBNYXggQW1tbyhFdmVudCBQbGF5ZXIsIDApKTsKCQlFbmQ7CgkJSWYoR2xvYmFsLkdhbWVtb2RlID09IDApOwoJCQlTZXQgTWF4IEhlYWx0aChFdmVudCBQbGF5ZXIsIChHbG9iYWwuTXV0YXRvcnNfYWN0aXZhdGVkID8gMS4xMDAgOiAxKSAqICg4MCArIDEyMCAqICgoR2xvYmFsLldhdmUgLSAxICsgMiAqIE1heCgwLAoJCQkJR2xvYmFsLldhdmUgLSAxMykpIC8gMzkpKSAqICgwLjIwMCArIDAuMjAwICogR2xvYmFsLkNvbWJhdGFudHNfQ291bnQpKTsKCQlFbHNlOwoJCQlTZXQgTWF4IEhlYWx0aChFdmVudCBQbGF5ZXIsIChHbG9iYWwuTXV0YXRvcnNfYWN0aXZhdGVkID8gMS4xMDAgOiAxKSAqICg4MCArIDEyMCAqICgoR2xvYmFsLldhdmUgLSAxICsgMiAqIE1heCgwLCBHbG9iYWwuV2F2ZSAtIDkpKQoJCQkJLyAyNikpICogKDAuMjAwICsgMC4yMDAgKiBHbG9iYWwuQ29tYmF0YW50c19Db3VudCkpOwoJCUVuZDsKCQlTdGFydCBIZWFsIE92ZXIgVGltZShFdmVudCBQbGF5ZXIsIE51bGwsIDEsIDEwMDAwKTsKCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCVN0b3AgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpKTsKCQlDbGVhciBTdGF0dXMoRXZlbnQgUGxheWVyLCBVbmtpbGxhYmxlKTsKCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgUm9vdGVkLCAxKTsKCQlDYWxsIFN1YnJvdXRpbmUoRmluZF9DaGFzZV9UYXJnZXQpOwoJCUlmKFNsb3QgT2YoRXZlbnQgUGxheWVyKSA9PSA2KTsKCQkJU2V0IE1vdmUgU3BlZWQoRXZlbnQgUGxheWVyLCBHbG9iYWwuTXV0X0FtcGVkID8gMTE1IDogMTAwKTsKCQkJRXZlbnQgUGxheWVyLkhhc19TcGF3bl9TcGVlZF9Cb251cyA9IEZhbHNlOwoJCUVsc2U7CgkJCVNldCBNb3ZlIFNwZWVkKEV2ZW50IFBsYXllciwgKEdsb2JhbC5NdXRfUmVpbmZvcmNlbWVudHMgPyA1MCA6IDApICsgTWluKEdsb2JhbC5NYXhfU3BlZWRfQm9udXMsIDEwMCArIE1heCg1ICogR2xvYmFsLldhdmUsCgkJCQkyICogRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpKSkpOwoJCQlFdmVudCBQbGF5ZXIuSGFzX1NwYXduX1NwZWVkX0JvbnVzID0gVHJ1ZTsKCQlFbmQ7CgkJRXZlbnQgUGxheWVyLkxhc3RfS25vY2tiYWNrX3JlY2VpdmVkID0gMDsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzEgPSBGYWxzZTsKCQlFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsID0gMDsKCQlFdmVudCBQbGF5ZXIuSXNfUmFuZ2VkX0hlcm8gPSBIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhNY0NyZWUpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKFNvbGRpZXI6IDc2KSB8fCBIZXJvIE9mKAoJCQlFdmVudCBQbGF5ZXIpID09IEhlcm8oQmFwdGlzdGUpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKFdpZG93bWFrZXIpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKEVjaG8pIHx8IEhlcm8gT2YoCgkJCUV2ZW50IFBsYXllcikgPT0gSGVybyhPcmlzYSkgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oU2lnbWEpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKEhhbnpvKTsKCQlFdmVudCBQbGF5ZXIuQWxsb3dfRmxpbmNoID0gSGVybyBPZihFdmVudCBQbGF5ZXIpICE9IEhlcm8oQnJpZ2l0dGUpICYmIEhlcm8gT2YoRXZlbnQgUGxheWVyKSAhPSBIZXJvKFNvbWJyYSkgJiYgSGVybyBPZigKCQkJRXZlbnQgUGxheWVyKSAhPSBIZXJvKE9yaXNhKSAmJiBIZXJvIE9mKEV2ZW50IFBsYXllcikgIT0gSGVybyhUcmFjZXIpICYmIEhlcm8gT2YoRXZlbnQgUGxheWVyKSAhPSBIZXJvKEdlbmppKSAmJiBIZXJvIE9mKAoJCQlFdmVudCBQbGF5ZXIpICE9IEhlcm8oQmFzdGlvbikgJiYgSGVybyBPZihFdmVudCBQbGF5ZXIpICE9IEhlcm8oV3JlY2tpbmcgQmFsbCk7CgkJRXZlbnQgUGxheWVyLkNhbl9RdWlja19NZWxlZSA9IEhlcm8gT2YoRXZlbnQgUGxheWVyKSAhPSBIZXJvKEJyaWdpdHRlKSAmJiBIZXJvIE9mKEV2ZW50IFBsYXllcikgIT0gSGVybyhSZWluaGFyZHQpICYmIEhlcm8gT2YoCgkJCUV2ZW50IFBsYXllcikgIT0gSGVybyhXcmVja2luZyBCYWxsKTsKCQlFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MgPSBIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhHZW5qaSkgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oSGFuem8pIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKQoJCQk9PSBIZXJvKEJhc3Rpb24pIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKFJlaW5oYXJkdCk7CgkJU2V0IEtub2NrYmFjayBSZWNlaXZlZChFdmVudCBQbGF5ZXIsIEdsb2JhbC5HTXV0X0ZvcnRpZmllZCB8fCBFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MgPyAyNSA6IDEwMCk7CgkJSWYoU2xvdCBPZihFdmVudCBQbGF5ZXIpID09IDYpOwoJCQlJZihIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhXcmVja2luZyBCYWxsKSk7CgkJCQlTZXQgRGFtYWdlIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgMTAwKTsKCQkJCVNldCBIZWFsaW5nIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgMCk7CgkJCUVsc2U7CgkJCQlTZXQgRGFtYWdlIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLklzX0xpdmluZ19Cb3NzID8gNzUgOiAoSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oT3Jpc2EpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKQoJCQkJCT09IEhlcm8oU2lnbWEpID8gMjUgOiAxMCkpOwoJCQkJU2V0IEhlYWxpbmcgUmVjZWl2ZWQoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MgPyA3NSA6IChIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhPcmlzYSkgfHwgSGVybyBPZigKCQkJCQlFdmVudCBQbGF5ZXIpID09IEhlcm8oU2lnbWEpID8gMjUgOiAxMCkpOwoJCQlFbmQ7CgkJRWxzZTsKCQkJSWYoR2xvYmFsLk11dF9NdXRhdGlvbiAmJiBHbG9iYWwuTXV0X011dGF0aW9uIDwgVG90YWwgVGltZSBFbGFwc2VkICYmIFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkKCQkJCTw9IDE1ICYmICFFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MgJiYgIUlzIFRydWUgRm9yIEFueShBbGwgUGxheWVycyhUZWFtIDEpLCBDdXJyZW50IEFycmF5IEVsZW1lbnQuSXNfbXV0YXRlZCkpOwoJCQkJU3RhcnQgU2NhbGluZyBQbGF5ZXIoRXZlbnQgUGxheWVyLCAxLjMwMCwgRmFsc2UpOwoJCQkJU3RhcnQgTW9kaWZ5aW5nIEhlcm8gVm9pY2UgTGluZXMoRXZlbnQgUGxheWVyLCAwLjcwMCwgRmFsc2UpOwoJCQkJRXZlbnQgUGxheWVyLklzX211dGF0ZWQgPSBUcnVlOwoJCQkJU2V0IERhbWFnZSBSZWNlaXZlZChFdmVudCBQbGF5ZXIsIDQwKTsKCQkJCVNldCBIZWFsaW5nIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgNDApOwoJCQlFbHNlOwoJCQkJU2V0IERhbWFnZSBSZWNlaXZlZChFdmVudCBQbGF5ZXIsIEdsb2JhbC5HYW1lbW9kZSAmJiBFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MgPyAxMzAgOiAxMDApOwoJCQkJU2V0IEhlYWxpbmcgUmVjZWl2ZWQoRXZlbnQgUGxheWVyLCBHbG9iYWwuR2FtZW1vZGUgJiYgRXZlbnQgUGxheWVyLklzX0xpdmluZ19Cb3NzID8gMTMwIDogMTAwKTsKCQkJRW5kOwoJCUVuZDsKCQlJZihHbG9iYWwuR011dF9TdG9ybV9SYWdpbmcpOwoJCQlFdmVudCBQbGF5ZXIuR011dF9WYXIgPSBTbG90IE9mKEV2ZW50IFBsYXllcikgIT0gNiAmJiAhRXZlbnQgUGxheWVyLklzX0xpdmluZ19Cb3NzICYmIFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiA1MCAqIENvdW50IE9mKAoJCQkJRmlsdGVyZWQgQXJyYXkoQWxsIExpdmluZyBQbGF5ZXJzKFRlYW0gMSksIEN1cnJlbnQgQXJyYXkgRWxlbWVudC5HTXV0X1ZhcikpOwoJCUVuZDsKCQlXYWl0KDAuMTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMCAmJiBFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MpOwoJCQlTdGFydCBGb3JjaW5nIFBsYXllciBPdXRsaW5lcyhFdmVudCBQbGF5ZXIsIEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIFRydWUsIENvbG9yKFllbGxvdyksIERlZmF1bHQpOwoJCUVsc2UgSWYoU2xvdCBPZihFdmVudCBQbGF5ZXIpID09IDYpOwoJCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMSk7CgkJCQlTdGFydCBGb3JjaW5nIFBsYXllciBPdXRsaW5lcyhFdmVudCBQbGF5ZXIsIEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIFRydWUsIENvbG9yKFllbGxvdyksIERlZmF1bHQpOwoJCQlFbHNlIElmKEdsb2JhbC5HYW1lbW9kZSA9PSAyKTsKCQkJCVN0YXJ0IEZvcmNpbmcgUGxheWVyIE91dGxpbmVzKEV2ZW50IFBsYXllciwgQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgVHJ1ZSwgQ29sb3IoWWVsbG93KSwgQWx3YXlzKTsKCQkJRW5kOwoJCUVuZDsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDE6IFJlbW92ZSBTcGF3biBTcGVlZCBCb251cyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5IYXNfU3Bhd25fU3BlZWRfQm9udXMgPT0gVHJ1ZTsKCQkoCgkJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TIHx8ICFFdmVudCBQbGF5ZXIuVGFyZ2V0LklzX0NvbWJhdGFudCB8fCBFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsID49IFRvdGFsIFRpbWUgRWxhcHNlZCB8fCBHbG9iYWwuSXNfSW5mcmFzaWdodF9vbl9QbGF5ZXJzKQoJCQk9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSGFzX1NwYXduX1NwZWVkX0JvbnVzID0gRmFsc2U7CgkJU2V0IE1vdmUgU3BlZWQoRXZlbnQgUGxheWVyLCBHbG9iYWwuTXV0X0FtcGVkID8gMTE1IDogMTAwKTsKCX0KfQoKcnVsZSgiVGVhbSAxOiBFbmFibGUgQ29tYmF0IFBhdGhmaW5kaW5nIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX3VzaW5nX0NvbWJhdF9QYXRoZmluZGluZyA9PSBGYWxzZTsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Jc19hc3NhdWx0aW5nID09IFRydWU7CgkJSXMgT24gR3JvdW5kKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQkoWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLlRhcmdldCkpIC0gWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSkgPD0gMiB8fCBZIENvbXBvbmVudCBPZigKCQkJR2xvYmFsLk5vZGVzW0V2ZW50IFBsYXllci5UYXJnZXQuTmF2X0luZGV4XSkgLSBZIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpKSA8PSAxKSA9PSBUcnVlOwoJCShFdmVudCBQbGF5ZXIuSXNfUmFuZ2VkX0hlcm8gfHwgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpIDw9IDEgKyBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllci5UYXJnZXQsCgkJCUdsb2JhbC5Ob2Rlc1tFdmVudCBQbGF5ZXIuVGFyZ2V0Lk5hdl9JbmRleF0pKSA9PSBUcnVlOwoJCUlzIEluIExpbmUgb2YgU2lnaHQoRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllciksIEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIuVGFyZ2V0KSArIEdsb2JhbC5BaW1fT2Zmc2V0LCBCYXJyaWVycyBEbyBOb3QgQmxvY2sgTE9TKQoJCQk9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihJcyBUcnVlIEZvciBBbnkoR2xvYmFsLkVsZXZhdG9yX05vZGVzLCBEaXN0YW5jZSBCZXR3ZWVuKFZlY3RvcigxLCAwLCAxKSAqIEV2ZW50IFBsYXllciwgVmVjdG9yKDEsIDAsIDEpICogQ3VycmVudCBBcnJheSBFbGVtZW50KQoJCQk8IDEuNTAwKSk7CgkJCVdhaXQoMSwgSWdub3JlIENvbmRpdGlvbik7CgkJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlFbmQ7CgkJRXZlbnQgUGxheWVyLklzX3VzaW5nX0NvbWJhdF9QYXRoZmluZGluZyA9IFRydWU7CgkJRXZlbnQgUGxheWVyLlRhcmdldF9MYXN0X1Bvc19zZWVuID0gUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLlRhcmdldCk7CgkJRXZlbnQgUGxheWVyLk5hdl9pc19yZWFjaGFibGVfTm9kZSA9IEZhbHNlOwoJfQp9CgpydWxlKCJUZWFtIDE6IERpc2FibGUgQ29tYmF0IFBhdGhmaW5kaW5nIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX3VzaW5nX0NvbWJhdF9QYXRoZmluZGluZyA9PSBUcnVlOwoJCShFdmVudCBQbGF5ZXIuSXNfYXNzYXVsdGluZyAmJiBFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUykgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc191c2luZ19Db21iYXRfUGF0aGZpbmRpbmcgPSBGYWxzZTsKCX0KfQoKcnVsZSgiVGVhbSAxOiBTZXQgTmF2IChOb3QgaW4gQ29tYmF0KSwgR2V0IEJhY2sgdG8gTm9kZSwgU2V0IE5hdiBpcyBOb2RlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJSXMgQWxpdmUoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Jc191c2luZ19Db21iYXRfUGF0aGZpbmRpbmcgPT0gRmFsc2U7CgkJRXZlbnQgUGxheWVyLk5hdl9pc19yZWFjaGFibGVfTm9kZSA9PSBGYWxzZTsKCQlIZXJvIE9mKEV2ZW50IFBsYXllcikgIT0gSGVybyhXcmVja2luZyBCYWxsKTsKCX0KCglhY3Rpb25zCgl7CgkJSWYoIUV2ZW50IFBsYXllci5IYXNfU3Bhd25fU3BlZWRfQm9udXMgJiYgKEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKE1jQ3JlZSkgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oU29sZGllcjogNzYpCgkJCXx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKEJhcHRpc3RlKSkpOwoJCQlTZXQgTW92ZSBTcGVlZChFdmVudCBQbGF5ZXIsIEdsb2JhbC5NdXRfQW1wZWQgPyAxMTUgOiAxMDApOwoJCUVuZDsKCQlFdmVudCBQbGF5ZXIuTmF2ID0gRmlyc3QgT2YoU29ydGVkIEFycmF5KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Ob2RlcywgSXMgSW4gTGluZSBvZiBTaWdodChFdmVudCBQbGF5ZXIsIEN1cnJlbnQgQXJyYXkgRWxlbWVudCwKCQkJQmFycmllcnMgRG8gTm90IEJsb2NrIExPUykpLCBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgQ3VycmVudCBBcnJheSBFbGVtZW50KSkpOwoJCUlmKEV2ZW50IFBsYXllci5OYXYgPT0gMCk7CgkJCUV2ZW50IFBsYXllci5OYXYgPSBGaXJzdCBPZihTb3J0ZWQgQXJyYXkoR2xvYmFsLk5vZGVzLCBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgQ3VycmVudCBBcnJheSBFbGVtZW50KSkpOwoJCUVuZDsKCQlFdmVudCBQbGF5ZXIuTmF2X0luZGV4ID0gSW5kZXggT2YgQXJyYXkgVmFsdWUoR2xvYmFsLk5vZGVzLCBFdmVudCBQbGF5ZXIuTmF2KTsKCQlFdmVudCBQbGF5ZXIuTmF2X2lzX3JlYWNoYWJsZV9Ob2RlID0gVHJ1ZTsKCQlXYWl0KDAuNTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDE6IFNldCBOYXYgKE5vdCBpbiBDb21iYXQpLCBTZWxlY3QgTmV4dCBOb2RlLCBTZXQgTGFzdCBUaW1lIGF0IE5vZGUiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlJcyBBbGl2ZShFdmVudCBQbGF5ZXIpID09IFRydWU7CgkJRXZlbnQgUGxheWVyLklzX3VzaW5nX0NvbWJhdF9QYXRoZmluZGluZyA9PSBGYWxzZTsKCQlFdmVudCBQbGF5ZXIuTmF2X2lzX3JlYWNoYWJsZV9Ob2RlID09IFRydWU7CgkJRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5OYXYpIDw9IDE7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5MYXN0X1RpbWVfYXRfTm9kZSA9IFRvdGFsIFRpbWUgRWxhcHNlZDsKCQlJZihFdmVudCBQbGF5ZXIuVGFyZ2V0LklzX0NvbWJhdGFudCk7CgkJCUlmKEV2ZW50IFBsYXllci5UYXJnZXQuTGFzdF9OYXZfVXBkYXRlICsgR2xvYmFsLkNvbWJhdGFudHNfQ291bnQgKiAwLjQwMCA8IFRvdGFsIFRpbWUgRWxhcHNlZCk7CgkJCQlFdmVudCBQbGF5ZXIuVGFyZ2V0Lkxhc3RfTmF2X1VwZGF0ZSA9IFRvdGFsIFRpbWUgRWxhcHNlZDsKCQkJCUV2ZW50IFBsYXllci5UYXJnZXQuTmF2X0luZGV4ID0gSW5kZXggT2YgQXJyYXkgVmFsdWUoR2xvYmFsLk5vZGVzLCBGaXJzdCBPZihTb3J0ZWQgQXJyYXkoRmlsdGVyZWQgQXJyYXkoUmVtb3ZlIEZyb20gQXJyYXkoCgkJCQkJR2xvYmFsLk5vZGVzLCBHbG9iYWwuRWxldmF0b3JfTm9kZXMpLCBJcyBJbiBMaW5lIG9mIFNpZ2h0KEN1cnJlbnQgQXJyYXkgRWxlbWVudCArIFZlY3RvcigwLCAxLjUwMCwgMCksIEV5ZSBQb3NpdGlvbigKCQkJCQlFdmVudCBQbGF5ZXIuVGFyZ2V0KSArIEdsb2JhbC5BaW1fT2Zmc2V0LCBCYXJyaWVycyBEbyBOb3QgQmxvY2sgTE9TKSksIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLlRhcmdldCwKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQpICsgQWJzb2x1dGUgVmFsdWUoWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLlRhcmdldCkpIC0gWSBDb21wb25lbnQgT2YoCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50KSkpKSk7CgkJCQlJZihFdmVudCBQbGF5ZXIuVGFyZ2V0Lk5hdl9JbmRleCA9PSAtMSk7CgkJCQkJRXZlbnQgUGxheWVyLlRhcmdldC5OYXZfSW5kZXggPSBJbmRleCBPZiBBcnJheSBWYWx1ZShHbG9iYWwuTm9kZXMsIEZpcnN0IE9mKFNvcnRlZCBBcnJheShSZW1vdmUgRnJvbSBBcnJheShHbG9iYWwuTm9kZXMsCgkJCQkJCUdsb2JhbC5FbGV2YXRvcl9Ob2RlcyksIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLlRhcmdldCwgQ3VycmVudCBBcnJheSBFbGVtZW50KSkpKTsKCQkJCUVuZDsKCQkJRW5kOwoJCQlJZigKCQkJCUV2ZW50IFBsYXllci5OYXZfSW5kZXggPT0gRXZlbnQgUGxheWVyLlRhcmdldC5OYXZfSW5kZXggJiYgRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgJiYgRXZlbnQgUGxheWVyLkZlYXJlZF91bnRpbCA8IFRvdGFsIFRpbWUgRWxhcHNlZCk7CgkJCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA9IDU7CgkJCQlFdmVudCBQbGF5ZXIuSXNfdXNpbmdfQ29tYmF0X1BhdGhmaW5kaW5nID0gVHJ1ZTsKCQkJCUV2ZW50IFBsYXllci5UYXJnZXRfTGFzdF9Qb3Nfc2VlbiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllci5UYXJnZXQpOwoJCQkJRXZlbnQgUGxheWVyLk5hdl9pc19yZWFjaGFibGVfTm9kZSA9IEZhbHNlOwoJCQlFbHNlOwoJCQkJRXZlbnQgUGxheWVyLk5hdl9JbmRleCA9IEZpcnN0IE9mKFNvcnRlZCBBcnJheShHbG9iYWwuRWRnZXNbRXZlbnQgUGxheWVyLk5hdl9JbmRleF0sICgKCQkJCQlFdmVudCBQbGF5ZXIuSXNfYXNzYXVsdGluZyAmJiBFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsIDwgVG90YWwgVGltZSBFbGFwc2VkID8gMSA6IC0xKSAqIChSYW5kb20gUmVhbCgwLCAwLjUwMCkKCQkJCQkrIEluZGV4IE9mIEFycmF5IFZhbHVlKEdsb2JhbC5DaGFyX0FycmF5LCBTdHJpbmcgU2xpY2UoR2xvYmFsLkRpc3RhbmNlX01hdHJpeFtSb3VuZCBUbyBJbnRlZ2VyKCgKCQkJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQgKiBHbG9iYWwuTm9kZXNfQ291bnQgKyBFdmVudCBQbGF5ZXIuVGFyZ2V0Lk5hdl9JbmRleCkgLyAxMjgsIERvd24pXSwgKAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudCAqIEdsb2JhbC5Ob2Rlc19Db3VudCArIEV2ZW50IFBsYXllci5UYXJnZXQuTmF2X0luZGV4KSAlIDEyOCwgMSkpKSkpOwoJCQkJRXZlbnQgUGxheWVyLk5hdiA9IEdsb2JhbC5Ob2Rlc1tFdmVudCBQbGF5ZXIuTmF2X0luZGV4XTsKCQkJRW5kOwoJCUVsc2U7CgkJCUV2ZW50IFBsYXllci5OYXZfSW5kZXggPSBSYW5kb20gVmFsdWUgSW4gQXJyYXkoR2xvYmFsLkVkZ2VzW0V2ZW50IFBsYXllci5OYXZfSW5kZXhdKTsKCQkJRXZlbnQgUGxheWVyLk5hdiA9IEdsb2JhbC5Ob2Rlc1tFdmVudCBQbGF5ZXIuTmF2X0luZGV4XTsKCQlFbmQ7Cgl9Cn0KCnJ1bGUoIlRlYW0gMTogU2V0IE5hdiAoaW4gQ29tYmF0KSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUhlcm8gT2YoRXZlbnQgUGxheWVyKSAhPSBIZXJvKFdyZWNraW5nIEJhbGwpOwoJCSJOb3Qgd2hpbGUgRWNobyBpcyBsYW5kaW5nIgoJCShIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhFY2hvKSAmJiBFdmVudCBQbGF5ZXIuQWJfVmFyXzEpID09IEZhbHNlOwoJCUV2ZW50IFBsYXllci5Jc191c2luZ19Db21iYXRfUGF0aGZpbmRpbmcgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJSWYoSXMgSW4gTGluZSBvZiBTaWdodChFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyKSwgRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllci5UYXJnZXQpICsgR2xvYmFsLkFpbV9PZmZzZXQsCgkJCUJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpKTsKCQkJRXZlbnQgUGxheWVyLlRhcmdldF9MYXN0X1Bvc19zZWVuID0gUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLlRhcmdldCk7CgkJCUlmKEV2ZW50IFBsYXllci5Jc19mbHlpbmcpOwoJCQkJRXZlbnQgUGxheWVyLk5hdiA9IFJheSBDYXN0IEhpdCBQb3NpdGlvbihFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyLlRhcmdldCksIEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIuVGFyZ2V0KQoJCQkJCSsgMTIgKiBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBGYWNpbmcgQW5nbGUgT2YoRXZlbnQgUGxheWVyLlRhcmdldCkgKyAoUmFuZG9tIEludGVnZXIoMCwgMSkgPyAtNDUgOiA0NSksIC02MCksIE51bGwsCgkJCQkJTnVsbCwgRmFsc2UpOwoJCQkJV2FpdCgwLjUwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJCUVsc2UgSWYoRXZlbnQgUGxheWVyLlRhcmdldC5Jc19mbHlpbmcgJiYgSGVybyBPZihFdmVudCBQbGF5ZXIpICE9IEhlcm8oV2lkb3dtYWtlcikpOwoJCQkJQ2FsbCBTdWJyb3V0aW5lKFJvYW0pOwoJCQlFbHNlOwoJCQkJSWYoSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oTWNDcmVlKSB8fCBIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhTb2xkaWVyOiA3NikgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oQmFwdGlzdGUpKTsKCQkJCQlJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gKEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKEJhcHRpc3RlKSA/IDIwIDogMTUpKTsKCQkJCQkJRXZlbnQgUGxheWVyLk5hdiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcikgKyAyLjUwMCAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhSYW5kb20gSW50ZWdlcigtMTc5LCAxODApLCAwKTsKCQkJCQlFbHNlOwoJCQkJCQlFdmVudCBQbGF5ZXIuTmF2ID0gUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSArIDIuNTAwICogRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oRGlyZWN0aW9uIFRvd2FyZHMoCgkJCQkJCQlFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpKSArIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShBcnJheSgtNDUsIDAsIDQ1KSksIDApOwoJCQkJCUVuZDsKCQkJCQlDYWxsIFN1YnJvdXRpbmUoRmluZF9OV1BfbmVhcl9OYXYpOwoJCQkJRWxzZSBJZihIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhCcmlnaXR0ZSkgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oUmVpbmhhcmR0KSk7CgkJCQkJRXZlbnQgUGxheWVyLk5hdiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllci5UYXJnZXQpICsgMiAqIERpcmVjdGlvbiBUb3dhcmRzKEV2ZW50IFBsYXllci5UYXJnZXQsIEV2ZW50IFBsYXllcik7CgkJCQkJQ2FsbCBTdWJyb3V0aW5lKEZpbmRfTldQX25lYXJfTmF2KTsKCQkJCUVsc2UgSWYoSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oT3Jpc2EpKTsKCQkJCQlFdmVudCBQbGF5ZXIuTmF2ID0gUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSArIE1pbigxLjUwMCwgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpIC0gMikKCQkJCQkJKiBEaXJlY3Rpb24gVG93YXJkcyhFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpOwoJCQkJCUNhbGwgU3Vicm91dGluZShGaW5kX05XUF9uZWFyX05hdik7CgkJCQlFbHNlIElmKEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKFNvbWJyYSkgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oQmFzdGlvbikpOwoJCQkJCUV2ZW50IFBsYXllci5OYXYgPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KSArIDUgKiBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBGYWNpbmcgQW5nbGUgT2YoRXZlbnQgUGxheWVyLlRhcmdldCkKCQkJCQkJKyBSYW5kb20gVmFsdWUgSW4gQXJyYXkoQXJyYXkoLTQ1LCA0NSkpLCAwKTsKCQkJCQlDYWxsIFN1YnJvdXRpbmUoRmluZF9OV1BfbmVhcl9OYXYpOwoJCQkJRWxzZSBJZihIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhXaWRvd21ha2VyKSk7CgkJCQkJSWYoRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpIDw9IDEyKTsKCQkJCQkJRXZlbnQgUGxheWVyLk5hdiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcikgKyAzLjUwMCAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhIb3Jpem9udGFsIEFuZ2xlIEZyb20gRGlyZWN0aW9uKERpcmVjdGlvbiBUb3dhcmRzKAoJCQkJCQkJRXZlbnQgUGxheWVyLlRhcmdldCwgRXZlbnQgUGxheWVyKSksIDApOwoJCQkJCQlDYWxsIFN1YnJvdXRpbmUoRmluZF9OV1BfbmVhcl9OYXYpOwoJCQkJCUVsc2U7CgkJCQkJCUV2ZW50IFBsYXllci5OYXYgPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpOwoJCQkJCUVuZDsKCQkJCUVsc2UgSWYoSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oUm9hZGhvZykgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oUmVhcGVyKSk7CgkJCQkJRXZlbnQgUGxheWVyLk5hdiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllci5UYXJnZXQpICsgMyAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhIb3Jpem9udGFsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KSwKCQkJCQkJMCk7CgkJCQkJQ2FsbCBTdWJyb3V0aW5lKEZpbmRfTldQX25lYXJfTmF2KTsKCQkJCUVsc2UgSWYoSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oVHJhY2VyKSB8fCBIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhHZW5qaSkpOwoJCQkJCUV2ZW50IFBsYXllci5OYXYgPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KSArIDEuNTAwICogRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllci5UYXJnZXQpCgkJCQkJCSsgKEhvcml6b250YWwgQW5nbGUgVG93YXJkcyhFdmVudCBQbGF5ZXIuVGFyZ2V0LCBFdmVudCBQbGF5ZXIpID4gMCA/IDkwIDogLTkwKSwgMCk7CgkJCQkJQ2FsbCBTdWJyb3V0aW5lKEZpbmRfTldQX25lYXJfTmF2KTsKCQkJCUVsc2UgSWYoSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oRWNobykgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oU2lnbWEpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKEhhbnpvKSk7CgkJCQkJSWYoRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpIDw9IDE3KTsKCQkJCQkJRXZlbnQgUGxheWVyLk5hdiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcikgKyAzLjUwMCAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhSYW5kb20gSW50ZWdlcigtMTc5LCAxODApLCAwKTsKCQkJCQlFbHNlOwoJCQkJCQlFdmVudCBQbGF5ZXIuTmF2ID0gUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSArIDMuNTAwICogRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oRGlyZWN0aW9uIFRvd2FyZHMoCgkJCQkJCQlFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpKSArIFJhbmRvbSBWYWx1ZSBJbiBBcnJheShBcnJheSgtNDUsIDAsIDQ1KSksIDApOwoJCQkJCUVuZDsKCQkJCQlDYWxsIFN1YnJvdXRpbmUoRmluZF9OV1BfbmVhcl9OYXYpOwoJCQkJRW5kOwoJCQlFbmQ7CgkJCUlmKEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKE1jQ3JlZSkgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oU29sZGllcjogNzYpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKEJhcHRpc3RlKSk7CgkJCQlTZXQgTW92ZSBTcGVlZChFdmVudCBQbGF5ZXIsIEdsb2JhbC5NdXRfQW1wZWQgPyA4MC41MDAgOiA3MCk7CgkJCUVuZDsKCQkiR28gdG8gdGhlIGxhc3QgcG9zaXRpb24gd2hlcmUgdGhlIHRhcmdldCB3YXMgc2VlbiIKCQlFbHNlOwoJCQlJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgVmVjdG9yKFggQ29tcG9uZW50IE9mKEV2ZW50IFBsYXllci5UYXJnZXRfTGFzdF9Qb3Nfc2VlbiksIFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKAoJCQkJRXZlbnQgUGxheWVyKSksIFogQ29tcG9uZW50IE9mKEV2ZW50IFBsYXllci5UYXJnZXRfTGFzdF9Qb3Nfc2VlbikpKSA8IDAuNTAwKTsKCQkJCUV2ZW50IFBsYXllci5UYXJnZXRfTGFzdF9Qb3Nfc2VlbiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllci5UYXJnZXQpOwoJCQlFbmQ7CgkJCUlmKEV2ZW50IFBsYXllci5Jc19mbHlpbmcpOwoJCQkJRXZlbnQgUGxheWVyLk5hdiA9IEV2ZW50IFBsYXllci5UYXJnZXRfTGFzdF9Qb3Nfc2VlbjsKCQkJRWxzZTsKCQkJCUV2ZW50IFBsYXllci5OYXYgPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpICsgTWluKDMuNTAwLCBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldF9MYXN0X1Bvc19zZWVuKSkKCQkJCQkqIERpcmVjdGlvbiBUb3dhcmRzKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldF9MYXN0X1Bvc19zZWVuKTsKCQkJCUNhbGwgU3Vicm91dGluZShGaW5kX05XUF9uZWFyX05hdik7CgkJCUVuZDsKCQkJSWYoSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oTWNDcmVlKSB8fCBIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhTb2xkaWVyOiA3NikgfHwgSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oQmFwdGlzdGUpKTsKCQkJCVNldCBNb3ZlIFNwZWVkKEV2ZW50IFBsYXllciwgR2xvYmFsLk11dF9BbXBlZCA/IDExNSA6IDEwMCk7CgkJCUVuZDsKCQlFbmQ7CgkJV2FpdCgwLjUwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxOiBGaW5kIFRhcmdldCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsIDwgVG90YWwgVGltZSBFbGFwc2VkOwoJCUhlcm8gT2YoRXZlbnQgUGxheWVyKSAhPSBIZXJvKFdyZWNraW5nIEJhbGwpOwoJCUV2ZW50IFBsYXllci5Jc19XcmFpdGggPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCUdsb2JhbC5UZW1wID0gRmlyc3QgT2YoU29ydGVkIEFycmF5KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Db21iYXRhbnRzLAoJCQkhQ3VycmVudCBBcnJheSBFbGVtZW50LkRvd25lZF9zaW5jZSAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuSXNfaW52aXNpYmxlIDw9IChEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50KSA8PSAyLjQwMCB8fCBHbG9iYWwuSXNfSW5mcmFzaWdodF9vbl9Cb3RzKSAmJiBJcyBJbiBMaW5lIG9mIFNpZ2h0KEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIpLAoJCQlFeWUgUG9zaXRpb24oQ3VycmVudCBBcnJheSBFbGVtZW50KSArIEdsb2JhbC5BaW1fT2Zmc2V0LCBCYXJyaWVycyBEbyBOb3QgQmxvY2sgTE9TKSksIEFycmF5KDEsIDAuMjUwLCAyLCA0KQoJCQlbQ3VycmVudCBBcnJheSBFbGVtZW50LkFiX1ByaW9yaXR5XSAqIChDdXJyZW50IEFycmF5IEVsZW1lbnQgPT0gRXZlbnQgUGxheWVyLlRhcmdldCA/IDAuMjUwIDogMSkgKiBEaXN0YW5jZSBCZXR3ZWVuKAoJCQlFdmVudCBQbGF5ZXIsIEN1cnJlbnQgQXJyYXkgRWxlbWVudCkgKyAoIUV2ZW50IFBsYXllci5Jc19SYW5nZWRfSGVybyAmJiBDdXJyZW50IEFycmF5IEVsZW1lbnQuSXNfZmx5aW5nID8gMTAwMCA6IDApICsgKAoJCQlIYXMgU3RhdHVzKEN1cnJlbnQgQXJyYXkgRWxlbWVudCwgSW52aW5jaWJsZSkgfHwgSGFzIFN0YXR1cyhDdXJyZW50IEFycmF5IEVsZW1lbnQsIFBoYXNlZCBPdXQpID8gMjAwMCA6IDApKSk7CgkJSWYoR2xvYmFsLlRlbXAgPT0gMCk7CgkJCUlmKEV2ZW50IFBsYXllci5UYXJnZXQuRG93bmVkX3NpbmNlIHx8ICFFdmVudCBQbGF5ZXIuVGFyZ2V0LklzX0NvbWJhdGFudCB8fCBFdmVudCBQbGF5ZXIuVGFyZ2V0LklzX2ludmlzaWJsZSA+IChEaXN0YW5jZSBCZXR3ZWVuKAoJCQkJRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA8PSAyLjQwMCB8fCBHbG9iYWwuSXNfSW5mcmFzaWdodF9vbl9Cb3RzKSk7CgkJCQlDYWxsIFN1YnJvdXRpbmUoRmluZF9DaGFzZV9UYXJnZXQpOwoJCQkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPSAwOwoJCQlFbHNlIElmKEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TKTsKCQkJCUlmKCFFdmVudCBQbGF5ZXIuSXNfZmx5aW5nICYmIFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllci5UYXJnZXQpKSAtIFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcikpID4gMik7CgkJCQkJRXZlbnQgUGxheWVyLklzX3VzaW5nX0NvbWJhdF9QYXRoZmluZGluZyA9IEZhbHNlOwoJCQkJRW5kOwoJCQkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgLT0gMTsKCQkJRW5kOwoJCQlJZighRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgJiYgQW1tbyhFdmVudCBQbGF5ZXIsIDApIDwgMC41MDAgKiBNYXggQW1tbyhFdmVudCBQbGF5ZXIsIDApKTsKCQkJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihSZWxvYWQpKTsKCQkJRW5kOwoJCUVsc2U7CgkJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID0gNTsKCQkJRXZlbnQgUGxheWVyLlRhcmdldCA9IEdsb2JhbC5UZW1wOwoJCQlFdmVudCBQbGF5ZXIuVGFyZ2V0X0xhc3RfUG9zX3NlZW4gPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KTsKCQlFbmQ7CgkJV2FpdChFdmVudCBQbGF5ZXIuSGFzX1NwYXduX1NwZWVkX0JvbnVzID8gMC4yNTAgOiAwLjUwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxOiBJbXByb3ZlIEFpciBNb3ZlbWVudCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlJcyBJbiBBaXIoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Jc191c2luZ19Db21iYXRfUGF0aGZpbmRpbmcgPT0gRmFsc2U7CgkJRXZlbnQgUGxheWVyLkxhc3RfS25vY2tiYWNrX3JlY2VpdmVkICsgMyA8IFRvdGFsIFRpbWUgRWxhcHNlZDsKCQlIb3Jpem9udGFsIFNwZWVkIE9mKEV2ZW50IFBsYXllcikgPj0gNTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgVmVjdG9yKFggQ29tcG9uZW50IE9mKEV2ZW50IFBsYXllci5OYXYpLCBZIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpKSwgWiBDb21wb25lbnQgT2YoCgkJCUV2ZW50IFBsYXllci5OYXYpKSkgPD0gMjsKCQlBYnNvbHV0ZSBWYWx1ZShBbmdsZSBEaWZmZXJlbmNlKEhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oVmVjdG9yIFRvd2FyZHMoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuTmF2KSksCgkJCUhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oVmVsb2NpdHkgT2YoRXZlbnQgUGxheWVyKSkpKSA+PSA5MDsKCX0KCglhY3Rpb25zCgl7CgkJQXBwbHkgSW1wdWxzZShFdmVudCBQbGF5ZXIsIC0xICogRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oVmVsb2NpdHkgT2YoRXZlbnQgUGxheWVyKSksIDApLCAwLjAwMSwKCQkJVG8gV29ybGQsIENhbmNlbCBDb250cmFyeSBNb3Rpb24gWFlaKTsKCX0KfQoKcnVsZSgiVGVhbSAxOiBDYWxjdWxhdGUgUHJpbWFyeSBTcGVlZCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLlBvc18xID0gUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKTsKCQlJZihJcyBKdW1waW5nKEV2ZW50IFBsYXllcikpOwoJCQlFdmVudCBQbGF5ZXIuTGFzdF9KdW1wID0gVG90YWwgVGltZSBFbGFwc2VkOwoJCUVuZDsKCQlJZihFdmVudCBQbGF5ZXIuTGFzdF9KdW1wICsgMC4xNTAgPj0gVG90YWwgVGltZSBFbGFwc2VkKTsKCQkJRXZlbnQgUGxheWVyLlByaW1hcnlfU3BlZWQgPSBEaXN0YW5jZSBCZXR3ZWVuKFZlY3RvcihYIENvbXBvbmVudCBPZihFdmVudCBQbGF5ZXIuUG9zXzEpLCBZIENvbXBvbmVudCBPZihFdmVudCBQbGF5ZXIuUG9zXzIpLAoJCQkJWiBDb21wb25lbnQgT2YoRXZlbnQgUGxheWVyLlBvc18xKSksIEV2ZW50IFBsYXllci5Qb3NfMikgLyAwLjExMjsKCQlFbHNlOwoJCQlFdmVudCBQbGF5ZXIuUHJpbWFyeV9TcGVlZCA9IERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLlBvc18xLCBFdmVudCBQbGF5ZXIuUG9zXzIpIC8gMC4xMTI7CgkJRW5kOwoJCVdhaXQoMC4xMTIsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUV2ZW50IFBsYXllci5Qb3NfMiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcik7CgkJSWYoSXMgSnVtcGluZyhFdmVudCBQbGF5ZXIpKTsKCQkJRXZlbnQgUGxheWVyLkxhc3RfSnVtcCA9IFRvdGFsIFRpbWUgRWxhcHNlZDsKCQlFbmQ7CgkJSWYoRXZlbnQgUGxheWVyLkxhc3RfSnVtcCArIDAuMTUwID49IFRvdGFsIFRpbWUgRWxhcHNlZCk7CgkJCUV2ZW50IFBsYXllci5QcmltYXJ5X1NwZWVkID0gRGlzdGFuY2UgQmV0d2VlbihWZWN0b3IoWCBDb21wb25lbnQgT2YoRXZlbnQgUGxheWVyLlBvc18xKSwgWSBDb21wb25lbnQgT2YoRXZlbnQgUGxheWVyLlBvc18yKSwKCQkJCVogQ29tcG9uZW50IE9mKEV2ZW50IFBsYXllci5Qb3NfMSkpLCBFdmVudCBQbGF5ZXIuUG9zXzIpIC8gMC4xMTI7CgkJRWxzZTsKCQkJRXZlbnQgUGxheWVyLlByaW1hcnlfU3BlZWQgPSBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllci5Qb3NfMSwgRXZlbnQgUGxheWVyLlBvc18yKSAvIDAuMTEyOwoJCUVuZDsKCQlXYWl0KDAuMTEyLCBBYm9ydCBXaGVuIEZhbHNlKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDE6IEJvdCBpcyBzdHVjayIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuUHJpbWFyeV9TcGVlZCA8PSAxLjUwMDsKCQlIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgUm9vdGVkKSA9PSBGYWxzZTsKCQlIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgU3R1bm5lZCkgPT0gRmFsc2U7CgkJSGVybyBPZihFdmVudCBQbGF5ZXIpICE9IEhlcm8oV3JlY2tpbmcgQmFsbCk7CgkJKEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKFJlaW5oYXJkdCkgJiYgSXMgVXNpbmcgVWx0aW1hdGUoRXZlbnQgUGxheWVyKSkgPT0gRmFsc2U7CgkJRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIFZlY3RvcihYIENvbXBvbmVudCBPZihFdmVudCBQbGF5ZXIuTmF2KSwgWSBDb21wb25lbnQgT2YoCgkJCUV2ZW50IFBsYXllci5Jc191c2luZ19Db21iYXRfUGF0aGZpbmRpbmcgPyBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpIDogRXZlbnQgUGxheWVyLk5hdiksIFogQ29tcG9uZW50IE9mKEV2ZW50IFBsYXllci5OYXYpKSkKCQkJPj0gMC41MDA7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMC41MDAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUlmKElzIFRydWUgRm9yIEFueShHbG9iYWwuRWxldmF0b3JfTm9kZXMsIERpc3RhbmNlIEJldHdlZW4oVmVjdG9yKDEsIDAsIDEpICogRXZlbnQgUGxheWVyLCBWZWN0b3IoMSwgMCwgMSkgKiBDdXJyZW50IEFycmF5IEVsZW1lbnQpCgkJCTwgMS41MDApKTsKCQkJV2FpdCgxLjUwMCwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJRW5kOwoJCUlmKEV2ZW50IFBsYXllci5Jc191c2luZ19Db21iYXRfUGF0aGZpbmRpbmcpOwoJCQlJZihBYnNvbHV0ZSBWYWx1ZShIb3Jpem9udGFsIEFuZ2xlIEZyb20gRGlyZWN0aW9uKFRocm90dGxlIE9mKEV2ZW50IFBsYXllcikpKSA8PSA0NSk7CgkJCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oSnVtcCkpOwoJCQlFbmQ7CgkJRWxzZTsKCQkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEp1bXApKTsKCQkJSWYoIShFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyB8fCBFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsID49IFRvdGFsIFRpbWUgRWxhcHNlZCkpOwoJCQkJRGlzYWJsZSBNb3ZlbWVudCBDb2xsaXNpb24gV2l0aCBQbGF5ZXJzKEV2ZW50IFBsYXllcik7CgkJCQlXYWl0KDAuNTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQkJCUVuYWJsZSBNb3ZlbWVudCBDb2xsaXNpb24gV2l0aCBQbGF5ZXJzKEV2ZW50IFBsYXllcik7CgkJCUVuZDsKCQkJV2FpdCgwLjUwMCwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJCUV2ZW50IFBsYXllci5OYXZfaXNfcmVhY2hhYmxlX05vZGUgPSBGYWxzZTsKCQlFbmQ7CgkJV2FpdCgwLjUwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxOiBUZWxlcG9ydCBpZiBUYXJnZXQgbm90IGluIExPUyBhbmQgaGFzbid0IHJlYWNoZWQgTm9kZSBmb3IgOCBzZWNvbmRzIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJSXMgQWxpdmUoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBSb290ZWQpID09IEZhbHNlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSA9PSBGYWxzZTsKCQlFdmVudCBQbGF5ZXIuSXNfV3JhaXRoID09IEZhbHNlOwoJCUV2ZW50IFBsYXllci5GZWFyZWRfdW50aWwgPCBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPT0gRmFsc2U7CgkJRXZlbnQgUGxheWVyLkxhc3RfVGltZV9hdF9Ob2RlIDwgVG90YWwgVGltZSBFbGFwc2VkOwoJCUhlcm8gT2YoRXZlbnQgUGxheWVyKSAhPSBIZXJvKFdyZWNraW5nIEJhbGwpOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDgsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUNhbGwgU3Vicm91dGluZShUZWxlcG9ydF90b19mcmVlX1NwYXduKTsKCQlXYWl0KDgsIEFib3J0IFdoZW4gRmFsc2UpOwoJCVRlbGVwb3J0KEV2ZW50IFBsYXllciwgMTAwMCAqIERvd24pOwoJfQp9CgpydWxlKCJUZWFtIDE6IEJvdCB0b29rIGRhbWFnZSIpCnsKCWV2ZW50Cgl7CgkJUGxheWVyIFRvb2sgRGFtYWdlOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BbGxvd19GbGluY2ggPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSXNfdXNpbmdfQ29tYmF0X1BhdGhmaW5kaW5nID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKFdpZG93bWFrZXIpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKFNpZ21hKSk7CgkJCUV2ZW50IFBsYXllci5OYXYgPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpIC0gMy41MDAgKiBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihWZWN0b3IgVG93YXJkcygKCQkJCUV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkpICsgUmFuZG9tIEludGVnZXIoLTkwLCA5MCksIDApOwoJCUVsc2U7CgkJCUV2ZW50IFBsYXllci5OYXYgPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpICsgMy41MDAgKiBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihWZWN0b3IgVG93YXJkcygKCQkJCUV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkpICsgUmFuZG9tIEludGVnZXIoLTkwLCA5MCksIDApOwoJCUVuZDsKCQlDYWxsIFN1YnJvdXRpbmUoRmluZF9OV1BfbmVhcl9OYXYpOwoJCVdhaXQoMC41MDAsIElnbm9yZSBDb25kaXRpb24pOwoJfQp9CgpydWxlKCJUZWFtIDE6IEJvdCByZWNlaXZlZCBLbm9ja2JhY2siKQp7CglldmVudAoJewoJCVBsYXllciBSZWNlaXZlZCBLbm9ja2JhY2s7CgkJVGVhbSAxOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJVGVhbSBPZihBdHRhY2tlcikgPT0gVGVhbSAyOwoJfQoKCWFjdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuTGFzdF9Lbm9ja2JhY2tfcmVjZWl2ZWQgPSBUb3RhbCBUaW1lIEVsYXBzZWQ7Cgl9Cn0KCnJ1bGUoIlRlYW0gMTogSXMgSGFja2VkLCBBcHBseSBGZWFyIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIEhhY2tlZCkgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsIC0gMC4yNTAgPCBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJSGVybyBPZihFdmVudCBQbGF5ZXIpICE9IEhlcm8oV3JlY2tpbmcgQmFsbCk7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5GZWFyZWRfdW50aWwgPSBUb3RhbCBUaW1lIEVsYXBzZWQgKyAwLjI1MDsKCQlXYWl0KDAuMjAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDE6IFF1aWNrIE1lbGVlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkNhbl9RdWlja19NZWxlZSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJSXMgUmVsb2FkaW5nKEV2ZW50IFBsYXllcikgPT0gRmFsc2U7CgkJSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFN0dW5uZWQpID09IEZhbHNlOwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA8PSAyLjUwMDsKCX0KCglhY3Rpb25zCgl7CgkJSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA8PSAyMCk7CgkJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihNZWxlZSkpOwoJCQlXYWl0KDUsIElnbm9yZSBDb25kaXRpb24pOwoJCUVsc2U7CgkJCVdhaXQoMSwgSWdub3JlIENvbmRpdGlvbik7CgkJRW5kOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMTogQ2FsbCBJbmNvbWluZyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUdsb2JhbC5DYWxsZWRfSW5jb21pbmcgPT0gRmFsc2U7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLkNhbGxlZF9JbmNvbWluZyA9IFRydWU7CgkJV2FpdCgwLjQwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJQ29tbXVuaWNhdGUoRXZlbnQgUGxheWVyLlRhcmdldCwgSW5jb21pbmcpOwoJfQp9CgpydWxlKCJUZWFtIDE6IEJvdCBpcyBmZWFyZWQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsID49IFRvdGFsIFRpbWUgRWxhcHNlZDsKCQlJcyBBbGl2ZShFdmVudCBQbGF5ZXIpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID0gMDsKCQlDYW5jZWwgUHJpbWFyeSBBY3Rpb24oRXZlbnQgUGxheWVyKTsKCQlJZihTbG90IE9mKEV2ZW50IFBsYXllcikgPT0gNiAmJiBHbG9iYWwuR2FtZW1vZGUgPT0gMik7CgkJCVN0YXJ0IEZvcmNpbmcgUGxheWVyIE91dGxpbmVzKEV2ZW50IFBsYXllciwgQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgVHJ1ZSwgQ29sb3IoUHVycGxlKSwgQWx3YXlzKTsKCQlFbHNlOwoJCQlTdGFydCBGb3JjaW5nIFBsYXllciBPdXRsaW5lcyhFdmVudCBQbGF5ZXIsIEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIFRydWUsIENvbG9yKFB1cnBsZSksIERlZmF1bHQpOwoJCUVuZDsKCQlXYWl0IFVudGlsKCEoRXZlbnQgUGxheWVyLkZlYXJlZF91bnRpbCA+PSBUb3RhbCBUaW1lIEVsYXBzZWQgJiYgSXMgQWxpdmUoRXZlbnQgUGxheWVyKSksIDk5OTk5KTsKCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMCAmJiBFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MpOwoJCQlTdGFydCBGb3JjaW5nIFBsYXllciBPdXRsaW5lcyhFdmVudCBQbGF5ZXIsIEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIFRydWUsIENvbG9yKFllbGxvdyksIERlZmF1bHQpOwoJCUVsc2UgSWYoU2xvdCBPZihFdmVudCBQbGF5ZXIpID09IDYpOwoJCQlJZihHbG9iYWwuR2FtZW1vZGUgPT0gMSk7CgkJCQlTdGFydCBGb3JjaW5nIFBsYXllciBPdXRsaW5lcyhFdmVudCBQbGF5ZXIsIEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIFRydWUsIENvbG9yKFllbGxvdyksIERlZmF1bHQpOwoJCQlFbHNlIElmKEdsb2JhbC5HYW1lbW9kZSA9PSAyKTsKCQkJCVN0YXJ0IEZvcmNpbmcgUGxheWVyIE91dGxpbmVzKEV2ZW50IFBsYXllciwgQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgVHJ1ZSwgQ29sb3IoWWVsbG93KSwgQWx3YXlzKTsKCQkJRW5kOwoJCUVsc2U7CgkJCVN0b3AgRm9yY2luZyBQbGF5ZXIgT3V0bGluZXMoRXZlbnQgUGxheWVyLCBBbGwgUGxheWVycyhBbGwgVGVhbXMpKTsKCQlFbmQ7Cgl9Cn0KCnJ1bGUoIk1VVCBUZWFtIDEgKEdhbWVjaGFuZ2luZyBNdXRhdG9yKTogQ2xvc2UgUXVhcnRlcnMiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuR011dF9DbG9zZV9RdWFydGVycyA9PSBUcnVlOwoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlIZXJvIE9mKEV2ZW50IFBsYXllcikgIT0gSGVybyhXcmVja2luZyBCYWxsKTsKCX0KCglhY3Rpb25zCgl7CgkJSWYoSXMgVHJ1ZSBGb3IgQW55KFBsYXllcnMgV2l0aGluIFJhZGl1cyhFdmVudCBQbGF5ZXIsIDUsIFRlYW0gMiwgT2ZmKSwgQ3VycmVudCBBcnJheSBFbGVtZW50LklzX0NvbWJhdGFudCkpOwoJCQlFdmVudCBQbGF5ZXIuR011dF9WYXIgPSBGYWxzZTsKCQlFbHNlOwoJCQlJZihIZXJvIE9mKEV2ZW50IFBsYXllcikgIT0gSGVybyhCYXN0aW9uKSB8fCBJcyBVc2luZyBVbHRpbWF0ZShFdmVudCBQbGF5ZXIpKTsKCQkJCVNldCBTdGF0dXMoRXZlbnQgUGxheWVyLCBOdWxsLCBVbmtpbGxhYmxlLCAwLjI1MCk7CgkJCUVuZDsKCQkJRXZlbnQgUGxheWVyLkdNdXRfVmFyID0gVHJ1ZTsKCQlFbmQ7CgkJV2FpdCgwLjI1MCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuR011dF9WYXIgPSBGYWxzZTsKCX0KfQoKcnVsZSgiTVVUIFRlYW0gMSAoR2FtZWNoYW5naW5nIE11dGF0b3IpOiBGb3J0aWZpZWQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuR011dF9Gb3J0aWZpZWQgPT0gVHJ1ZTsKCQlIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgU3R1bm5lZCkgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuUGVya19QdW1waW5nX0lyb24gPCBUb3RhbCBUaW1lIEVsYXBzZWQ7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBGcm96ZW4pKTsKCQkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgRnJvemVuKTsKCQlFbHNlOwoJCQlJZihIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgS25vY2tlZCBEb3duKSB8fCBIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgQXNsZWVwKSk7CgkJCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgU3R1bm5lZCwgMyk7CgkJCQlXYWl0IFVudGlsKCEoSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIEtub2NrZWQgRG93bikgfHwgSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIEFzbGVlcCkpLCAwLjA1MCk7CgkJCUVuZDsKCQkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgU3R1bm5lZCk7CgkJRW5kOwoJCVdhaXQoMC4yNTAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIk1VVCBUZWFtIDEgKEdhbWVjaGFuZ2luZyBNdXRhdG9yKTogS2VlcCB5b3VyIERpc3RhbmNlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLkdNdXRfS2VlcF95b3VyX0Rpc3RhbmNlID09IFRydWU7CgkJSXMgQWxpdmUoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJCUhlcm8gT2YoRXZlbnQgUGxheWVyKSAhPSBIZXJvKFdyZWNraW5nIEJhbGwpOwoJfQoKCWFjdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuR011dF9WYXIgPSBQbGF5ZXJzIFdpdGhpbiBSYWRpdXMoRXZlbnQgUGxheWVyLCA4LCBUZWFtIDIsIE9mZik7CgkJV2FpdCgwLjI1MCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuR011dF9WYXIgPSBFbXB0eSBBcnJheTsKCX0KfQoKcnVsZSgiTVVUIFRlYW0gMSAoR2FtZWNoYW5naW5nIE11dGF0b3IpOiBTdG9ybSBSYWdpbmcsIFNldCAvIENsZWFyIEJ1cm5pbmciKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuR011dF9TdG9ybV9SYWdpbmcgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuR011dF9WYXIgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJUGxheSBFZmZlY3QoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgR29vZCBQaWNrdXAgRWZmZWN0LCBDb2xvcihSZWQpLCBFdmVudCBQbGF5ZXIsIDEpOwoJCVNldCBTdGF0dXMoRXZlbnQgUGxheWVyLCBOdWxsLCBCdXJuaW5nLCA5OTk5KTsKCQlXYWl0IFVudGlsKCFFdmVudCBQbGF5ZXIuR011dF9WYXIsIDk5OTk5KTsKCQlDbGVhciBTdGF0dXMoRXZlbnQgUGxheWVyLCBCdXJuaW5nKTsKCX0KfQoKcnVsZSgiTVVUIEdsb2JhbCAoTXV0YXRvcik6IFJlZ2VuZXJhdGlvbiIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEdsb2JhbDsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLk11dF9SZWdlbmVyYXRpb24gPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJSGVhbChBbGwgTGl2aW5nIFBsYXllcnMoVGVhbSAxKSwgTnVsbCwgNSAqICgwLjIwMCArIDAuMjAwICogR2xvYmFsLkNvbWJhdGFudHNfQ291bnQpKTsKCQlXYWl0KDAuNTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgKEFiaWxpdHkpOiBIZWF2eSBJbXBhY3QiKQp7CglldmVudAoJewoJCVBsYXllciBUb29rIERhbWFnZTsKCQlUZWFtIDE7CgkJQWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlBdHRhY2tlci5BYl9IZWF2eV9JbXBhY3QgPT0gVHJ1ZTsKCQlIZXJvIE9mKEV2ZW50IFBsYXllcikgIT0gSGVybyhXcmVja2luZyBCYWxsKTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoUmFuZG9tIFJlYWwoLTAuMDIwLCAxKSA+IEV2ZW50IERhbWFnZSAvIE1heCBIZWFsdGgoRXZlbnQgUGxheWVyKSk7CgkJRXZlbnQgUGxheWVyLlBlcmtfUHVtcGluZ19Jcm9uID0gTWF4KFRvdGFsIFRpbWUgRWxhcHNlZCArIChHbG9iYWwuR011dF9Gb3J0aWZpZWQgfHwgRXZlbnQgUGxheWVyLklzX0xpdmluZ19Cb3NzID8gMC41MDAgOiAxKQoJCQkqIEF0dGFja2VyLkFiX0hlYXZ5X0ltcGFjdCwgRXZlbnQgUGxheWVyLlBlcmtfUHVtcGluZ19Jcm9uKTsKCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgQXR0YWNrZXIsIFN0dW5uZWQsIChHbG9iYWwuR011dF9Gb3J0aWZpZWQgfHwgRXZlbnQgUGxheWVyLklzX0xpdmluZ19Cb3NzID8gMC41MDAgOiAxKQoJCQkqIEF0dGFja2VyLkFiX0hlYXZ5X0ltcGFjdCk7CgkJV2FpdCg1LCBJZ25vcmUgQ29uZGl0aW9uKTsKCX0KfQoKcnVsZSgiVGVhbSAxIChBYmlsaXR5KTogUHJpb3JpdHkgQiIpCnsKCWV2ZW50Cgl7CgkJUGxheWVyIFRvb2sgRGFtYWdlOwoJCVRlYW0gMTsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUF0dGFja2VyLkFiX1ByaW9yaXR5ID09IDI7CgkJKEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TICYmIEV2ZW50IFBsYXllci5UYXJnZXQgPT0gQXR0YWNrZXIpID09IEZhbHNlOwoJCUhlcm8gT2YoRXZlbnQgUGxheWVyKSAhPSBIZXJvKFdyZWNraW5nIEJhbGwpOwoJfQoKCWFjdGlvbnMKCXsKCQlBYm9ydCBJZihSYW5kb20gUmVhbCgtMC4wMjAsIDEpID4gRXZlbnQgRGFtYWdlIC8gTWF4IEhlYWx0aChFdmVudCBQbGF5ZXIpKTsKCQlFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsID0gVG90YWwgVGltZSBFbGFwc2VkICsgKEV2ZW50IFBsYXllci5Jc19MaXZpbmdfQm9zcyA/IDIuNTAwIDogNSk7CgkJV2FpdCgxMCwgSWdub3JlIENvbmRpdGlvbik7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBCcmlnaXR0ZTogSG9sZCAvIERyb3AgU2hpZWxkIGlmIFRhcmdldCBhbmQgRGlzdGFuY2UgdG8gVGFyZ2V0ID49IDZtIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUJyaWdpdHRlOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA9PSBUcnVlOwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+PSA2OwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkpOwoJCVdhaXQgVW50aWwoIShFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyAmJiBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gNiksIDk5OTk5KTsKCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFNlY29uZGFyeSBGaXJlKSk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBCcmlnaXR0ZTogU3RhcnQgLyBTdG9wIEF0dGFja2luZyBpZiBEaXN0YW5jZSB0byBUYXJnZXQgPCA2bSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlCcmlnaXR0ZTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPT0gVHJ1ZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPCA2OwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQlXYWl0IFVudGlsKCEoRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgJiYgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpIDwgNiksIDk5OTk5KTsKCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJfQp9CgpydWxlKCJUZWFtIDEgQnJpZ2l0dGU6IEluY3JlYXNlIC8gTm9ybWFsaXplIE1vdmUgU3BlZWQgd2hpbGUgaG9sZGluZyBTaGllbGQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQnJpZ2l0dGU7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEZpcmluZyBTZWNvbmRhcnkoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5IYXNfU3Bhd25fU3BlZWRfQm9udXMgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVNldCBNb3ZlIFNwZWVkKEV2ZW50IFBsYXllciwgR2xvYmFsLk11dF9BbXBlZCA/IDE2NC4yODYgOiAxNDIuODU3KTsKCQlXYWl0IFVudGlsKCFJcyBGaXJpbmcgU2Vjb25kYXJ5KEV2ZW50IFBsYXllciksIDk5OTk5KTsKCQlTZXQgTW92ZSBTcGVlZChFdmVudCBQbGF5ZXIsIEdsb2JhbC5NdXRfQW1wZWQgPyAxMTUgOiAxMDApOwoJfQp9CgpydWxlKCJUZWFtIDEgQnJpZ2l0dGU6IFdoaXAgU2hvdCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlCcmlnaXR0ZTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPj0gNDsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgyLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlBYm9ydCBJZiBDb25kaXRpb24gSXMgRmFsc2U7CgkJTG9vcCBJZihSYW5kb20gSW50ZWdlcigxLCAxMDApID4gKEV2ZW50IFBsYXllci5UYXJnZXQuSXNfZmx5aW5nID8gMTAwIDogNTApKTsKCQlMb29wIElmKERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA8PSA2IHx8IERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+PSAyMCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMSkpOwoJCVdhaXQoMywgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIE1jQ3JlZTogU2hvb3QiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJTWNDcmVlOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJCUFic29sdXRlIFZhbHVlKEhvcml6b250YWwgQW5nbGUgVG93YXJkcyhFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpKSA8PSA1OwoJfQoKCWFjdGlvbnMKCXsKCQlJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPiA1KTsKCQkJU3RhcnQgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJCVdhaXQoUmFuZG9tIFJlYWwoMC40MDAsIDAuNjAwKSwgSWdub3JlIENvbmRpdGlvbik7CgkJCVN0b3AgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJRWxzZTsKCQkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFNlY29uZGFyeSBGaXJlKSk7CgkJRW5kOwoJCVdhaXQoUmFuZG9tIFJlYWwoMC44MDAsIDEuMjAwKSwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIE1jQ3JlZTogQ29tYmF0IFJvbGwiKQp7CglldmVudAoJewoJCVBsYXllciBUb29rIERhbWFnZTsKCQlUZWFtIDE7CgkJTWNDcmVlOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfdXNpbmdfQ29tYmF0X1BhdGhmaW5kaW5nID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCUFib3J0IElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiAzMCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMSkpOwoJCVdhaXQoMTAsIElnbm9yZSBDb25kaXRpb24pOwoJfQp9CgpydWxlKCJNVVQgVGVhbSAxIChNdXRhdG9yKSBNY0NyZWU6IEV4dGVuZGVkLCBGbGFzaGJhbmciKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJTWNDcmVlOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuTXV0X0V4dGVuZGVkX0Fyc2VuYWwgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlMb29wIElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiA0MCk7CgkJTG9vcCBJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gOCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMikpOwoJCVdhaXQoMTAsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBTb2xkaWVyOiBTaG9vdCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlTb2xkaWVyOiA3NjsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPj0gNDsKCQlBYnNvbHV0ZSBWYWx1ZShIb3Jpem9udGFsIEFuZ2xlIFRvd2FyZHMoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSkgPD0gNTsKCX0KCglhY3Rpb25zCgl7CgkJU3RhcnQgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJV2FpdChSYW5kb20gUmVhbCgwLjQwMCwgMC42MDApLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCUlmKEFtbW8oRXZlbnQgUGxheWVyLCAwKSA8PSAyKTsKCQkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFJlbG9hZCkpOwoJCUVuZDsKCQlXYWl0KFJhbmRvbSBSZWFsKDEuMjAwLCAxLjgwMCksIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIk1VVCBUZWFtIDEgKE11dGF0b3IpIFNvbGRpZXI6IEV4dGVuZGVkLCBIZWxpeCBSb2NrZXRzIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNvbGRpZXI6IDc2OwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuTXV0X0V4dGVuZGVkX0Fyc2VuYWwgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlMb29wIElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiA1MCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFNlY29uZGFyeSBGaXJlKSk7CgkJV2FpdCg4LCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgQmFwdGlzdGU6IFJldml2ZSBsYXN0IHRpbWUgdXNlZCAoMikiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQmFwdGlzdGU7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9IDA7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBCYXB0aXN0ZTogU2hvb3QiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQmFwdGlzdGU7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDQ7CgkJQWJzb2x1dGUgVmFsdWUoSG9yaXpvbnRhbCBBbmdsZSBUb3dhcmRzKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkpIDw9IDU7Cgl9CgoJYWN0aW9ucwoJewoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQlJZihBbW1vKEV2ZW50IFBsYXllciwgMCkgPD0gMyk7CgkJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihSZWxvYWQpKTsKCQlFbmQ7CgkJV2FpdChSYW5kb20gUmVhbCgwLjcwMCwgMS4xMDApLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgQmFwdGlzdGU6IEltbW9ydGFsaXR5IEZpZWxkLCBIYXMgVXNlZCBJbW1vcnRhbGl0eSBGaWVsZCAoMSkiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJQmFwdGlzdGU7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8xID09IEZhbHNlOwoJCU5vcm1hbGl6ZWQgSGVhbHRoKEV2ZW50IFBsYXllcikgPD0gMC4yNTA7CgkJSGVhbHRoKEV2ZW50IFBsYXllcikgIT0gMDsKCQkoR2xvYmFsLldhdmUgPj0gKEdsb2JhbC5HYW1lbW9kZSA/IDEwIDogMTIpIHx8IEdsb2JhbC5NdXRfTGFzdF9TdGFuZF9hY3RpdmUpID09IFRydWU7CgkJSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIEhhY2tlZCkgPT0gRmFsc2U7CgkJSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFN0dW5uZWQpID09IEZhbHNlOwoJfQoKCWFjdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzEgPSBUcnVlOwoJCUFib3J0IElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiA0MCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMikpOwoJfQp9CgpydWxlKCJUZWFtIDEgRWNobzogU2hvb3QiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJRWNobzsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPj0gNDsKCQlBYnNvbHV0ZSBWYWx1ZShIb3Jpem9udGFsIEFuZ2xlIFRvd2FyZHMoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSkgPD0gNTsKCX0KCglhY3Rpb25zCgl7CgkJU3RhcnQgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJV2FpdChSYW5kb20gUmVhbCgwLjgwMCwgMS4yMDApLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCVdhaXQoUmFuZG9tIFJlYWwoMC40MDAsIDAuNjAwKSwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIEVjaG86IFN0aWNreSBCb21icyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlFY2hvOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlMb29wIElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiA1MCk7CgkJTG9vcCBJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gMjApOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkpOwoJCVdhaXQoNiwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiTVVUIFRlYW0gMSBFY2hvIChNdXRhdG9yKTogRXh0ZW5kZWQsIEZvY3VzaW5nIEJlYW0iKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJRWNobzsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLk11dF9FeHRlbmRlZF9BcnNlbmFsID09IFRydWU7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPj0gNDsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgyLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlBYm9ydCBJZiBDb25kaXRpb24gSXMgRmFsc2U7CgkJTG9vcCBJZihOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+IDAuNTAwKTsKCQlMb29wIElmKERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+PSAxNSk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMikpOwoJCVdhaXQoMTAsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBFY2hvOiBGbGlnaHQsIElzIExhbmRpbmcgKDEpIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUVjaG87Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDU7CgkJRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgPT0gVHJ1ZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gNDA7Cgl9CgoJYWN0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc191c2luZ19Db21iYXRfUGF0aGZpbmRpbmcgPSBUcnVlOwoJCUV2ZW50IFBsYXllci5OYXZfaXNfcmVhY2hhYmxlX05vZGUgPSBGYWxzZTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAxKSk7CgkJSWYoSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikpOwoJCQlFdmVudCBQbGF5ZXIuSXNfZmx5aW5nID0gVHJ1ZTsKCQkJIldvcmthcm91bmQ6IEFzY2VuZCBhbmQgRGVzY2VuZCBCdXR0b25zIGRvIG5vdCB3b3JrIgoJCQlTdGFydCBBY2NlbGVyYXRpbmcoRXZlbnQgUGxheWVyLCBZIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpKSA8IFkgQ29tcG9uZW50IE9mKEV2ZW50IFBsYXllci5OYXYpID8gVXAgOiBEb3duLAoJCQkJSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFN0dW5uZWQpIHx8IEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBSb290ZWQpIHx8IEFic29sdXRlIFZhbHVlKFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKAoJCQkJRXZlbnQgUGxheWVyKSkgLSBZIENvbXBvbmVudCBPZihFdmVudCBQbGF5ZXIuTmF2KSkgPCAxID8gMCA6IDEwMCwgMy41MDAsIFRvIFdvcmxkLCBEaXJlY3Rpb24gUmF0ZSBhbmQgTWF4IFNwZWVkKTsKCQkJV2FpdCBVbnRpbCghSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllciksIDk5OTk5KTsKCQkJRXZlbnQgUGxheWVyLklzX2ZseWluZyA9IEZhbHNlOwoJCQlTdG9wIEFjY2VsZXJhdGluZyhFdmVudCBQbGF5ZXIpOwoJCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzEgPSBUcnVlOwoJCQlJZihFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyk7CgkJCQlFdmVudCBQbGF5ZXIuTmF2ID0gRmlyc3QgT2YoU29ydGVkIEFycmF5KEZpbHRlcmVkIEFycmF5KEdsb2JhbC5Ob2RlcywgSXMgSW4gTGluZSBvZiBTaWdodChFdmVudCBQbGF5ZXIsIEN1cnJlbnQgQXJyYXkgRWxlbWVudCwKCQkJCQlCYXJyaWVycyBEbyBOb3QgQmxvY2sgTE9TKSksIDIgKiBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgQ3VycmVudCBBcnJheSBFbGVtZW50KSAtIFZlcnRpY2FsIEFuZ2xlIFRvd2FyZHMoRXZlbnQgUGxheWVyLAoJCQkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudCkpKTsKCQkJCUlmKEV2ZW50IFBsYXllci5OYXYgPT0gMCk7CgkJCQkJRXZlbnQgUGxheWVyLk5hdiA9IEZpcnN0IE9mKFNvcnRlZCBBcnJheShHbG9iYWwuTm9kZXMsIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBDdXJyZW50IEFycmF5IEVsZW1lbnQpKSk7CgkJCQlFbmQ7CgkJCUVuZDsKCQkJV2FpdCBVbnRpbChJcyBPbiBHcm91bmQoRXZlbnQgUGxheWVyKSB8fCBJcyBEZWFkKEV2ZW50IFBsYXllciksIDk5OTk5KTsKCQkJRXZlbnQgUGxheWVyLkFiX1Zhcl8xID0gRmFsc2U7CgkJCVdhaXQoMiwgSWdub3JlIENvbmRpdGlvbik7CgkJRW5kOwoJCVdhaXQoMiwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIEVjaG86IEdsaWRlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUVjaG87Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BYl9WYXJfMSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihKdW1wKSk7CgkJV2FpdCBVbnRpbCghRXZlbnQgUGxheWVyLkFiX1Zhcl8xLCAzKTsKCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEp1bXApKTsKCX0KfQoKcnVsZSgiVGVhbSAxIFNvbWJyYTogVGFzZSBUYXJnZXQgKFBsYXllciksIFRhc2UgLyBFTVAgU3RhcnQgSGVhbHRoICgyKSwgTGFzdCBUcmFuc2xvY2F0b3IgKDMpIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNvbWJyYTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllciA9IDA7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8zID0gMDsKCX0KfQoKcnVsZSgiVGVhbSAxIFNvbWJyYTogU2hvb3QiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJU29tYnJhOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJCUV2ZW50IFBsYXllci5BYl9QbGF5ZXIgPT0gMDsKCQlBYnNvbHV0ZSBWYWx1ZShIb3Jpem9udGFsIEFuZ2xlIFRvd2FyZHMoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSkgPD0gNTsKCQkoIUlzIFVzaW5nIEFiaWxpdHkgMShFdmVudCBQbGF5ZXIpIHx8IERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA8PSA4KSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQlXYWl0KFJhbmRvbSBSZWFsKDAuNDAwLCAwLjYwMCksIElnbm9yZSBDb25kaXRpb24pOwoJCVN0b3AgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJSWYoQW1tbyhFdmVudCBQbGF5ZXIsIDApIDw9IDUpOwoJCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUmVsb2FkKSk7CgkJRW5kOwoJCVdhaXQoUmFuZG9tIFJlYWwoMC44MDAsIDEuMjAwKSwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiTVVUIFRlYW0gMSBTb21icmEgKE11dGF0b3IpOiBFeHRlbmRlZCwgU3RlYWx0aCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlTb21icmE7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUdsb2JhbC5NdXRfRXh0ZW5kZWRfQXJzZW5hbCA9PSBUcnVlOwoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSXNfYXNzYXVsdGluZyA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IEZhbHNlOwoJCUlzIFVzaW5nIEFiaWxpdHkgMShFdmVudCBQbGF5ZXIpID09IEZhbHNlOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDEsIEFib3J0IFdoZW4gRmFsc2UpOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihBYmlsaXR5IDEpKTsKCX0KfQoKcnVsZSgiVGVhbSAxIFNvbWJyYTogVHJhbnNsb2NhdG9yIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNvbWJyYTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSXNfYXNzYXVsdGluZyA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5UYXJnZXQuSXNfZmx5aW5nID09IEZhbHNlOwoJCUlzIFVzaW5nIEFiaWxpdHkgMihFdmVudCBQbGF5ZXIpID09IEZhbHNlOwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+PSA3LjUwMDsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gMjU7CgkJWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLlRhcmdldCkpIC0gWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSkgPj0gMzsKCQlJcyBJbiBWaWV3IEFuZ2xlKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCwgNSkgPT0gVHJ1ZTsKCQlJcyBJbiBMaW5lIG9mIFNpZ2h0KEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIpLCBFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyLlRhcmdldCkgKyBHbG9iYWwuQWltX09mZnNldCwgQmFycmllcnMgRG8gTm90IEJsb2NrIExPUykKCQkJPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMikpOwoJCVdhaXQoMC4yMDAgKyBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgLyAyNSwgSWdub3JlIENvbmRpdGlvbik7CgkJQWJvcnQgSWYoIUlzIFVzaW5nIEFiaWxpdHkgMihFdmVudCBQbGF5ZXIpKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAyKSk7CgkJV2FpdCgwLjEwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJQWJvcnQgSWYoIUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBQaGFzZWQgT3V0KSk7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8zID0gVG90YWwgVGltZSBFbGFwc2VkOwoJCUV2ZW50IFBsYXllci5OYXZfaXNfcmVhY2hhYmxlX05vZGUgPSBGYWxzZTsKCQlXYWl0KDEwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCX0KfQoKcnVsZSgiVGVhbSAxIFNvbWJyYTogRU1QIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNvbWJyYTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPj0gNTsKCQkoR2xvYmFsLldhdmUgPj0gKEdsb2JhbC5HYW1lbW9kZSA/IDEzIDogMTgpIHx8IEdsb2JhbC5NdXRfTGFzdF9TdGFuZF9hY3RpdmUpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMiwgSWdub3JlIENvbmRpdGlvbik7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCUxvb3AgSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA+IChFdmVudCBQbGF5ZXIuQWJfVmFyXzMgKyAyID49IFRvdGFsIFRpbWUgRWxhcHNlZCA/IDYwIDogMzApKTsKCQlMb29wIElmKEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBIYWNrZWQpIHx8IEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSk7CgkJTG9vcCBJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gMTIpOwoJCUxvb3AgSWYoIUlzIEluIExpbmUgb2YgU2lnaHQoRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllciksIEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIuVGFyZ2V0KSwgQmFycmllcnMgRG8gTm90IEJsb2NrIExPUykpOwoJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEdvb2QgUGlja3VwIEVmZmVjdCwgQ29sb3IoUHVycGxlKSwgRXZlbnQgUGxheWVyLCAxKTsKCQlXYWl0KDAuNTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlTZXQgVWx0aW1hdGUgQ2hhcmdlKEV2ZW50IFBsYXllciwgMTAwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oVWx0aW1hdGUpKTsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzIgPSBIZWFsdGgoRXZlbnQgUGxheWVyKTsKCQlXYWl0IFVudGlsKFVsdGltYXRlIENoYXJnZSBQZXJjZW50KEV2ZW50IFBsYXllcikgIT0gMTAwICYmIEhlYWx0aChFdmVudCBQbGF5ZXIpIDwgRXZlbnQgUGxheWVyLkFiX1Zhcl8yLCAwLjMwMCk7CgkJSWYoVWx0aW1hdGUgQ2hhcmdlIFBlcmNlbnQoRXZlbnQgUGxheWVyKSAhPSAxMDAgJiYgSGVhbHRoKEV2ZW50IFBsYXllcikgPCBFdmVudCBQbGF5ZXIuQWJfVmFyXzIpOwoJCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgU3R1bm5lZCwgMC41MDApOwoJCQlXYWl0KDgsIElnbm9yZSBDb25kaXRpb24pOwoJCUVsc2U7CgkJCVdhaXQoMTgsIElnbm9yZSBDb25kaXRpb24pOwoJCUVuZDsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgU29tYnJhOiBUYXNlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNvbWJyYTsKCX0KCgljb25kaXRpb25zCgl7CgkJSXMgQWxpdmUoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMiwgSWdub3JlIENvbmRpdGlvbik7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCUxvb3AgSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA+IChFdmVudCBQbGF5ZXIuVGFyZ2V0LklzX2ZseWluZyA/IDgwIDogNDApKTsKCQlMb29wIElmKEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBIYWNrZWQpIHx8IEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSk7CgkJTG9vcCBJZihIYXMgU3RhdHVzKEV2ZW50IFBsYXllci5UYXJnZXQsIEludmluY2libGUpIHx8IEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLlRhcmdldCwgUGhhc2VkIE91dCkgfHwgSXMgVXNpbmcgVWx0aW1hdGUoCgkJCUV2ZW50IFBsYXllci5UYXJnZXQpIHx8IFVsdGltYXRlIENoYXJnZSBQZXJjZW50KEV2ZW50IFBsYXllci5UYXJnZXQpIDw9IEV2ZW50IFBsYXllci5UYXJnZXQuQWJfQ2hhcmdlZCAqIDIwKTsKCQlMb29wIElmKERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+PSAxMCk7CgkJTG9vcCBJZighSXMgSW4gTGluZSBvZiBTaWdodChFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyKSwgRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllci5UYXJnZXQpLCBBbGwgQmFycmllcnMgQmxvY2sgTE9TKSk7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllciA9IEV2ZW50IFBsYXllci5UYXJnZXQ7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8yID0gSGVhbHRoKEV2ZW50IFBsYXllcik7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllci5UYXNlZF91bnRpbCA9IFRvdGFsIFRpbWUgRWxhcHNlZCArIDU7CgkJU2V0IFN0YXR1cyhFdmVudCBQbGF5ZXIsIE51bGwsIFJvb3RlZCwgNSk7CgkJSWYoIUV2ZW50IFBsYXllci5BYl9QbGF5ZXIuUGVya19TaG9ja3Byb29mKTsKCQkJU21hbGwgTWVzc2FnZShFdmVudCBQbGF5ZXIuQWJfUGxheWVyLCBDdXN0b20gU3RyaW5nKCJTb21icmEgaXMgc3R1bm5pbmcgeW91ISBTaG9vdCBoZXIgdG8gYnJlYWsgZnJlZSEiKSk7CgkJRW5kOwoJCVdhaXQoMTMsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBTb21icmE6IFRhc2UgdGltZXMgb3V0IC8gTG9zdCBIZWFsdGggLyBUYXJnZXQgaXMgZG93bmVkIC8gVGFyZ2V0IGxlZnQgLyBJcyBDQ2QgLyBEaXN0YW5jZSB0b28gSGlnaCAvIExPUyBsb3N0IikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNvbWJyYTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllciAhPSAwOwoJCShFdmVudCBQbGF5ZXIuQWJfUGxheWVyLlRhc2VkX3VudGlsIDwgVG90YWwgVGltZSBFbGFwc2VkIHx8IEhlYWx0aChFdmVudCBQbGF5ZXIpCgkJCTwgRXZlbnQgUGxheWVyLkFiX1Zhcl8yIHx8IEV2ZW50IFBsYXllci5BYl9QbGF5ZXIuRG93bmVkX3NpbmNlIHx8ICFFdmVudCBQbGF5ZXIuQWJfUGxheWVyLklzX0NvbWJhdGFudCB8fCBIYXMgU3RhdHVzKAoJCQlFdmVudCBQbGF5ZXIsIEhhY2tlZCkgfHwgSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFN0dW5uZWQpIHx8IERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuQWJfUGxheWVyKQoJCQk+PSAxMSB8fCAhSXMgSW4gTGluZSBvZiBTaWdodChFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyKSwgRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllci5BYl9QbGF5ZXIpLCBBbGwgQmFycmllcnMgQmxvY2sgTE9TKSkKCQkJPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJSWYoRXZlbnQgUGxheWVyLkFiX1BsYXllci5QZXJrX1Nob2NrcHJvb2YpOwoJCQlEYW1hZ2UoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuQWJfUGxheWVyLCA1MCk7CgkJCVNldCBTdGF0dXMoRmlsdGVyZWQgQXJyYXkoUGxheWVycyBXaXRoaW4gUmFkaXVzKEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIpLCAxMCwgVGVhbSAxLCBTdXJmYWNlcyksICFIYXMgU3RhdHVzKAoJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LCBQaGFzZWQgT3V0KSksIE51bGwsIEhhY2tlZCwgMik7CgkJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEJhZCBFeHBsb3Npb24sIENvbG9yKFB1cnBsZSksIEV2ZW50IFBsYXllciwgMTApOwoJCQlQbGF5IEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBFeHBsb3Npb24gU291bmQsIENvbG9yKFdoaXRlKSwgRXZlbnQgUGxheWVyLCAyMDApOwoJCUVuZDsKCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyLlRhc2VkX3VudGlsID0gMDsKCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyID0gMDsKCQlDbGVhciBTdGF0dXMoRXZlbnQgUGxheWVyLCBSb290ZWQpOwoJfQp9CgpydWxlKCJUZWFtIDEgU29tYnJhOiBUb29rIERhbWFnZSB3aGlsZSBUYXNpbmciKQp7CglldmVudAoJewoJCVBsYXllciBUb29rIERhbWFnZTsKCQlUZWFtIDE7CgkJU29tYnJhOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyICE9IDA7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKEV2ZW50IFBsYXllci5BYl9QbGF5ZXIuUGVya19TaG9ja3Byb29mKTsKCQkJU2V0IFN0YXR1cyhQbGF5ZXJzIFdpdGhpbiBSYWRpdXMoRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllciksIDEwLCBUZWFtIDEsIFN1cmZhY2VzKSwgTnVsbCwgSGFja2VkLCAzKTsKCQkJUGxheSBFZmZlY3QoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQmFkIEV4cGxvc2lvbiwgQ29sb3IoUHVycGxlKSwgRXZlbnQgUGxheWVyLCAxMCk7CgkJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEV4cGxvc2lvbiBTb3VuZCwgQ29sb3IoV2hpdGUpLCBFdmVudCBQbGF5ZXIsIDIwMCk7CgkJRW5kOwoJCUV2ZW50IFBsYXllci5BYl9QbGF5ZXIuVGFzZWRfdW50aWwgPSAwOwoJCUV2ZW50IFBsYXllci5BYl9QbGF5ZXIgPSAwOwoJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFJvb3RlZCk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMjogSXMgVGFzZWQsIERpc2FibGUgQWJpbGl0aWVzLCBNb3ZlbWVudCwgU2hha2UgRmFjaW5nLCBTZXQgQWltc3BlZWQsIFNob290IikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAyOwoJCUFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLlRhc2VkX3VudGlsID49IFRvdGFsIFRpbWUgRWxhcHNlZDsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoRXZlbnQgUGxheWVyLlBlcmtfU2hvY2twcm9vZik7CgkJU2V0IFN0YXR1cyhFdmVudCBQbGF5ZXIsIE51bGwsIEJ1cm5pbmcsIDEwKTsKCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgSGFja2VkLCAxMCk7CgkJU2V0IFN0YXR1cyhFdmVudCBQbGF5ZXIsIE51bGwsIFJvb3RlZCwgMTApOwoJCVN0YXJ0IEZhY2luZyhFdmVudCBQbGF5ZXIsIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhIb3Jpem9udGFsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIpICsgUmFuZG9tIEludGVnZXIoLTEwMCwgMjApLAoJCQlWZXJ0aWNhbCBGYWNpbmcgQW5nbGUgT2YoRXZlbnQgUGxheWVyKSArIFJhbmRvbSBJbnRlZ2VyKC0xMDAsIDgwKSksIDEwMCwgVG8gV29ybGQsIERpcmVjdGlvbiBhbmQgVHVybiBSYXRlKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhNb2lyYSkgPyBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpIDogQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCVdhaXQoMC4zMDAsIElnbm9yZSBDb25kaXRpb24pOwoJCVN0b3AgRmFjaW5nKEV2ZW50IFBsYXllcik7CgkJV2hpbGUoRXZlbnQgUGxheWVyLlRhc2VkX3VudGlsID49IFRvdGFsIFRpbWUgRWxhcHNlZCk7CgkJCVNldCBBaW0gU3BlZWQoRXZlbnQgUGxheWVyLCA1MCk7CgkJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKE1vaXJhKSA/IEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkgOiBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJCVdhaXQgVW50aWwoRXZlbnQgUGxheWVyLlRhc2VkX3VudGlsIDwgVG90YWwgVGltZSBFbGFwc2VkLCBSYW5kb20gUmVhbCgwLjEwMCwgMC4zMDApKTsKCQkJU2V0IEFpbSBTcGVlZChFdmVudCBQbGF5ZXIsIDIwMCk7CgkJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEhlcm8gT2YoRXZlbnQgUGxheWVyKSA9PSBIZXJvKE1vaXJhKSA/IEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkgOiBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJCVdhaXQgVW50aWwoRXZlbnQgUGxheWVyLlRhc2VkX3VudGlsIDwgVG90YWwgVGltZSBFbGFwc2VkLCBSYW5kb20gUmVhbCgwLjEwMCwgMC4zMDApKTsKCQlFbmQ7CgkJU2V0IEFpbSBTcGVlZChFdmVudCBQbGF5ZXIsIDEwMCk7CgkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgQnVybmluZyk7CgkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgSGFja2VkKTsKCQlDbGVhciBTdGF0dXMoRXZlbnQgUGxheWVyLCBSb290ZWQpOwoJfQp9CgpydWxlKCJUZWFtIDEgV2lkb3dtYWtlcjogU2hvb3QsIFRhcmdldCAoUGxheWVyKSwgU2NvcGVkIFNpbmNlICgyKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlXaWRvd21ha2VyOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJfQoKCWFjdGlvbnMKCXsKCQlJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPiA4KTsKCQkJRXZlbnQgUGxheWVyLkFiX1BsYXllciA9IEV2ZW50IFBsYXllci5UYXJnZXQ7CgkJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9IFRvdGFsIFRpbWUgRWxhcHNlZDsKCQkJU3RhcnQgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpKTsKCQkJV2FpdCgwLjEwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJCVdoaWxlKElzIEZpcmluZyBTZWNvbmRhcnkoRXZlbnQgUGxheWVyKSAmJiBFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyAmJiBFdmVudCBQbGF5ZXIuQWJfVmFyXzIgKyAoCgkJCQlHbG9iYWwuSXNfSW5mcmFzaWdodF9vbl9Cb3RzID8gMC45MDAgOiAxLjMwMCkgPj0gVG90YWwgVGltZSBFbGFwc2VkKTsKCQkJCVdhaXQoMC4xMDAsIElnbm9yZSBDb25kaXRpb24pOwoJCQkJSWYoRXZlbnQgUGxheWVyLkFiX1BsYXllciAhPSBFdmVudCBQbGF5ZXIuVGFyZ2V0KTsKCQkJCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyID0gRXZlbnQgUGxheWVyLlRhcmdldDsKCQkJCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzIgPSBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJCQlFbmQ7CgkJCUVuZDsKCQkJSWYoSXMgRmlyaW5nIFNlY29uZGFyeShFdmVudCBQbGF5ZXIpICYmIEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDQpOwoJCQkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCQkJV2FpdCgwLjAxNiwgSWdub3JlIENvbmRpdGlvbik7CgkJCUVuZDsKCQkJU3RvcCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkpOwoJCUVsc2U7CgkJCVN0YXJ0IEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCQlXYWl0KFJhbmRvbSBSZWFsKDAuNDAwLCAwLjYwMCksIElnbm9yZSBDb25kaXRpb24pOwoJCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCQlJZihBbW1vKEV2ZW50IFBsYXllciwgMCkgPD0gMik7CgkJCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUmVsb2FkKSk7CgkJCUVuZDsKCQlFbmQ7CgkJV2FpdChSYW5kb20gUmVhbCgwLjgwMCwgMS4yMDApLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJNVVQgVGVhbSAxIFdpZG93bWFrZXIgKE11dGF0b3IpOiBFeHRlbmRlZCwgVmVub20gTWluZSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlXaWRvd21ha2VyOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuTXV0X0V4dGVuZGVkX0Fyc2VuYWwgPT0gVHJ1ZTsKCQlJcyBBbGl2ZShFdmVudCBQbGF5ZXIpID09IFRydWU7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMSwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMikpOwoJCVdhaXQoMjAsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBXaWRvd21ha2VyOiBJbmZyYS1TaWdodCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlXaWRvd21ha2VyOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA9PSBUcnVlOwoJCUdsb2JhbC5Jc19JbmZyYXNpZ2h0X29uX0JvdHMgPT0gRmFsc2U7CgkJKEdsb2JhbC5XYXZlID49IChHbG9iYWwuR2FtZW1vZGUgPyAxMyA6IDE3KSB8fCBHbG9iYWwuTXV0X0xhc3RfU3RhbmRfYWN0aXZlKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlMb29wIElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiAyMCk7CgkJU2V0IFVsdGltYXRlIENoYXJnZShFdmVudCBQbGF5ZXIsIDEwMCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFVsdGltYXRlKSk7CgkJV2FpdCgyOCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIFdpZG93bWFrZXI6IEluZnJhLVNpZ2h0IGlmIFNvbWJyYSBpcyBzdGVhbHRoZWQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJV2lkb3dtYWtlcjsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLlRhcmdldCA9PSAwOwoJCUdsb2JhbC5Jc19JbmZyYXNpZ2h0X29uX0JvdHMgPT0gRmFsc2U7CgkJSXMgVHJ1ZSBGb3IgQW55KEdsb2JhbC5Db21iYXRhbnRzLCBDdXJyZW50IEFycmF5IEVsZW1lbnQuSXNfaW52aXNpYmxlID09IDEpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMiwgSWdub3JlIENvbmRpdGlvbik7CgkJQWJvcnQgSWYgQ29uZGl0aW9uIElzIEZhbHNlOwoJCUxvb3AgSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA+IDQwKTsKCQlTZXQgVWx0aW1hdGUgQ2hhcmdlKEV2ZW50IFBsYXllciwgMTAwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oVWx0aW1hdGUpKTsKCX0KfQoKcnVsZSgiR2xvYmFsOiBTZXQgLyBVbnNldCBJcyBJbmZyYXNpZ2h0IG9uIChCb3RzKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEdsb2JhbDsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLklzX0luZnJhc2lnaHRfb25fQm90cyAhPSBJcyBUcnVlIEZvciBBbnkoUGxheWVycyBPbiBIZXJvKEhlcm8oV2lkb3dtYWtlciksIFRlYW0gMSksIElzIFVzaW5nIFVsdGltYXRlKAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQpKTsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLklzX0luZnJhc2lnaHRfb25fQm90cyA9ICFHbG9iYWwuSXNfSW5mcmFzaWdodF9vbl9Cb3RzOwoJCUdsb2JhbC5BaW1fT2Zmc2V0ID0gKEdsb2JhbC5Jc19JbmZyYXNpZ2h0X29uX0JvdHMgPyAwIDogMC41MDApICogRG93bjsKCQlXYWl0KDAuMDE2LCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgUmVhcGVyOiBTaG9vdCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlSZWFwZXI7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDQ7CgkJQWJzb2x1dGUgVmFsdWUoSG9yaXpvbnRhbCBBbmdsZSBUb3dhcmRzKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkpIDw9IDU7CgkJSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQlXYWl0KDAuNjAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgUmVhcGVyOiBXcmFpdGggRm9ybSwgV3JhaXRoIFBvc2l0aW9uICgzKSwgRm9yY2UgUG9zaXRpb24iKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJUmVhcGVyOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlJcyBBbGl2ZShFdmVudCBQbGF5ZXIpID09IFRydWU7CgkJRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuRmVhcmVkX3VudGlsIDwgVG90YWwgVGltZSBFbGFwc2VkOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBIYWNrZWQpID09IEZhbHNlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBSb290ZWQpID09IEZhbHNlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSA9PSBGYWxzZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gMTA7CgkJRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpIDw9IDQwOwoJfQoKCWFjdGlvbnMKCXsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAxKSk7CgkJSWYoSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikpOwoJCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzMgPSBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpOwoJCQlDaGFzZSBQbGF5ZXIgVmFyaWFibGUgQXQgUmF0ZShFdmVudCBQbGF5ZXIsIEFiX1Zhcl8zLCBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KSArIDAuNTAwICogVXAsIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLAoJCQkJRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gMTAgPyAxMCA6IDIwLCBEZXN0aW5hdGlvbiBhbmQgUmF0ZSk7CgkJCVN0YXJ0IEZvcmNpbmcgUGxheWVyIFBvc2l0aW9uKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLkFiX1Zhcl8zLCBUcnVlKTsKCQkJRGlzYWJsZSBNb3ZlbWVudCBDb2xsaXNpb24gV2l0aCBFbnZpcm9ubWVudChFdmVudCBQbGF5ZXIsIFRydWUpOwoJCQlFdmVudCBQbGF5ZXIuSXNfV3JhaXRoID0gVHJ1ZTsKCQkJV2FpdCg4LCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlFbHNlOwoJCQlXYWl0KDEsIElnbm9yZSBDb25kaXRpb24pOwoJCUVuZDsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgUmVhcGVyOiBDYW5jZWwgV3JhaXRoIEZvcm0sIFN0b3AgRm9yY2luZyBQb3NpdGlvbiIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlSZWFwZXI7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19XcmFpdGggPT0gVHJ1ZTsKCQlJcyBVc2luZyBBYmlsaXR5IDEoRXZlbnQgUGxheWVyKSA9PSBUcnVlOwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA8PSAzOwoJCUlzIEluIExpbmUgb2YgU2lnaHQoRXZlbnQgUGxheWVyLlRhcmdldCwgUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSwgQmFycmllcnMgRG8gTm90IEJsb2NrIExPUykgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCVN0b3AgQ2hhc2luZyBQbGF5ZXIgVmFyaWFibGUoRXZlbnQgUGxheWVyLCBBYl9WYXJfMyk7CgkJU3RvcCBGb3JjaW5nIFBsYXllciBQb3NpdGlvbihFdmVudCBQbGF5ZXIpOwoJCUVuYWJsZSBNb3ZlbWVudCBDb2xsaXNpb24gV2l0aCBFbnZpcm9ubWVudChFdmVudCBQbGF5ZXIpOwoJCUV2ZW50IFBsYXllci5Jc19XcmFpdGggPSBGYWxzZTsKCQlFdmVudCBQbGF5ZXIuTmF2X2lzX3JlYWNoYWJsZV9Ob2RlID0gRmFsc2U7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBSZWFwZXI6IFdyYWl0aCBGb3JtIFRpbWVkIG91dCAvIFRhcmdldCBsZWZ0IC8gVGFyZ2V0IGlzIGludmlzaWJsZSwgU3RvcCBGb3JjaW5nIFBvc2l0aW9uIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVJlYXBlcjsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1dyYWl0aCA9PSBUcnVlOwoJCSghSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikgfHwgIUV2ZW50IFBsYXllci5UYXJnZXQuSXNfQ29tYmF0YW50IHx8IEV2ZW50IFBsYXllci5UYXJnZXQuSXNfaW52aXNpYmxlID4gKERpc3RhbmNlIEJldHdlZW4oCgkJCUV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gMi40MDAgfHwgR2xvYmFsLklzX0luZnJhc2lnaHRfb25fQm90cykpID09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCVN0b3AgQ2hhc2luZyBQbGF5ZXIgVmFyaWFibGUoRXZlbnQgUGxheWVyLCBBYl9WYXJfMyk7CgkJU3RvcCBGb3JjaW5nIFBsYXllciBQb3NpdGlvbihFdmVudCBQbGF5ZXIpOwoJCUVuYWJsZSBNb3ZlbWVudCBDb2xsaXNpb24gV2l0aCBFbnZpcm9ubWVudChFdmVudCBQbGF5ZXIpOwoJCUV2ZW50IFBsYXllci5Jc19XcmFpdGggPSBGYWxzZTsKCQlFdmVudCBQbGF5ZXIuTmF2X2lzX3JlYWNoYWJsZV9Ob2RlID0gRmFsc2U7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBSZWFwZXI6IERlYXRoIEJsb3Nzb20iKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJUmVhcGVyOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA1OwoJCUlzIFVzaW5nIEFiaWxpdHkgMShFdmVudCBQbGF5ZXIpID09IEZhbHNlOwoJCShHbG9iYWwuV2F2ZSA+PSAoR2xvYmFsLkdhbWVtb2RlID8gMTIgOiAxNSkgfHwgR2xvYmFsLk11dF9MYXN0X1N0YW5kX2FjdGl2ZSkgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgyLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlBYm9ydCBJZiBDb25kaXRpb24gSXMgRmFsc2U7CgkJTG9vcCBJZihSYW5kb20gSW50ZWdlcigxLCAxMDApID4gMjApOwoJCUxvb3AgSWYoRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpID49IDcpOwoJCVNldCBVbHRpbWF0ZSBDaGFyZ2UoRXZlbnQgUGxheWVyLCAxMDApOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihVbHRpbWF0ZSkpOwoJCVdhaXQoMjgsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBPcmlzYTogU3RhcnQgLyBTdG9wIFNob290aW5nIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCU9yaXNhOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSAzOwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQlXYWl0IFVudGlsKEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TIDwgMywgOTk5OTkpOwoJCVN0b3AgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBPcmlzYTogRGVjcmVhc2UgLyBOb3JtYWxpemUgTW92ZSBTcGVlZCB3aGlsZSBzaG9vdGluZyBvbiBncm91bmQiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJT3Jpc2E7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEJ1dHRvbiBIZWxkKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpID09IFRydWU7CgkJSXMgT24gR3JvdW5kKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSGFzX1NwYXduX1NwZWVkX0JvbnVzID09IEZhbHNlOwoJfQoKCWFjdGlvbnMKCXsKCQlTZXQgTW92ZSBTcGVlZChFdmVudCBQbGF5ZXIsIEdsb2JhbC5NdXRfQW1wZWQgPyA1Ny41MDAgOiA1MCk7CgkJV2FpdCBVbnRpbCghKElzIEJ1dHRvbiBIZWxkKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpICYmIElzIE9uIEdyb3VuZChFdmVudCBQbGF5ZXIpKSwgOTk5OTkpOwoJCVNldCBNb3ZlIFNwZWVkKEV2ZW50IFBsYXllciwgR2xvYmFsLk11dF9BbXBlZCA/IDExNSA6IDEwMCk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBPcmlzYTogSGFsdCEiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJT3Jpc2E7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJRXZlbnQgUGxheWVyLlRhcmdldC5Jc19mbHlpbmcgPT0gVHJ1ZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gMTA7CgkJSXMgSW4gVmlldyBBbmdsZShFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQsIDUpID09IFRydWU7CgkJSXMgSW4gTGluZSBvZiBTaWdodChFeWUgUG9zaXRpb24oRXZlbnQgUGxheWVyKSwgRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllci5UYXJnZXQpICsgR2xvYmFsLkFpbV9PZmZzZXQsIEJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpCgkJCT09IFRydWU7Cgl9CgoJYWN0aW9ucwoJewoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkpOwoJCVdhaXQoMC4xMDAgKyBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgLyAyNSwgSWdub3JlIENvbmRpdGlvbik7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFNlY29uZGFyeSBGaXJlKSk7CgkJV2FpdCgxNSwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiTVVUIFRlYW0gMSBPcmlzYSAoTXV0YXRvcik6IEV4dGVuZGVkLCBGb3J0aWZ5LCBIYXMgVXNlZCBGb3J0aWZ5ICgxKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlPcmlzYTsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLk11dF9FeHRlbmRlZF9BcnNlbmFsID09IFRydWU7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzEgPT0gRmFsc2U7CgkJTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA8PSAoSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFJvb3RlZCkgPyAwLjkwMCA6IDAuNTAwKTsKCQlIZWFsdGgoRXZlbnQgUGxheWVyKSAhPSAwOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBIYWNrZWQpID09IEZhbHNlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8xID0gVHJ1ZTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAxKSk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBPcmlzYTogU3VwZXJjaGFyZ2VyIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCU9yaXNhOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA9PSBUcnVlOwoJCShHbG9iYWwuV2F2ZSA+PSAoR2xvYmFsLkdhbWVtb2RlID8gMTIgOiAxNSkgfHwgR2xvYmFsLk11dF9MYXN0X1N0YW5kX2FjdGl2ZSkgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgyLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlBYm9ydCBJZiBDb25kaXRpb24gSXMgRmFsc2U7CgkJTG9vcCBJZihSYW5kb20gSW50ZWdlcigxLCAxMDApID4gMjApOwoJCUxvb3AgSWYoSXMgVHJ1ZSBGb3IgQW55KFBsYXllcnMgT24gSGVybyhIZXJvKE9yaXNhKSwgVGVhbSAxKSwgSXMgVXNpbmcgVWx0aW1hdGUoQ3VycmVudCBBcnJheSBFbGVtZW50KSkpOwoJCVNldCBVbHRpbWF0ZSBDaGFyZ2UoRXZlbnQgUGxheWVyLCAxMDApOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihVbHRpbWF0ZSkpOwoJCVdhaXQoMjMsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBSb2FkaG9nOiBTaG9vdCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlSb2FkaG9nOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJCUFic29sdXRlIFZhbHVlKEhvcml6b250YWwgQW5nbGUgVG93YXJkcyhFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpKSA8PSA1OwoJCUlzIFVzaW5nIEFiaWxpdHkgMShFdmVudCBQbGF5ZXIpID09IEZhbHNlOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPiA5KTsKCQkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFNlY29uZGFyeSBGaXJlKSk7CgkJRWxzZTsKCQkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCUVuZDsKCQlXYWl0KFJhbmRvbSBSZWFsKDAuOTAwLCAxLjMwMCksIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBSb2FkaG9nOiBDaGFpbiBIb29rIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVJvYWRob2c7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDQ7CgkJQW1tbyhFdmVudCBQbGF5ZXIsIDApID4gMDsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCgyLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlBYm9ydCBJZiBDb25kaXRpb24gSXMgRmFsc2U7CgkJTG9vcCBJZihSYW5kb20gSW50ZWdlcigxLCAxMDApID4gKEV2ZW50IFBsYXllci5UYXJnZXQuSXNfZmx5aW5nID8gODAgOiA0MCkpOwoJCUxvb3AgSWYoRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpID49IDIwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAxKSk7CgkJV2FpdCg4LCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgUm9hZGhvZzogV2hvbGUgSG9nIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVJvYWRob2c7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDU7CgkJKEdsb2JhbC5XYXZlID49IChHbG9iYWwuR2FtZW1vZGUgPyAxMSA6IDE0KSB8fCBHbG9iYWwuTXV0X0xhc3RfU3RhbmRfYWN0aXZlKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlMb29wIElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiAyMCk7CgkJTG9vcCBJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gNSk7CgkJU2V0IFVsdGltYXRlIENoYXJnZShFdmVudCBQbGF5ZXIsIDEwMCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFVsdGltYXRlKSk7CgkJV2FpdCgyOCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIFRyYWNlcjogU2hvb3QiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJVHJhY2VyOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJCUFic29sdXRlIFZhbHVlKEhvcml6b250YWwgQW5nbGUgVG93YXJkcyhFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpKSA8PSA1OwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQlXYWl0KFJhbmRvbSBSZWFsKDAuNDAwLCAwLjYwMCksIElnbm9yZSBDb25kaXRpb24pOwoJCVN0b3AgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJSWYoQW1tbyhFdmVudCBQbGF5ZXIsIDApIDw9IDEwKTsKCQkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFJlbG9hZCkpOwoJCUVuZDsKCQlXYWl0KFJhbmRvbSBSZWFsKDAuNDAwLCAwLjYwMCksIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBUcmFjZXI6IEJsaW5rIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVRyYWNlcjsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJCURpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA8PSA1OwoJCUFic29sdXRlIFZhbHVlKEhvcml6b250YWwgQW5nbGUgVG93YXJkcyhFdmVudCBQbGF5ZXIuVGFyZ2V0LCBFdmVudCBQbGF5ZXIpKSA8PSA0NTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLk5hdiA9IFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllci5UYXJnZXQpOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihBYmlsaXR5IDEpKTsKCQlXYWl0KDEsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBUcmFjZXI6IFJlY2FsbCB0byBlbmVteSBvbiBoaWdoIGdyb3VuZCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlUcmFjZXI7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuVGFyZ2V0LklzX2ZseWluZyA9PSBGYWxzZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gMjA7CgkJWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLlRhcmdldCkpIC0gWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSkgPj0gMzsKCX0KCglhY3Rpb25zCgl7CgkJU2V0IEFiaWxpdHkgQ29vbGRvd24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAyKSwgMCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEFiaWxpdHkgMikpOwoJCVdhaXQoMC44MDAsIElnbm9yZSBDb25kaXRpb24pOwoJCUlmKElzIFVzaW5nIEFiaWxpdHkgMihFdmVudCBQbGF5ZXIpICYmIEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TKTsKCQkJVGVsZXBvcnQoRXZlbnQgUGxheWVyLCBSYXkgQ2FzdCBIaXQgUG9zaXRpb24oRXllIFBvc2l0aW9uKEV2ZW50IFBsYXllci5UYXJnZXQpLCBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KQoJCQkJLSAyLjUwMCAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhIb3Jpem9udGFsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KSwgMCksIE51bGwsIE51bGwsIEZhbHNlKQoJCQkJKyAwLjUwMCAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhIb3Jpem9udGFsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KSwgMCkpOwoJCQlFdmVudCBQbGF5ZXIuTmF2X2lzX3JlYWNoYWJsZV9Ob2RlID0gRmFsc2U7CgkJCVdhaXQoMTUsIElnbm9yZSBDb25kaXRpb24pOwoJCUVuZDsKCQlXYWl0KDUsIElnbm9yZSBDb25kaXRpb24pOwoJfQp9CgpydWxlKCJUZWFtIDEgVHJhY2VyOiBQdWxzZSBCb21iLCBIYXMgVXNlZCBQdWxzZSBCb21iICgxKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlUcmFjZXI7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzEgPT0gRmFsc2U7CgkJTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA8PSAwLjQwMDsKCQlIZWFsdGgoRXZlbnQgUGxheWVyKSAhPSAwOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBIYWNrZWQpID09IEZhbHNlOwoJCUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBTdHVubmVkKSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8xID0gVHJ1ZTsKCQlTZXQgVWx0aW1hdGUgQ2hhcmdlKEV2ZW50IFBsYXllciwgMTAwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oVWx0aW1hdGUpKTsKCQlXYWl0KDAuMjAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlDYW5jZWwgUHJpbWFyeSBBY3Rpb24oRXZlbnQgUGxheWVyKTsKCQlTZXQgQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbihBYmlsaXR5IDIpLCAwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAyKSk7CgkJV2FpdCgwLjgwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJQWJvcnQgSWYoIShJcyBVc2luZyBBYmlsaXR5IDIoRXZlbnQgUGxheWVyKSAmJiBFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUykpOwoJCVRlbGVwb3J0KEV2ZW50IFBsYXllciwgUmF5IENhc3QgSGl0IFBvc2l0aW9uKEV5ZSBQb3NpdGlvbihFdmVudCBQbGF5ZXIuVGFyZ2V0KSwgUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyLlRhcmdldCkKCQkJLSAyLjUwMCAqIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhIb3Jpem9udGFsIEZhY2luZyBBbmdsZSBPZihFdmVudCBQbGF5ZXIuVGFyZ2V0KSwgMCksIE51bGwsIE51bGwsIEZhbHNlKQoJCQkrIDAuNTAwICogRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgRmFjaW5nIEFuZ2xlIE9mKEV2ZW50IFBsYXllci5UYXJnZXQpLCAwKSk7CgkJRXZlbnQgUGxheWVyLk5hdl9pc19yZWFjaGFibGVfTm9kZSA9IEZhbHNlOwoJfQp9CgpydWxlKCJUZWFtIDEgU2lnbWE6IFNob290IikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNpZ21hOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJCUFic29sdXRlIFZhbHVlKEhvcml6b250YWwgQW5nbGUgVG93YXJkcyhFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpKSA8PSA1OwoJfQoKCWFjdGlvbnMKCXsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJV2FpdCgxLjgwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiTVVUIFRlYW0gMSBTaWdtYSAoTXV0YXRvcik6IEV4dGVuZGVkLCBLaW5ldGljIEdyYXNwIikKewoJZXZlbnQKCXsKCQlQbGF5ZXIgVG9vayBEYW1hZ2U7CgkJVGVhbSAxOwoJCVNpZ21hOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuTXV0X0V4dGVuZGVkX0Fyc2VuYWwgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA+IDIwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAxKSk7CgkJV2FpdCgxMCwgSWdub3JlIENvbmRpdGlvbik7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBTaWdtYTogQWNjcmV0aW9uIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNpZ21hOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlMb29wIElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiAoRXZlbnQgUGxheWVyLlRhcmdldC5Jc19mbHlpbmcgPyA4MCA6IDQwKSk7CgkJTG9vcCBJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gMjApOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihBYmlsaXR5IDIpKTsKCQlXYWl0KDEzLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgU2lnbWE6IEV4cGVyaW1lbnRhbCBCYXJyaWVyLCBTZXQgSXMgVXNpbmcgRXhwZXJpbWVudGFsIEJhcnJpZXIgKDEpIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNpZ21hOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlJcyBGaXJpbmcgU2Vjb25kYXJ5KEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8xID0gVHJ1ZTsKCQlXYWl0IFVudGlsKEFiaWxpdHkgQ29vbGRvd24oRXZlbnQgUGxheWVyLCBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpKSA+IDAgfHwgSXMgRGVhZChFdmVudCBQbGF5ZXIpIHx8IEhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBIYWNrZWQpLAoJCQk5OTk5OSk7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8xID0gRmFsc2U7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBTaWdtYTogU2VuZCBFeHBlcmltZW50YWwgQmFycmllciIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlTaWdtYTsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzEgPT0gRmFsc2U7CgkJQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkpID09IDA7CgkJSXMgRmlyaW5nIFByaW1hcnkoRXZlbnQgUGxheWVyKSA9PSBGYWxzZTsKCQlJcyBJbiBWaWV3IEFuZ2xlKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCwgNSkgPT0gVHJ1ZTsKCQlJcyBJbiBMaW5lIG9mIFNpZ2h0KEV2ZW50IFBsYXllci5UYXJnZXQsIEV2ZW50IFBsYXllciwgRW5lbXkgQmFycmllcnMgQmxvY2sgTE9TKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkpOwoJCVdhaXQoMC4xMDAsIElnbm9yZSBDb25kaXRpb24pOwoJCUlmKCFFdmVudCBQbGF5ZXIuQWJfVmFyXzEpOwoJCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFNlY29uZGFyeSBGaXJlKSk7CgkJCVdhaXQoMC41MDAsIElnbm9yZSBDb25kaXRpb24pOwoJCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJCUVuZDsKCQlXYWl0KERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSAvIDUwIC0gMC4xMDAsIElnbm9yZSBDb25kaXRpb24pOwoJCVN0b3AgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpKTsKCX0KfQoKcnVsZSgiVGVhbSAxIFNpZ21hOiBSZWNhbGwgRXhwZXJpbWVudGFsIEJhcnJpZXIiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJU2lnbWE7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5BYl9WYXJfMSA9PSBUcnVlOwoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQkoIUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TIHx8IElzIEluIExpbmUgb2YgU2lnaHQoRXZlbnQgUGxheWVyLlRhcmdldCwgRXZlbnQgUGxheWVyLCBFbmVteSBCYXJyaWVycyBCbG9jayBMT1MpKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDEuNTAwLCBBYm9ydCBXaGVuIEZhbHNlKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpKTsKCQlXYWl0KDAuNTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgU2lnbWE6IEdyYXZpdGljIEZsdXgiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJU2lnbWE7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJKEdsb2JhbC5XYXZlID49IChHbG9iYWwuR2FtZW1vZGUgPyAxNSA6IDIwKSB8fCBHbG9iYWwuTXV0X0xhc3RfU3RhbmRfYWN0aXZlKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlMb29wIElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiAzMCk7CgkJTG9vcCBJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gMjUpOwoJCVNldCBVbHRpbWF0ZSBDaGFyZ2UoRXZlbnQgUGxheWVyLCAxMDApOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihVbHRpbWF0ZSkpOwoJCVdhaXQoMjgsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBHZW5qaTogU2hvb3QiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJR2Vuamk7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDQ7CgkJKElzIFVzaW5nIFVsdGltYXRlKEV2ZW50IFBsYXllcikgJiYgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpID4gNSkgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+IDQgfHwgSXMgVXNpbmcgVWx0aW1hdGUoRXZlbnQgUGxheWVyKSk7CgkJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQlFbHNlOwoJCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpKTsKCQlFbmQ7CgkJV2FpdCgxLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgR2Vuamk6IEp1bXAiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJR2Vuamk7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSXNfdXNpbmdfQ29tYmF0X1BhdGhmaW5kaW5nID09IFRydWU7CgkJSXMgT24gR3JvdW5kKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKEp1bXApKTsKCQlXYWl0KDAuNTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oSnVtcCkpOwoJCVdhaXQoUmFuZG9tIFJlYWwoMC44MDAsIDEuMjAwKSwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIEdlbmppOiBTd2lmdCBTdHJpa2UiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJR2Vuamk7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDQ7CgkJRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgPT0gVHJ1ZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gMTA7CgkJQWJzb2x1dGUgVmFsdWUoSG9yaXpvbnRhbCBBbmdsZSBUb3dhcmRzKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkpIDw9IDU7CgkJSXMgVXNpbmcgQWJpbGl0eSAyKEV2ZW50IFBsYXllcikgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihBYmlsaXR5IDEpKTsKCQlXYWl0KDQsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBHZW5qaTogRGVmbGVjdCIpCnsKCWV2ZW50Cgl7CgkJUGxheWVyIFRvb2sgRGFtYWdlOwoJCVRlYW0gMTsKCQlHZW5qaTsKCX0KCgljb25kaXRpb25zCgl7CgkJSXMgVXNpbmcgVWx0aW1hdGUoRXZlbnQgUGxheWVyKSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA+IDMwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAyKSk7CgkJV2FpdCgxMCwgSWdub3JlIENvbmRpdGlvbik7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBHZW5qaTogRHJhZ29uYmxhZGUiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJR2Vuamk7Cgl9CgoJY29uZGl0aW9ucwoJewoJCU5vcm1hbGl6ZWQgSGVhbHRoKEV2ZW50IFBsYXllcikgPD0gMC41MDA7CgkJSGVhbHRoKEV2ZW50IFBsYXllcikgIT0gMDsKCQlJcyBVc2luZyBVbHRpbWF0ZShFdmVudCBQbGF5ZXIpID09IEZhbHNlOwoJfQoKCWFjdGlvbnMKCXsKCQlTZXQgVWx0aW1hdGUgQ2hhcmdlKEV2ZW50IFBsYXllciwgMTAwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oVWx0aW1hdGUpKTsKCQlXYWl0KDAuNTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgSGFuem86IFNob290IikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUhhbnpvOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJfQoKCWFjdGlvbnMKCXsKCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQlXYWl0KDAuODAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlTdG9wIEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCVdhaXQoMC42MDAsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBIYW56bzogTHVuZ2UiKQp7CglldmVudAoJewoJCVBsYXllciBUb29rIERhbWFnZTsKCQlUZWFtIDE7CgkJSGFuem87Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc191c2luZ19Db21iYXRfUGF0aGZpbmRpbmcgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJQWJvcnQgSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA+IDUwKTsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oSnVtcCkpOwoJCVdhaXQoMC40MDAsIElnbm9yZSBDb25kaXRpb24pOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihKdW1wKSk7CgkJV2FpdCg2LCBJZ25vcmUgQ29uZGl0aW9uKTsKCX0KfQoKcnVsZSgiVGVhbSAxIEhhbnpvOiBTdG9ybSBBcnJvd3MiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJSGFuem87Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA8PSAwLjUwMDsKCQlIZWFsdGgoRXZlbnQgUGxheWVyKSAhPSAwOwoJCUlzIFVzaW5nIEFiaWxpdHkgMihFdmVudCBQbGF5ZXIpID09IEZhbHNlOwoJfQoKCWFjdGlvbnMKCXsKCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAyKSk7CgkJV2FpdCgwLjUwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIEhhbnpvOiBEcmFnb25zdHJpa2UiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJSGFuem87Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA9PSBGYWxzZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gMTU7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMSwgQWJvcnQgV2hlbiBGYWxzZSk7CgkJU2V0IFVsdGltYXRlIENoYXJnZShFdmVudCBQbGF5ZXIsIDEwMCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFVsdGltYXRlKSk7CgkJV2FpdCg0NSwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIEJhc3Rpb246IFVzZSBVbHRpbWF0ZSAoMSksIFVzZSBTZW50cnkgTW9kZSAoMiksIFNldCBVbmtpbGxhYmxlIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCUJhc3Rpb247Cgl9CgoJY29uZGl0aW9ucwoJewoJCUlzIEFsaXZlKEV2ZW50IFBsYXllcikgPT0gVHJ1ZTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8yID0gRmFsc2U7CgkJQWJvcnQgSWYoRXZlbnQgUGxheWVyLkFiX1Zhcl8xKTsKCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgVW5raWxsYWJsZSwgOTk5OSk7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBCYXN0aW9uOiBTaG9vdCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlCYXN0aW9uOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSAzOwoJfQoKCWFjdGlvbnMKCXsKCQlJZihJcyBVc2luZyBVbHRpbWF0ZShFdmVudCBQbGF5ZXIpKTsKCQkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFByaW1hcnkgRmlyZSkpOwoJCQlXYWl0KDEuMTAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlFbHNlOwoJCQlTdGFydCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQkJV2FpdChSYW5kb20gUmVhbCgxLjYwMCwgMi40MDApLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQkJU3RvcCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCQkJSWYoQW1tbyhFdmVudCBQbGF5ZXIsIDApIDw9IDggfHwgQW1tbyhFdmVudCBQbGF5ZXIsIDEpIDw9IDMwKTsKCQkJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihSZWxvYWQpKTsKCQkJRW5kOwoJCQlXYWl0KFJhbmRvbSBSZWFsKDAuNDAwLCAwLjYwMCksIElnbm9yZSBDb25kaXRpb24pOwoJCUVuZDsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJUZWFtIDEgQmFzdGlvbjogU2V0IC8gVW5zZXQgVXNlIFNlbnRyeSBNb2RlICgyKSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlCYXN0aW9uOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSAzOwoJCUV2ZW50IFBsYXllci5Jc19hc3NhdWx0aW5nID09IFRydWU7CgkJSXMgVXNpbmcgVWx0aW1hdGUoRXZlbnQgUGxheWVyKSA9PSBGYWxzZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gMjA7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMi41MDAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9IFRydWU7CgkJV2FpdCBVbnRpbChFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA8IDMsIDUpOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9IEZhbHNlOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBCYXN0aW9uOiBSZWNvbmZpZ3VyZSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlCYXN0aW9uOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlJcyBBbGl2ZShFdmVudCBQbGF5ZXIpID09IFRydWU7CgkJSXMgVXNpbmcgVWx0aW1hdGUoRXZlbnQgUGxheWVyKSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJSWYoRXZlbnQgUGxheWVyLkFiX1Zhcl8yICE9IElzIEluIEFsdGVybmF0ZSBGb3JtKEV2ZW50IFBsYXllcikpOwoJCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oQWJpbGl0eSAxKSk7CgkJRW5kOwoJCVdhaXQoMC41MDAsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBCYXN0aW9uOiBIZWFsdGggcmVhY2hlcyAxLCBTZXQgVXNlIFVsdGltYXRlICgxKSwgSGVhbCwgQ2xlYXIgVW5raWxsYWJsZSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlCYXN0aW9uOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlIZWFsdGgoRXZlbnQgUGxheWVyKSA9PSAxOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8xID0gVHJ1ZTsKCQlTdGFydCBIZWFsIE92ZXIgVGltZShFdmVudCBQbGF5ZXIsIE51bGwsIDEuNTAwLCBNYXggSGVhbHRoKEV2ZW50IFBsYXllcikpOwoJCVdhaXQoMS41MDAsIElnbm9yZSBDb25kaXRpb24pOwoJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFVua2lsbGFibGUpOwoJfQp9CgpydWxlKCJUZWFtIDEgQmFzdGlvbjogQ29uZmlndXJhdGlvbjogVGFuayIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlCYXN0aW9uOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlJcyBBbGl2ZShFdmVudCBQbGF5ZXIpID09IFRydWU7CgkJRXZlbnQgUGxheWVyLkFiX1Zhcl8xID09IFRydWU7CgkJSXMgVXNpbmcgVWx0aW1hdGUoRXZlbnQgUGxheWVyKSA9PSBGYWxzZTsKCX0KCglhY3Rpb25zCgl7CgkJU2V0IFVsdGltYXRlIENoYXJnZShFdmVudCBQbGF5ZXIsIDEwMCk7CgkJUHJlc3MgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFVsdGltYXRlKSk7CgkJV2FpdCgwLjUwMCwgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAxIFJlaW5oYXJkdDogRGlzYWJsZSBCYXJyaWVyIEZpZWxkIGFmdGVyIGJyZWFraW5nIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVJlaW5oYXJkdDsKCX0KCgljb25kaXRpb25zCgl7CgkJQWJpbGl0eSBDb29sZG93bihFdmVudCBQbGF5ZXIsIEJ1dHRvbihTZWNvbmRhcnkgRmlyZSkpID4gMDsKCX0KCglhY3Rpb25zCgl7CgkJU2V0IEFiaWxpdHkgQ29vbGRvd24oRXZlbnQgUGxheWVyLCBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpLCAxMDAwKTsKCX0KfQoKcnVsZSgiVGVhbSAxIFJlaW5oYXJkdDogSG9sZCAvIERyb3AgU2hpZWxkIGlmIFRhcmdldCBhbmQgRGlzdGFuY2UgdG8gVGFyZ2V0ID49IDVtIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVJlaW5oYXJkdDsKCX0KCgljb25kaXRpb25zCgl7CgkJRXZlbnQgUGxheWVyLklzX1RhcmdldF9pbl9MT1MgPT0gVHJ1ZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gNTsKCQkiUmVpbmhhcmR0IHdvbid0IGF1dG9tYXRpY2FsbHkgcmFpc2UgaGlzIHNoaWVsZCBhZ2FpbiBhZnRlciBjaGFyZ2luZyBvciBiZWluZyBoYWNrZWQiCgkJSXMgVXNpbmcgQWJpbGl0eSAxKEV2ZW50IFBsYXllcikgPT0gRmFsc2U7CgkJSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIEhhY2tlZCkgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVN0YXJ0IEhvbGRpbmcgQnV0dG9uKEV2ZW50IFBsYXllciwgQnV0dG9uKFNlY29uZGFyeSBGaXJlKSk7CgkJV2FpdCBVbnRpbCghKEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TICYmIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+PSA1ICYmICFJcyBVc2luZyBBYmlsaXR5IDEoCgkJCUV2ZW50IFBsYXllcikgJiYgIUhhcyBTdGF0dXMoRXZlbnQgUGxheWVyLCBIYWNrZWQpKSwgOTk5OTkpOwoJCVN0b3AgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oU2Vjb25kYXJ5IEZpcmUpKTsKCX0KfQoKcnVsZSgiVGVhbSAxIFJlaW5oYXJkdDogU3RhcnQgLyBTdG9wIEF0dGFja2luZyBpZiBEaXN0YW5jZSB0byBUYXJnZXQgPCA1bSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlSZWluaGFyZHQ7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID09IFRydWU7CgkJRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5UYXJnZXQpIDwgNTsKCX0KCglhY3Rpb25zCgl7CgkJU3RhcnQgSG9sZGluZyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oUHJpbWFyeSBGaXJlKSk7CgkJV2FpdCBVbnRpbCghKEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TICYmIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA8IDUpLCA5OTk5OSk7CgkJU3RvcCBIb2xkaW5nIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihQcmltYXJ5IEZpcmUpKTsKCX0KfQoKcnVsZSgiVGVhbSAxIFJlaW5oYXJkdDogRmlyZSBTdHJpa2UiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJUmVpbmhhcmR0OwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlFdmVudCBQbGF5ZXIuSXNfVGFyZ2V0X2luX0xPUyA+PSA0OwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDIsIElnbm9yZSBDb25kaXRpb24pOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlMb29wIElmKFJhbmRvbSBJbnRlZ2VyKDEsIDEwMCkgPiA3NSk7CgkJTG9vcCBJZihEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPD0gNSB8fCBEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkgPj0gMjUpOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihBYmlsaXR5IDIpKTsKCQlXYWl0KDUsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBSZWluaGFyZHQ6IENoYXJnZSIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlSZWluaGFyZHQ7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDU7CgkJRXZlbnQgUGxheWVyLklzX2Fzc2F1bHRpbmcgPT0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuVGFyZ2V0Lkxhc3RfVGltZV9oaXRfYnlfU2hhdHRlciArIDEgPj0gVG90YWwgVGltZSBFbGFwc2VkOwoJCUV2ZW50IFBsYXllci5UYXJnZXQuTGFzdF9UaW1lX2hpdF9ieV9TaGF0dGVyICsgMC4zMDAgPCBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJQWJzb2x1dGUgVmFsdWUoSG9yaXpvbnRhbCBBbmdsZSBUb3dhcmRzKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLlRhcmdldCkpIDw9IDU7Cgl9CgoJYWN0aW9ucwoJewoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihBYmlsaXR5IDEpKTsKCQlXYWl0KDYsIElnbm9yZSBDb25kaXRpb24pOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIlRlYW0gMSBSZWluaGFyZHQ6IEVhcnRoc2hhdHRlciIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlSZWluaGFyZHQ7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID49IDU7CgkJRXZlbnQgUGxheWVyLlRhcmdldC5Jc19mbHlpbmcgPT0gRmFsc2U7CgkJSXMgRmlyaW5nIFNlY29uZGFyeShFdmVudCBQbGF5ZXIpID09IEZhbHNlOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KDEsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUxvb3AgSWYoUmFuZG9tIEludGVnZXIoMSwgMTAwKSA8PSAxMDAgKiBOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIpKTsKCQlMb29wIElmKERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuVGFyZ2V0KSA+PSAxOCB8fCBBYnNvbHV0ZSBWYWx1ZShIb3Jpem9udGFsIEFuZ2xlIFRvd2FyZHMoRXZlbnQgUGxheWVyLAoJCQlFdmVudCBQbGF5ZXIuVGFyZ2V0KSkgPj0gMzApOwoJCVNldCBVbHRpbWF0ZSBDaGFyZ2UoRXZlbnQgUGxheWVyLCAxMDApOwoJCVByZXNzIEJ1dHRvbihFdmVudCBQbGF5ZXIsIEJ1dHRvbihVbHRpbWF0ZSkpOwoJCVdhaXQoNywgSWdub3JlIENvbmRpdGlvbik7CgkJTG9vcCBJZiBDb25kaXRpb24gSXMgVHJ1ZTsKCX0KfQoKcnVsZSgiVGVhbSAyOiBJcyBTaGF0dGVyZWQsIFN0YXJ0IEFjY2VsZXJhdGluZyIpCnsKCWV2ZW50Cgl7CgkJUGxheWVyIFRvb2sgRGFtYWdlOwoJCVRlYW0gMjsKCQlBbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUhlcm8gT2YoQXR0YWNrZXIpID09IEhlcm8oUmVpbmhhcmR0KTsKCQlFdmVudCBBYmlsaXR5ID09IEJ1dHRvbihVbHRpbWF0ZSk7Cgl9CgoJYWN0aW9ucwoJewoJCVNldCBTdGF0dXMoRXZlbnQgUGxheWVyLCBOdWxsLCBTdHVubmVkLCAzKTsKCQlFdmVudCBQbGF5ZXIuTGFzdF9UaW1lX2hpdF9ieV9TaGF0dGVyID0gVG90YWwgVGltZSBFbGFwc2VkOwoJCUFwcGx5IEltcHVsc2UoRXZlbnQgUGxheWVyLCBEaXJlY3Rpb24gRnJvbSBBbmdsZXMoSG9yaXpvbnRhbCBBbmdsZSBGcm9tIERpcmVjdGlvbihFdmVudCBEaXJlY3Rpb24pLCAzMCksIDE1LCBUbyBXb3JsZCwKCQkJQ2FuY2VsIENvbnRyYXJ5IE1vdGlvbiBYWVopOwoJCVN0YXJ0IEFjY2VsZXJhdGluZyhFdmVudCBQbGF5ZXIsIERpcmVjdGlvbiBGcm9tIEFuZ2xlcyhIb3Jpem9udGFsIEFuZ2xlIEZyb20gRGlyZWN0aW9uKEV2ZW50IERpcmVjdGlvbiksIDMwKSwgSXMgSW4gQWlyKAoJCQlFdmVudCBQbGF5ZXIpID8gMTAwIDogKDEgLSAoVG90YWwgVGltZSBFbGFwc2VkIC0gRXZlbnQgUGxheWVyLkxhc3RfVGltZV9oaXRfYnlfU2hhdHRlcikpICogNTAwLCAxNSwgVG8gV29ybGQsCgkJCURpcmVjdGlvbiBSYXRlIGFuZCBNYXggU3BlZWQpOwoJCVdhaXQoMSwgUmVzdGFydCBXaGVuIFRydWUpOwoJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFN0dW5uZWQpOwoJCVN0b3AgQWNjZWxlcmF0aW5nKEV2ZW50IFBsYXllcik7Cgl9Cn0KCnJ1bGUoIklWIEhWVCBUZWFtIDEgU2xvdCA2OiBDcmVhdGUgUG9ydGFsIC8gSFZUIEVudGl0aWVzLCBTdGFydCBEYW1hZ2UgTW9kaWZpY2F0aW9ucyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlTbG90IDY7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKEdsb2JhbC5HYW1lbW9kZSA9PSAxKTsKCQkJQ3JlYXRlIFByb2dyZXNzIEJhciBIVUQgVGV4dChHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMSB8fCBHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMiA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykKCQkJCTogRW1wdHkgQXJyYXksIEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAxID8gMjAwICogTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA6IEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1RpbWVyLAoJCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgPyBDdXN0b20gU3RyaW5nKCJEZXN0cm95IHRoZSBQb3J0YWwiKSA6IEN1c3RvbSBTdHJpbmcoIlBvcnRhbCBjbG9zaW5nIiksIFRvcCwgLTk3LAoJCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgPyAoR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyA/IENvbG9yKFdoaXRlKSA6IEN1c3RvbSBDb2xvcihNYXgoMjAwLCAyNTUgLSAoCgkJCQlUb3RhbCBUaW1lIEVsYXBzZWQgLSBFdmVudCBQbGF5ZXIuQWJfVmFyXzIgLSAxMCkgKiAxNjUpLCBNYXgoMCwgMjU1IC0gKFRvdGFsIFRpbWUgRWxhcHNlZCAtIEV2ZW50IFBsYXllci5BYl9WYXJfMiAtIDEwKSAqIDc2NSksCgkJCQlNYXgoMTksIDI1NSAtIChUb3RhbCBUaW1lIEVsYXBzZWQgLSBFdmVudCBQbGF5ZXIuQWJfVmFyXzIgLSAxMCkgKiA3MDgpLCAyNTUpKSA6IENvbG9yKFllbGxvdyksIENvbG9yKFdoaXRlKSwKCQkJCVZpc2libGUgVG8gVmFsdWVzIGFuZCBDb2xvciwgRGVmYXVsdCBWaXNpYmlsaXR5KTsKCQkJQ3JlYXRlIEljb24oR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgfHwgR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIgPyBBbGwgUGxheWVycyhBbGwgVGVhbXMpIDogRW1wdHkgQXJyYXksCgkJCQlHbG9iYWwuSVZfT2JqZWN0aXZlX1Bvc2l0aW9uICsgMiAqIFVwLCBFeGNsYW1hdGlvbiBNYXJrLCBWaXNpYmxlIFRvIGFuZCBQb3NpdGlvbiwgQ29sb3IoWWVsbG93KSwgVHJ1ZSk7CgkJCUNyZWF0ZSBJbi1Xb3JsZCBUZXh0KEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAxIHx8IEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAyID8gQWxsIFBsYXllcnMoQWxsIFRlYW1zKQoJCQkJOiBFbXB0eSBBcnJheSwgR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgPyBDdXN0b20gU3RyaW5nKCJEZXN0cm95IHRoZSBQb3J0YWwiKSA6IEN1c3RvbSBTdHJpbmcoIlBvcnRhbCBjbG9zaW5nIiksCgkJCQlHbG9iYWwuSVZfT2JqZWN0aXZlX1Bvc2l0aW9uICsgMS43MDAgKiBVcCwgMS41MDAsIERvIE5vdCBDbGlwLCBWaXNpYmxlIFRvIFBvc2l0aW9uIGFuZCBTdHJpbmcsIENvbG9yKFllbGxvdyksCgkJCQlEZWZhdWx0IFZpc2liaWxpdHkpOwoJCQlDcmVhdGUgRWZmZWN0KEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAxIHx8IEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAyID8gQWxsIFBsYXllcnMoQWxsIFRlYW1zKSA6IEVtcHR5IEFycmF5LAoJCQkJU3BoZXJlLCBHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMSA/IENvbG9yKFJlZCkgOiBDb2xvcihZZWxsb3cpLCBHbG9iYWwuSVZfT2JqZWN0aXZlX1Bvc2l0aW9uICsgMS4xMTAgKiBVcCwgMC44NTAgKyAoCgkJCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMSA/IDAgOiAwLjMwMCAqIFNpbmUgRnJvbSBSYWRpYW5zKDYgKiBUb3RhbCBUaW1lIEVsYXBzZWQpKSwKCQkJCVZpc2libGUgVG8gUG9zaXRpb24gUmFkaXVzIGFuZCBDb2xvcik7CgkJCUNyZWF0ZSBFZmZlY3QoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgfHwgR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIgPyBBbGwgUGxheWVycyhBbGwgVGVhbXMpIDogRW1wdHkgQXJyYXksCgkJCQlCYWQgQXVyYSwgQ29sb3IoUmVkKSwgR2xvYmFsLklWX09iamVjdGl2ZV9Qb3NpdGlvbiArIDEuMTEwICogVXAsIDEsIFZpc2libGUgVG8gUG9zaXRpb24gYW5kIFJhZGl1cyk7CgkJCUNyZWF0ZSBFZmZlY3QoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgJiYgKAoJCQkJRXZlbnQgUGxheWVyLkFiX1Zhcl8yICsgMTAgPj0gVG90YWwgVGltZSBFbGFwc2VkIHx8IEdsb2JhbC5Cb3NzX1NwYXduc19yZW1haW5pbmcpID8gQWxsIFBsYXllcnMoQWxsIFRlYW1zKSA6IEVtcHR5IEFycmF5LAoJCQkJTGlnaHQgU2hhZnQsIENvbG9yKFdoaXRlKSwgR2xvYmFsLklWX09iamVjdGl2ZV9Qb3NpdGlvbiAtIDIgKiBVcCwgMSwgVmlzaWJsZSBUbyBQb3NpdGlvbiBhbmQgUmFkaXVzKTsKCQlFbHNlIElmKEdsb2JhbC5HYW1lbW9kZSA9PSAyKTsKCQkJQ3JlYXRlIFByb2dyZXNzIEJhciBIVUQgVGV4dChHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMSB8fCBHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMiA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykKCQkJCTogRW1wdHkgQXJyYXksIEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAxID8gMTAwICogTm9ybWFsaXplZCBIZWFsdGgoRXZlbnQgUGxheWVyKSA6ICgKCQkJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPyBHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9UaW1lciA6IEV2ZW50IFBsYXllci5SZXZpdmVfVGltZXIpIC8gMS41MDAsCgkJCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMSA/IEN1c3RvbSBTdHJpbmcoIlN1YmR1ZSB0aGUgSGlnaCBWYWx1ZSBUYXJnZXQiKSA6ICgKCQkJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPyBDdXN0b20gU3RyaW5nKCJDYXB0dXJlIHRoZSBIaWdoIFZhbHVlIFRhcmdldCIpIDogQ3VzdG9tIFN0cmluZygKCQkJCSJIaWdoIFZhbHVlIFRhcmdldCBpcyBiZWluZyByZXZpdmVkIikpLCBUb3AsIC05NywgR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgPyBDdXN0b20gQ29sb3IoTWF4KDIwMCwgMjU1IC0gKAoJCQkJVG90YWwgVGltZSBFbGFwc2VkIC0gR2xvYmFsLkhWVF9DYWxsX1JlaW5mb3JjZW1lbnRzKSAqIDE2NSksIE1heCgwLCAyNTUgLSAoVG90YWwgVGltZSBFbGFwc2VkIC0gR2xvYmFsLkhWVF9DYWxsX1JlaW5mb3JjZW1lbnRzKQoJCQkJKiA3NjUpLCBNYXgoMTksIDI1NSAtIChUb3RhbCBUaW1lIEVsYXBzZWQgLSBHbG9iYWwuSFZUX0NhbGxfUmVpbmZvcmNlbWVudHMpICogNzA4KSwgMjU1KSA6IChFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID8gKAoJCQkJRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSA9PSAyID8gQ29sb3IoR3JlZW4pIDogQ29sb3IoV2hpdGUpKSA6IENvbG9yKFJlZCkpLCBHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMSA/IENvbG9yKFdoaXRlKQoJCQkJOiAoRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSA/IENvbG9yKFdoaXRlKSA6IENvbG9yKFllbGxvdykpLCBWaXNpYmxlIFRvIFZhbHVlcyBhbmQgQ29sb3IsIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCUNyZWF0ZSBJY29uKEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAxIHx8IEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAyID8gQWxsIFBsYXllcnMoQWxsIFRlYW1zKSA6IEVtcHR5IEFycmF5LAoJCQkJRXZlbnQgUGxheWVyLCBFeGNsYW1hdGlvbiBNYXJrLCBWaXNpYmxlIFRvLCBDb2xvcihZZWxsb3cpLCBUcnVlKTsKCQkJQ3JlYXRlIEluLVdvcmxkIFRleHQoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgfHwgR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIgPyBBbGwgUGxheWVycyhBbGwgVGVhbXMpCgkJCQk6IEVtcHR5IEFycmF5LCBHbG9iYWwuSFZUX0NhbGxfUmVpbmZvcmNlbWVudHMgPj0gVG90YWwgVGltZSBFbGFwc2VkID8gQ3VzdG9tIFN0cmluZygiQ2FsbGluZyBSZWluZm9yY2VtZW50cyIpIDogKAoJCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDEgPyBDdXN0b20gU3RyaW5nKCJTdWJkdWUgVGFyZ2V0IikgOiBDdXN0b20gU3RyaW5nKCJDYXB0dXJlIFRhcmdldCIpKSwgRXZlbnQgUGxheWVyLCAxLjUwMCwKCQkJCURvIE5vdCBDbGlwLCBWaXNpYmxlIFRvIGFuZCBTdHJpbmcsIENvbG9yKFllbGxvdyksIERlZmF1bHQgVmlzaWJpbGl0eSk7CgkJCUNyZWF0ZSBFZmZlY3QoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIgPyBBbGwgUGxheWVycyhBbGwgVGVhbXMpIDogRW1wdHkgQXJyYXksIFJpbmcsIEV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPyAoCgkJCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IDIgPyBDb2xvcihHcmVlbikgOiBDb2xvcihXaGl0ZSkpIDogQ29sb3IoUmVkKSwgUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSArIDAuNjUwICogVXAsIDEwLAoJCQkJVmlzaWJsZSBUbyBQb3NpdGlvbiBSYWRpdXMgYW5kIENvbG9yKTsKCQkJQ3JlYXRlIEVmZmVjdChHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMiA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwgUmluZywgRXZlbnQgUGxheWVyLkRvd25lZF9zaW5jZSA/ICgKCQkJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPT0gMiA/IENvbG9yKEdyZWVuKSA6IENvbG9yKFdoaXRlKSkgOiBDb2xvcihSZWQpLCBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpICsgMC42NTAgKiBEb3duLCAxMCwKCQkJCVZpc2libGUgVG8gUG9zaXRpb24gUmFkaXVzIGFuZCBDb2xvcik7CgkJCUNyZWF0ZSBFZmZlY3QoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIgPyBBbGwgUGxheWVycyhBbGwgVGVhbXMpIDogRW1wdHkgQXJyYXksIFJpbmcsIEV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPyAoCgkJCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID09IDIgPyBDb2xvcihHcmVlbikgOiBDb2xvcihXaGl0ZSkpIDogQ29sb3IoUmVkKSwgUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSwgKAoJCQkJVG90YWwgVGltZSBFbGFwc2VkICUgMS4zMzMgPCAwLjY2NikgKiAoMTUgKiBUb3RhbCBUaW1lIEVsYXBzZWQgJSAxMCksIFZpc2libGUgVG8gUG9zaXRpb24gUmFkaXVzIGFuZCBDb2xvcik7CgkJCUNyZWF0ZSBFZmZlY3QoR2xvYmFsLkhWVF9DYWxsX1JlaW5mb3JjZW1lbnRzID49IFRvdGFsIFRpbWUgRWxhcHNlZCA/IEFsbCBQbGF5ZXJzKEFsbCBUZWFtcykgOiBFbXB0eSBBcnJheSwgQ2xvdWQsIENvbG9yKFdoaXRlKSwKCQkJCUV2ZW50IFBsYXllciwgMywgVmlzaWJsZSBUbyk7CgkJCUZvciBHbG9iYWwgVmFyaWFibGUoVGVtcCwgMCwgMiwgMSk7CgkJCQlDcmVhdGUgRWZmZWN0KEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAyID8gRmlsdGVyZWQgQXJyYXkoR2xvYmFsLkNvbWJhdGFudHMsICFDdXJyZW50IEFycmF5IEVsZW1lbnQuRG93bmVkX3NpbmNlICYmICEoCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LklzX2ludmlzaWJsZSAlIDMpICYmIERpc3RhbmNlIEJldHdlZW4oRXZlbnQgUGxheWVyLCBWZWN0b3IoWCBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoCgkJCQkJQ3VycmVudCBBcnJheSBFbGVtZW50KSksIFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKEV2ZW50IFBsYXllcikpLCBaIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihDdXJyZW50IEFycmF5IEVsZW1lbnQpKSkpCgkJCQkJPD0gMTAgJiYgQWJzb2x1dGUgVmFsdWUoWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSkgLSBZIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihDdXJyZW50IEFycmF5IEVsZW1lbnQpKSkKCQkJCQk8PSA1ICYmIElzIEluIExpbmUgb2YgU2lnaHQoRXZlbnQgUGxheWVyLCBDdXJyZW50IEFycmF5IEVsZW1lbnQsIEJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpKSA6IEVtcHR5IEFycmF5LCBCZWFjb24gU291bmQsCgkJCQkJQ29sb3IoV2hpdGUpLCBFdmVudCBQbGF5ZXIsIDIwMCwgVmlzaWJsZSBUbyk7CgkJCUVuZDsKCQlFbmQ7CgkJIlNsb3QgNiB0byBQbGF5ZXJzIERhbWFnZSBJbmNyZWFzZSIKCQlTdGFydCBEYW1hZ2UgTW9kaWZpY2F0aW9uKEdsb2JhbC5Db21iYXRhbnRzLCBFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllci5Jc19MaXZpbmdfQm9zcyA/IDE0MCA6IDIyNSwKCQkJUmVjZWl2ZXJzIERhbWFnZXJzIGFuZCBEYW1hZ2UgUGVyY2VudCk7CgkJIkJvc3MgdG8gUGxheWVycyBEYW1hZ2UgRGVjcmVhc2UiCgkJU3RhcnQgRGFtYWdlIE1vZGlmaWNhdGlvbihHbG9iYWwuQ29tYmF0YW50cywgRmlsdGVyZWQgQXJyYXkoQWxsIFBsYXllcnMoVGVhbSAxKSwgQ3VycmVudCBBcnJheSBFbGVtZW50LklzX0xpdmluZ19Cb3NzKSwgNzUsCgkJCVJlY2VpdmVycyBhbmQgRGFtYWdlcnMpOwoJCSJTZW50cnkgQmFzdGlvbiBQbGF5ZXJzIHRvIEJvdHMgRGFtYWdlIERlY3JlYXNlIgoJCVN0YXJ0IERhbWFnZSBNb2RpZmljYXRpb24oQWxsIFBsYXllcnMoVGVhbSAxKSwgRmlsdGVyZWQgQXJyYXkoUGxheWVycyBPbiBIZXJvKEhlcm8oQmFzdGlvbiksIFRlYW0gMiksIElzIEluIEFsdGVybmF0ZSBGb3JtKAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQpICYmICFJcyBVc2luZyBVbHRpbWF0ZShDdXJyZW50IEFycmF5IEVsZW1lbnQpKSwgTWluKDEwMCwgMzAgKyA3ICogR2xvYmFsLldhdmUpLAoJCQlSZWNlaXZlcnMgRGFtYWdlcnMgYW5kIERhbWFnZSBQZXJjZW50KTsKCQlHbG9iYWwuSVZfSFZUX0RhbWFnZV9Nb2RzWzBdID0gTGFzdCBEYW1hZ2UgTW9kaWZpY2F0aW9uIElEOwoJCSJCb3RzIHRvIFRhbmsgUGxheWVycyBEYW1hZ2UgSW5jcmVhc2UiCgkJU3RhcnQgRGFtYWdlIE1vZGlmaWNhdGlvbihGaWx0ZXJlZCBBcnJheShHbG9iYWwuQ29tYmF0YW50cywgQXJyYXkgQ29udGFpbnMoQWxsIFRhbmsgSGVyb2VzLCBIZXJvIE9mKEN1cnJlbnQgQXJyYXkgRWxlbWVudCkpKSwKCQkJQWxsIFBsYXllcnMoVGVhbSAxKSwgTWF4KDEwMCwgMjAwIC0gMTAgKiBHbG9iYWwuV2F2ZSksIFJlY2VpdmVycyBEYW1hZ2VycyBhbmQgRGFtYWdlIFBlcmNlbnQpOwoJCUdsb2JhbC5JVl9IVlRfRGFtYWdlX01vZHNbMV0gPSBMYXN0IERhbWFnZSBNb2RpZmljYXRpb24gSUQ7Cgl9Cn0KCnJ1bGUoIklWIFRlYW0gMSBXcmVja2luZyBCYWxsOiBTdGFydCBQb3J0YWwgTW9kZSwgT3BlbiAoU3RhdHVzIDEpLCBMYXN0IEJyZWFrcG9pbnQgKDIpLCBTZXQgSGVhbHRoIHRvIGhhbGYgdG8gcmVtb3ZlIGFybW9yIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVdyZWNraW5nIEJhbGw7Cgl9CgoJYWN0aW9ucwoJewoJCUdsb2JhbC5JVl9PYmplY3RpdmVfUG9zaXRpb24gPSBSYW5kb20gVmFsdWUgSW4gQXJyYXkoUmVtb3ZlIEZyb20gQXJyYXkoR2xvYmFsLk9iamVjdGl2ZV9TcGF3bnMsIEdsb2JhbC5JVl9PYmplY3RpdmVfUG9zaXRpb24pKTsKCQlTdGFydCBGb3JjaW5nIFBsYXllciBQb3NpdGlvbihFdmVudCBQbGF5ZXIsIEdsb2JhbC5JVl9PYmplY3RpdmVfUG9zaXRpb24sIEZhbHNlKTsKCQlEaXNhYmxlIE1vdmVtZW50IENvbGxpc2lvbiBXaXRoIEVudmlyb25tZW50KEV2ZW50IFBsYXllciwgVHJ1ZSk7CgkJU2V0IEludmlzaWJsZShFdmVudCBQbGF5ZXIsIEFsbCk7CgkJU2V0IFN0YXR1cyhFdmVudCBQbGF5ZXIsIE51bGwsIFVua2lsbGFibGUsIDk5OTkpOwoJCUV2ZW50IFBsYXllci5BYl9WYXJfMiA9IC0xMDA7CgkJU2V0IFBsYXllciBIZWFsdGgoRXZlbnQgUGxheWVyLCAwLjUwMCAqIE1heCBIZWFsdGgoRXZlbnQgUGxheWVyKSk7Cgl9Cn0KCnJ1bGUoIklWIFN1YnJvdXRpbmU6IERlZmVuZCBQb3J0YWwsIEN1cnJlbnQgUGxheWVyIChQbGF5ZXIpLCBMYXN0IEJyZWFrcG9pbnQgKDIpIikKewoJZXZlbnQKCXsKCQlTdWJyb3V0aW5lOwoJCUlWX0RlZmVuZF9Qb3J0YWw7Cgl9CgoJYWN0aW9ucwoJewoJCUdsb2JhbC5Cb3NzX1NwYXduc19yZW1haW5pbmcgKz0gR2xvYmFsLldhdmUgPj0gNSA/IDIgOiAxOwoJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nID0gVHJ1ZTsKCQlFdmVudCBQbGF5ZXIuQWJfVmFyXzIgPSBUb3RhbCBUaW1lIEVsYXBzZWQ7CgkJRXZlbnQgUGxheWVyLkFiX1BsYXllciA9IEZpbHRlcmVkIEFycmF5KFBsYXllcnMgV2l0aGluIFJhZGl1cyhHbG9iYWwuSVZfT2JqZWN0aXZlX1Bvc2l0aW9uLCAxMCwgVGVhbSAyLCBTdXJmYWNlcyksCgkJCUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Jc19Db21iYXRhbnQgJiYgIUhhcyBTdGF0dXMoQ3VycmVudCBBcnJheSBFbGVtZW50LCBQaGFzZWQgT3V0KSAmJiBJcyBJbiBMaW5lIG9mIFNpZ2h0KEV2ZW50IFBsYXllciwKCQkJQ3VycmVudCBBcnJheSBFbGVtZW50LCBFbmVteSBCYXJyaWVycyBCbG9jayBMT1MpKTsKCQlGb3IgR2xvYmFsIFZhcmlhYmxlKFRlbXAsIDAsIENvdW50IE9mKEV2ZW50IFBsYXllci5BYl9QbGF5ZXIpLCAxKTsKCQkJQXBwbHkgSW1wdWxzZShFdmVudCBQbGF5ZXIuQWJfUGxheWVyW0dsb2JhbC5UZW1wXSwgRGlyZWN0aW9uIEZyb20gQW5nbGVzKEhvcml6b250YWwgQW5nbGUgRnJvbSBEaXJlY3Rpb24oVmVjdG9yIFRvd2FyZHMoCgkJCQlHbG9iYWwuSVZfT2JqZWN0aXZlX1Bvc2l0aW9uLCBFdmVudCBQbGF5ZXIuQWJfUGxheWVyW0dsb2JhbC5UZW1wXSkpLCAtMjApLCAxNSwgVG8gV29ybGQsIENhbmNlbCBDb250cmFyeSBNb3Rpb24gWFlaKTsKCQlFbmQ7CgkJR2xvYmFsLlRlbXAgPSBSYW5kb20gSW50ZWdlcigwLCA1KTsKCQlJZihHbG9iYWwuVGVtcCA9PSA1ICYmIEdsb2JhbC5XYXZlID49IDcpOwoJCQlFdmVudCBQbGF5ZXIuQWJfUGxheWVyLlRhc2VkX3VudGlsID0gVG90YWwgVGltZSBFbGFwc2VkICsgMTsKCQkJUGxheSBFZmZlY3QoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQmFkIEV4cGxvc2lvbiwgQ29sb3IoUHVycGxlKSwgR2xvYmFsLklWX09iamVjdGl2ZV9Qb3NpdGlvbiArIDEuMTEwICogVXAsIDEwKTsKCQlFbHNlIElmKEdsb2JhbC5UZW1wID09IDQgJiYgR2xvYmFsLldhdmUgPj0gNCk7CgkJCVNldCBVbHRpbWF0ZSBDaGFyZ2UoRXZlbnQgUGxheWVyLCAxMDApOwoJCQlQcmVzcyBCdXR0b24oRXZlbnQgUGxheWVyLCBCdXR0b24oVWx0aW1hdGUpKTsKCQkJUGxheSBFZmZlY3QoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQmFkIEV4cGxvc2lvbiwgQ29sb3IoUmVkKSwgR2xvYmFsLklWX09iamVjdGl2ZV9Qb3NpdGlvbiArIDEuMTEwICogVXAsIDEwKTsKCQlFbHNlOwoJCQlQbGF5IEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBCYWQgRXhwbG9zaW9uLCBDb2xvcihSZWQpLCBHbG9iYWwuSVZfT2JqZWN0aXZlX1Bvc2l0aW9uICsgMS4xMTAgKiBVcCwgMTApOwoJCUVuZDsKCQlQbGF5IEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBFeHBsb3Npb24gU291bmQsIENvbG9yKFdoaXRlKSwgRXZlbnQgUGxheWVyLCAyMDApOwoJfQp9CgpydWxlKCJJViBUZWFtIDEgV3JlY2tpbmcgQmFsbDogSGVhbHRoIHJlYWNoZXMgQnJlYWtwb2ludCwgSGVhbHRoIHJlYWNoZXMgMSAtPiBQb3J0YWwgQ2xvc2luZyAoU3RhdHVzIDIpIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVdyZWNraW5nIEJhbGw7Cgl9CgoJY29uZGl0aW9ucwoJewoJCU5vcm1hbGl6ZWQgSGVhbHRoKEV2ZW50IFBsYXllcikgPD0gMC4zMzM7CgkJSGVhbHRoKEV2ZW50IFBsYXllcikgIT0gMDsKCX0KCglhY3Rpb25zCgl7CgkJR2xvYmFsLk1vbmV5ICs9IEdsb2JhbC5NdXRhdG9yc19hY3RpdmF0ZWQgPyAxMjAgOiA2MDsKCQlTZXQgUGxheWVyIEhlYWx0aChFdmVudCBQbGF5ZXIsIDAuMzMzICogTWF4IEhlYWx0aChFdmVudCBQbGF5ZXIpKTsKCQlDYWxsIFN1YnJvdXRpbmUoSVZfRGVmZW5kX1BvcnRhbCk7CgkJV2FpdCBVbnRpbChOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIpIDw9IDAuMTY2LCA5OTk5OSk7CgkJR2xvYmFsLk1vbmV5ICs9IEdsb2JhbC5NdXRhdG9yc19hY3RpdmF0ZWQgPyAxMjAgOiA2MDsKCQlTZXQgUGxheWVyIEhlYWx0aChFdmVudCBQbGF5ZXIsIDAuMTY2ICogTWF4IEhlYWx0aChFdmVudCBQbGF5ZXIpKTsKCQlDYWxsIFN1YnJvdXRpbmUoSVZfRGVmZW5kX1BvcnRhbCk7CgkJV2FpdCBVbnRpbChIZWFsdGgoRXZlbnQgUGxheWVyKSA9PSAxLCA5OTk5OSk7CgkJR2xvYmFsLlVwZ3JhZGVfQ291bnRlciArPSAxOwoJCVNldCBIZWFsaW5nIFJlY2VpdmVkKEFsbCBQbGF5ZXJzKFRlYW0gMiksIDEwMCArIDIgKiBSb3VuZCBUbyBJbnRlZ2VyKEdsb2JhbC5VcGdyYWRlX0NvdW50ZXIgKiA3IC8gMywgRG93bikpOwoJCVN0YXJ0IEhlYWwgT3ZlciBUaW1lKEFsbCBQbGF5ZXJzKFRlYW0gMiksIE51bGwsIDEsIDEwMDAwKTsKCQlQbGF5IEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBCYWQgRXhwbG9zaW9uLCBDb2xvcihSZWQpLCBHbG9iYWwuSVZfT2JqZWN0aXZlX1Bvc2l0aW9uICsgMS4xMTAgKiBVcCwgMTApOwoJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEV4cGxvc2lvbiBTb3VuZCwgQ29sb3IoV2hpdGUpLCBFdmVudCBQbGF5ZXIsIDIwMCk7CgkJQmlnIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiUG9ydGFsIGlzIGNsb3NpbmchIEdhaW5lZCBib251cyBoZWFsdGgiKSk7CgkJU2V0IFN0YXR1cyhFdmVudCBQbGF5ZXIsIE51bGwsIFBoYXNlZCBPdXQsIDUuNTAwKTsKCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPSAyOwoJCUdsb2JhbC5Nb25leSArPSBHbG9iYWwuTXV0YXRvcnNfYWN0aXZhdGVkID8gMTIwIDogNjA7CgkJV2FpdCg1LCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlTZXQgRW52aXJvbm1lbnQgQ3JlZGl0IFBsYXllcihFdmVudCBQbGF5ZXIsIEV2ZW50IFBsYXllcik7CgkJU3RvcCBGb3JjaW5nIFBsYXllciBQb3NpdGlvbihFdmVudCBQbGF5ZXIpOwoJCUVuYWJsZSBNb3ZlbWVudCBDb2xsaXNpb24gV2l0aCBFbnZpcm9ubWVudChFdmVudCBQbGF5ZXIpOwoJCVdhaXQoMC4yNTAsIElnbm9yZSBDb25kaXRpb24pOwoJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFVua2lsbGFibGUpOwoJCVRlbGVwb3J0KEV2ZW50IFBsYXllciwgMTAwMCAqIERvd24pOwoJCVNldCBJbnZpc2libGUoRXZlbnQgUGxheWVyLCBOb25lKTsKCX0KfQoKcnVsZSgiSVYgVGVhbSAxIFNsb3QgNjogUG9ydGFsIENsb3NpbmcgKFN0YXR1cyAyKSAtPiBQb3J0YWwgQ2xvc2VkIChTdGF0dXMgMykiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJU2xvdCA2OwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuR2FtZW1vZGUgPT0gMTsKCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMjsKCX0KCglhY3Rpb25zCgl7CgkJSWYoR2xvYmFsLldhdmUgPj0gMTApOwoJCQlHbG9iYWwuQm9zc19TcGF3bnNfcmVtYWluaW5nICs9IDE7CgkJRW5kOwoJCUdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1RpbWVyID0gMTAwOwoJCUNoYXNlIEdsb2JhbCBWYXJpYWJsZSBPdmVyIFRpbWUoSVZfSFZUX09iamVjdGl2ZV9UaW1lciwgMCwgMTAsIERlc3RpbmF0aW9uIGFuZCBEdXJhdGlvbik7CgkJV2FpdCg4LCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlHbG9iYWwuU3Bhd25zX3JlbWFpbmluZyA9IFRydWU7CgkJV2FpdCgxLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlHbG9iYWwuSVZfSFZUX1NwYXduX1Nsb3RfU2l4ID0gVHJ1ZTsKCQlXYWl0KDEsIElnbm9yZSBDb25kaXRpb24pOwoJCVN0b3AgQ2hhc2luZyBHbG9iYWwgVmFyaWFibGUoSVZfSFZUX09iamVjdGl2ZV9UaW1lcik7CgkJQmlnIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiS2lsbCB0aGUgcmVtYWluaW5nIGVuZW1pZXMhIikpOwoJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nID0gRmFsc2U7CgkJR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyA9IDA7CgkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID0gMzsKCX0KfQoKcnVsZSgiSVYgVGVhbSAxIFdyZWNraW5nIEJhbGw6IFNldCBCcmVha3BvaW50IERhbWFnZSBSZWR1Y3Rpb24iKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJV3JlY2tpbmcgQmFsbDsKCX0KCgljb25kaXRpb25zCgl7CgkJKEV2ZW50IFBsYXllci5BYl9WYXJfMiArIDEwID49IFRvdGFsIFRpbWUgRWxhcHNlZCB8fCBHbG9iYWwuQm9zc19TcGF3bnNfcmVtYWluaW5nKSA9PSBUcnVlOwoJfQoKCWFjdGlvbnMKCXsKCQlTZXQgRGFtYWdlIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgMTApOwoJCVdhaXQgVW50aWwoIShFdmVudCBQbGF5ZXIuQWJfVmFyXzIgKyAxMCA+PSBUb3RhbCBUaW1lIEVsYXBzZWQgfHwgR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyksIDk5OTk5KTsKCQlTZXQgRGFtYWdlIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgMTAwKTsKCX0KfQoKcnVsZSgiSVYgVGVhbSAxIFdyZWNraW5nIEJhbGw6IFdyZWNraW5nIEJhbGwgaXMgQ2hhcmdlZCIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlXcmVja2luZyBCYWxsOwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMTsKCQlIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgU3R1bm5lZCkgPT0gVHJ1ZTsKCQlEaXN0YW5jZSBCZXR3ZWVuKEV2ZW50IFBsYXllciwgR2xvYmFsLklWX09iamVjdGl2ZV9Qb3NpdGlvbikgPiAyOwoJfQoKCWFjdGlvbnMKCXsKCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIEdsb2JhbC5JVl9PYmplY3RpdmVfUG9zaXRpb24pOwoJfQp9CgpydWxlKCJIVlQgVGVhbSAxIFNsb3QgNjogSFZUIHN1YmR1ZWQgZmFsbGJhY2siKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJU2xvdCA2OwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuR2FtZW1vZGUgPT0gMjsKCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMjsKCQlIYXMgU3RhdHVzKEV2ZW50IFBsYXllciwgU3R1bm5lZCkgPT0gRmFsc2U7Cgl9CgoJYWN0aW9ucwoJewoJCVdhaXQoMC4yNTAsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlXaGlsZShHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMiAmJiAhSGFzIFN0YXR1cyhFdmVudCBQbGF5ZXIsIFN0dW5uZWQpKTsKCQkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgUGhhc2VkIE91dCk7CgkJCVNldCBTdGF0dXMoRXZlbnQgUGxheWVyLCBOdWxsLCBLbm9ja2VkIERvd24sIDk5OTkpOwoJCQlXYWl0KDAuMjUwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlFbmQ7CgkJSWYoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIpOwoJCQlTZXQgU3RhdHVzKEV2ZW50IFBsYXllciwgTnVsbCwgUGhhc2VkIE91dCwgOTk5OSk7CgkJRW5kOwoJCUxvb3AgSWYgQ29uZGl0aW9uIElzIFRydWU7Cgl9Cn0KCnJ1bGUoIkhWVCBUZWFtIDEgU2xvdCA2OiBTdWJkdWVkLCBjaGVjayBQbGF5ZXIgaW4gUmFkaXVzIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNsb3QgNjsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLkdhbWVtb2RlID09IDI7CgkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDI7Cgl9CgoJYWN0aW9ucwoJewoJCUlmKElzIFRydWUgRm9yIEFueShHbG9iYWwuQ29tYmF0YW50cywgIUN1cnJlbnQgQXJyYXkgRWxlbWVudC5Eb3duZWRfc2luY2UgJiYgIShDdXJyZW50IEFycmF5IEVsZW1lbnQuSXNfaW52aXNpYmxlICUgMykKCQkJJiYgRGlzdGFuY2UgQmV0d2VlbihFdmVudCBQbGF5ZXIsIFZlY3RvcihYIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihDdXJyZW50IEFycmF5IEVsZW1lbnQpKSwgWSBDb21wb25lbnQgT2YoUG9zaXRpb24gT2YoCgkJCUV2ZW50IFBsYXllcikpLCBaIENvbXBvbmVudCBPZihQb3NpdGlvbiBPZihDdXJyZW50IEFycmF5IEVsZW1lbnQpKSkpIDw9IDEwICYmIEFic29sdXRlIFZhbHVlKFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKAoJCQlFdmVudCBQbGF5ZXIpKSAtIFkgQ29tcG9uZW50IE9mKFBvc2l0aW9uIE9mKEN1cnJlbnQgQXJyYXkgRWxlbWVudCkpKSA8PSA1ICYmIElzIEluIExpbmUgb2YgU2lnaHQoRXZlbnQgUGxheWVyLAoJCQlDdXJyZW50IEFycmF5IEVsZW1lbnQsIEJhcnJpZXJzIERvIE5vdCBCbG9jayBMT1MpKSk7CgkJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgPSAyOwoJCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9UaW1lciArPSAxOwoJCUVsc2UgSWYoR2xvYmFsLkhWVF9UaW1lc19TdWJkdWVkID49IDMpOwoJCQlFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID0gMTsKCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfVGltZXIgKz0gMC41MDA7CgkJRWxzZSBJZihFdmVudCBQbGF5ZXIuRG93bmVkX3NpbmNlID4gMCk7CgkJCUV2ZW50IFBsYXllci5Eb3duZWRfc2luY2UgLT0gMC4yMDA7CgkJRWxzZTsKCQkJRXZlbnQgUGxheWVyLlJldml2ZV9UaW1lciArPSBHbG9iYWwuSFZUX1RpbWVzX1N1YmR1ZWQgPT0gMSA/IDIgOiAxOwoJCUVuZDsKCQlJZihHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9UaW1lciA+PSAxNTApOwoJCQlDbGVhciBTdGF0dXMoRXZlbnQgUGxheWVyLCBLbm9ja2VkIERvd24pOwoJCQlDbGVhciBTdGF0dXMoRXZlbnQgUGxheWVyLCBQaGFzZWQgT3V0KTsKCQkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgSW52aW5jaWJsZSk7CgkJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEdvb2QgUGlja3VwIEVmZmVjdCwgQ29sb3IoWWVsbG93KSwgUG9zaXRpb24gT2YoRXZlbnQgUGxheWVyKSwgMSk7CgkJCVBsYXkgRWZmZWN0KEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEV4cGxvc2lvbiBTb3VuZCwgQ29sb3IoV2hpdGUpLCBQb3NpdGlvbiBPZihFdmVudCBQbGF5ZXIpLCAyMDApOwoJCQlUZWxlcG9ydChFdmVudCBQbGF5ZXIsIDEwMDAgKiBEb3duKTsKCQkJQmlnIE1lc3NhZ2UoQWxsIFBsYXllcnMoQWxsIFRlYW1zKSwgQ3VzdG9tIFN0cmluZygiS2lsbCB0aGUgcmVtYWluaW5nIGVuZW1pZXMhIikpOwoJCQlHbG9iYWwuU3Bhd25zX3JlbWFpbmluZyA9IEZhbHNlOwoJCQlHbG9iYWwuQm9zc19TcGF3bnNfcmVtYWluaW5nID0gMDsKCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID0gMzsKCQkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfVGltZXIgPSAwOwoJCUVsc2UgSWYoRXZlbnQgUGxheWVyLlJldml2ZV9UaW1lciA+PSAxNTApOwoJCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPSAxOwoJCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9UaW1lciA9IDA7CgkJCUV2ZW50IFBsYXllci5QZXJrX1B1bXBpbmdfSXJvbiA9IDA7CgkJCUJpZyBNZXNzYWdlKEFsbCBQbGF5ZXJzKEFsbCBUZWFtcyksIEN1c3RvbSBTdHJpbmcoIlRoZSBIVlQgaGFzIGJlZW4gcmV2aXZlZCEiLCBFdmVudCBQbGF5ZXIpKTsKCQkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgS25vY2tlZCBEb3duKTsKCQkJQ2xlYXIgU3RhdHVzKEV2ZW50IFBsYXllciwgUGhhc2VkIE91dCk7CgkJCUNsZWFyIFN0YXR1cyhFdmVudCBQbGF5ZXIsIEludmluY2libGUpOwoJCUVuZDsKCQlXYWl0KDAuMjAwLCBJZ25vcmUgQ29uZGl0aW9uKTsKCQlMb29wIElmIENvbmRpdGlvbiBJcyBUcnVlOwoJfQp9CgpydWxlKCJIVlQgVGVhbSAxIFNsb3QgNjogU2V0IC8gVW5zZXQgSXMgQXNzYXVsdGluZyIpCnsKCWV2ZW50Cgl7CgkJT25nb2luZyAtIEVhY2ggUGxheWVyOwoJCVRlYW0gMTsKCQlTbG90IDY7Cgl9CgoJY29uZGl0aW9ucwoJewoJCUdsb2JhbC5HYW1lbW9kZSA9PSAyOwoJCUV2ZW50IFBsYXllci5Jc19hc3NhdWx0aW5nICE9IEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TOwoJfQoKCWFjdGlvbnMKCXsKCQlXYWl0KEV2ZW50IFBsYXllci5Jc19UYXJnZXRfaW5fTE9TID8gNCA6IDIsIEFib3J0IFdoZW4gRmFsc2UpOwoJCUFib3J0IElmIENvbmRpdGlvbiBJcyBGYWxzZTsKCQlFdmVudCBQbGF5ZXIuSXNfYXNzYXVsdGluZyA9ICFFdmVudCBQbGF5ZXIuSXNfYXNzYXVsdGluZzsKCX0KfQoKcnVsZSgiSFZUIFRlYW0gMSBTbG90IDY6IENhbGwgUmVpbmZvcmNlbWVudHMiKQp7CglldmVudAoJewoJCU9uZ29pbmcgLSBFYWNoIFBsYXllcjsKCQlUZWFtIDE7CgkJU2xvdCA2OwoJfQoKCWNvbmRpdGlvbnMKCXsKCQlHbG9iYWwuR2FtZW1vZGUgPT0gMjsKCQlHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9TdGF0dXMgPT0gMTsKCQlOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIpID4gMC41MDA7CgkJSGVhbHRoKEV2ZW50IFBsYXllcikgIT0gMDsKCX0KCglhY3Rpb25zCgl7CgkJV2FpdCBVbnRpbChOb3JtYWxpemVkIEhlYWx0aChFdmVudCBQbGF5ZXIpIDw9IDAuNTAwIHx8IEdsb2JhbC5JVl9IVlRfT2JqZWN0aXZlX1N0YXR1cyA9PSAyLCA5OTk5OSk7CgkJSWYoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIpOwoJCQlHbG9iYWwuU3Bhd25zX3JlbWFpbmluZyA9IFRydWU7CgkJCUdsb2JhbC5Cb3NzX1NwYXduc19yZW1haW5pbmcgKz0gMTsKCQlFbHNlOwoJCQlQbGF5IEVmZmVjdChBbGwgUGxheWVycyhBbGwgVGVhbXMpLCBHb29kIFBpY2t1cCBFZmZlY3QsIENvbG9yKFJlZCksIEV2ZW50IFBsYXllciwgMSk7CgkJCUdsb2JhbC5IVlRfQ2FsbF9SZWluZm9yY2VtZW50cyA9IFRvdGFsIFRpbWUgRWxhcHNlZCArIDU7CgkJCVNldCBEYW1hZ2UgUmVjZWl2ZWQoRXZlbnQgUGxheWVyLCBFdmVudCBQbGF5ZXIuSXNfTGl2aW5nX0Jvc3MgPyA3LjUwMCA6IChIZXJvIE9mKEV2ZW50IFBsYXllcikgPT0gSGVybyhPcmlzYSkgfHwgSGVybyBPZigKCQkJCUV2ZW50IFBsYXllcikgPT0gSGVybyhTaWdtYSkgPyAyLjUwMCA6IDEpKTsKCQkJU2V0IFBsYXllciBIZWFsdGgoRXZlbnQgUGxheWVyLCAwLjUwMCAqIE1heCBIZWFsdGgoRXZlbnQgUGxheWVyKSk7CgkJCVdhaXQoMSwgSWdub3JlIENvbmRpdGlvbik7CgkJCUdsb2JhbC5TcGF3bnNfcmVtYWluaW5nID0gVHJ1ZTsKCQkJR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyArPSAxOwoJCQlXYWl0KDQsIElnbm9yZSBDb25kaXRpb24pOwoJCQlTZXQgRGFtYWdlIFJlY2VpdmVkKEV2ZW50IFBsYXllciwgRXZlbnQgUGxheWVyLklzX0xpdmluZ19Cb3NzID8gNzUgOiAoSGVybyBPZihFdmVudCBQbGF5ZXIpID09IEhlcm8oT3Jpc2EpIHx8IEhlcm8gT2YoRXZlbnQgUGxheWVyKQoJCQkJPT0gSGVybyhTaWdtYSkgPyAyNSA6IDEwKSk7CgkJCVdhaXQgVW50aWwoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDIsIDk5OTk5KTsKCQlFbmQ7Cgl9Cn0KCnJ1bGUoIkhWVCBUZWFtIDEgU2xvdCA2OiBDYXB0dXJlIEJyZWFrcG9pbnRzIikKewoJZXZlbnQKCXsKCQlPbmdvaW5nIC0gRWFjaCBQbGF5ZXI7CgkJVGVhbSAxOwoJCVNsb3QgNjsKCX0KCgljb25kaXRpb25zCgl7CgkJR2xvYmFsLkdhbWVtb2RlID09IDI7CgkJR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDI7Cgl9CgoJYWN0aW9ucwoJewoJCUdsb2JhbC5VcGdyYWRlX0NvdW50ZXIgKz0gMTsKCQlTZXQgSGVhbGluZyBSZWNlaXZlZChBbGwgUGxheWVycyhUZWFtIDIpLCAxMDAgKyAyICogUm91bmQgVG8gSW50ZWdlcihHbG9iYWwuVXBncmFkZV9Db3VudGVyICogNyAvIDMsIERvd24pKTsKCQlTdGFydCBIZWFsIE92ZXIgVGltZShBbGwgUGxheWVycyhUZWFtIDIpLCBOdWxsLCAxLCAxMDAwMCk7CgkJR2xvYmFsLk1vbmV5ICs9IEdsb2JhbC5NdXRhdG9yc19hY3RpdmF0ZWQgPyAxMjAgOiA2MDsKCQlHbG9iYWwuQm9zc19TcGF3bnNfcmVtYWluaW5nICs9IEdsb2JhbC5XYXZlID49IDUgPyAyIDogMTsKCQlHbG9iYWwuU3Bhd25zX3JlbWFpbmluZyA9IFRydWU7CgkJV2FpdCBVbnRpbChHbG9iYWwuSVZfSFZUX09iamVjdGl2ZV9UaW1lciA+PSA3NSwgOTk5OTkpOwoJCUdsb2JhbC5Nb25leSArPSBHbG9iYWwuTXV0YXRvcnNfYWN0aXZhdGVkID8gMTIwIDogNjA7CgkJR2xvYmFsLkJvc3NfU3Bhd25zX3JlbWFpbmluZyArPSBHbG9iYWwuV2F2ZSA+PSA1ID8gMiA6IDE7CgkJR2xvYmFsLlNwYXduc19yZW1haW5pbmcgPSBUcnVlOwoJCVdhaXQgVW50aWwoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfVGltZXIgPj0gMTQwLCA5OTk5OSk7CgkJR2xvYmFsLlNwYXduc19yZW1haW5pbmcgPSBUcnVlOwoJCVdhaXQgVW50aWwoR2xvYmFsLklWX0hWVF9PYmplY3RpdmVfU3RhdHVzID09IDMsIDk5OTk5KTsKCQlHbG9iYWwuTW9uZXkgKz0gR2xvYmFsLk11dGF0b3JzX2FjdGl2YXRlZCA/IDEyMCA6IDYwOwoJfQp9';
require('fs').writeFileSync('VCC9V', Buffer.from(txt, 'base64').toString('utf8'));
// require('fs').writeFileSync('dist.json', JSON.stringify(WorkshopDeserialize(require('fs').readFileSync('VCC9V', { encoding: 'utf8' })), null, 2));
require('fs').writeFileSync('dist.json', JSON.stringify(WorkshopDeserialize(Buffer.from(txt, 'base64').toString('utf8')), null, 2));
exports.default = WorkshopDeserialize;
//# sourceMappingURL=app.js.map